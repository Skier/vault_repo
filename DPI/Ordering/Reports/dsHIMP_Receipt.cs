//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsHIMP_Receipt : DataSet {
        
        private HIMP_ReceiptDataTable tableHIMP_Receipt;
        
        public dsHIMP_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsHIMP_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["HIMP_Receipt"] != null)) {
                    this.Tables.Add(new HIMP_ReceiptDataTable(ds.Tables["HIMP_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HIMP_ReceiptDataTable HIMP_Receipt {
            get {
                return this.tableHIMP_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsHIMP_Receipt cln = ((dsHIMP_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["HIMP_Receipt"] != null)) {
                this.Tables.Add(new HIMP_ReceiptDataTable(ds.Tables["HIMP_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableHIMP_Receipt = ((HIMP_ReceiptDataTable)(this.Tables["HIMP_Receipt"]));
            if ((this.tableHIMP_Receipt != null)) {
                this.tableHIMP_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsHIMP_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsHIMP_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableHIMP_Receipt = new HIMP_ReceiptDataTable();
            this.Tables.Add(this.tableHIMP_Receipt);
        }
        
        private bool ShouldSerializeHIMP_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void HIMP_ReceiptRowChangeEventHandler(object sender, HIMP_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIMP_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnAccNumber;
            
            private DataColumn columnPhNumber;
            
            private DataColumn columnCustomer_Name;
            
            private DataColumn columnOrdNumber;
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnCustomer_Status;
            
            private DataColumn columnCurrentDueDate;
            
            private DataColumn columnSDiscoDate;
            
            private DataColumn columnPaymentInfo;
            
            private DataColumn columnLocalAmountDue;
            
            private DataColumn columnLocalAmountPaid;
            
            private DataColumn columnLDAmount;
            
            private DataColumn columnTotalAmountDue;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnChangeDue;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            private DataColumn columnMessage6;
            
            private DataColumn columnMessage7;
            
            private DataColumn columnMessage8;
            
            private DataColumn columnMessage9;
            
            private DataColumn columnMessage10;
            
            internal HIMP_ReceiptDataTable() : 
                    base("HIMP_Receipt") {
                this.InitClass();
            }
            
            internal HIMP_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn AccNumberColumn {
                get {
                    return this.columnAccNumber;
                }
            }
            
            internal DataColumn PhNumberColumn {
                get {
                    return this.columnPhNumber;
                }
            }
            
            internal DataColumn Customer_NameColumn {
                get {
                    return this.columnCustomer_Name;
                }
            }
            
            internal DataColumn OrdNumberColumn {
                get {
                    return this.columnOrdNumber;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn Customer_StatusColumn {
                get {
                    return this.columnCustomer_Status;
                }
            }
            
            internal DataColumn CurrentDueDateColumn {
                get {
                    return this.columnCurrentDueDate;
                }
            }
            
            internal DataColumn SDiscoDateColumn {
                get {
                    return this.columnSDiscoDate;
                }
            }
            
            internal DataColumn PaymentInfoColumn {
                get {
                    return this.columnPaymentInfo;
                }
            }
            
            internal DataColumn LocalAmountDueColumn {
                get {
                    return this.columnLocalAmountDue;
                }
            }
            
            internal DataColumn LocalAmountPaidColumn {
                get {
                    return this.columnLocalAmountPaid;
                }
            }
            
            internal DataColumn LDAmountColumn {
                get {
                    return this.columnLDAmount;
                }
            }
            
            internal DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn ChangeDueColumn {
                get {
                    return this.columnChangeDue;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            internal DataColumn Message6Column {
                get {
                    return this.columnMessage6;
                }
            }
            
            internal DataColumn Message7Column {
                get {
                    return this.columnMessage7;
                }
            }
            
            internal DataColumn Message8Column {
                get {
                    return this.columnMessage8;
                }
            }
            
            internal DataColumn Message9Column {
                get {
                    return this.columnMessage9;
                }
            }
            
            internal DataColumn Message10Column {
                get {
                    return this.columnMessage10;
                }
            }
            
            public HIMP_ReceiptRow this[int index] {
                get {
                    return ((HIMP_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event HIMP_ReceiptRowChangeEventHandler HIMP_ReceiptRowChanged;
            
            public event HIMP_ReceiptRowChangeEventHandler HIMP_ReceiptRowChanging;
            
            public event HIMP_ReceiptRowChangeEventHandler HIMP_ReceiptRowDeleted;
            
            public event HIMP_ReceiptRowChangeEventHandler HIMP_ReceiptRowDeleting;
            
            public void AddHIMP_ReceiptRow(HIMP_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public HIMP_ReceiptRow AddHIMP_ReceiptRow(
                        string Heading1, 
                        string Heading2, 
                        int AccNumber, 
                        string PhNumber, 
                        string Customer_Name, 
                        int OrdNumber, 
                        string StoreCode, 
                        System.DateTime PayDate, 
                        string PaymentType, 
                        string Customer_Status, 
                        System.DateTime CurrentDueDate, 
                        string SDiscoDate, 
                        int PaymentInfo, 
                        System.Decimal LocalAmountDue, 
                        System.Decimal LocalAmountPaid, 
                        System.Decimal LDAmount, 
                        System.Decimal TotalAmountDue, 
                        System.Decimal AmountTendered, 
                        System.Decimal ChangeDue, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5, 
                        string Message6, 
                        string Message7, 
                        string Message8, 
                        string Message9, 
                        string Message10) {
                HIMP_ReceiptRow rowHIMP_ReceiptRow = ((HIMP_ReceiptRow)(this.NewRow()));
                rowHIMP_ReceiptRow.ItemArray = new object[] {
                        Heading1,
                        Heading2,
                        AccNumber,
                        PhNumber,
                        Customer_Name,
                        OrdNumber,
                        StoreCode,
                        PayDate,
                        PaymentType,
                        Customer_Status,
                        CurrentDueDate,
                        SDiscoDate,
                        PaymentInfo,
                        LocalAmountDue,
                        LocalAmountPaid,
                        LDAmount,
                        TotalAmountDue,
                        AmountTendered,
                        ChangeDue,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5,
                        Message6,
                        Message7,
                        Message8,
                        Message9,
                        Message10};
                this.Rows.Add(rowHIMP_ReceiptRow);
                return rowHIMP_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HIMP_ReceiptDataTable cln = ((HIMP_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HIMP_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnAccNumber = this.Columns["AccNumber"];
                this.columnPhNumber = this.Columns["PhNumber"];
                this.columnCustomer_Name = this.Columns["Customer_Name"];
                this.columnOrdNumber = this.Columns["OrdNumber"];
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnCustomer_Status = this.Columns["Customer_Status"];
                this.columnCurrentDueDate = this.Columns["CurrentDueDate"];
                this.columnSDiscoDate = this.Columns["SDiscoDate"];
                this.columnPaymentInfo = this.Columns["PaymentInfo"];
                this.columnLocalAmountDue = this.Columns["LocalAmountDue"];
                this.columnLocalAmountPaid = this.Columns["LocalAmountPaid"];
                this.columnLDAmount = this.Columns["LDAmount"];
                this.columnTotalAmountDue = this.Columns["TotalAmountDue"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnChangeDue = this.Columns["ChangeDue"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
                this.columnMessage6 = this.Columns["Message6"];
                this.columnMessage7 = this.Columns["Message7"];
                this.columnMessage8 = this.Columns["Message8"];
                this.columnMessage9 = this.Columns["Message9"];
                this.columnMessage10 = this.Columns["Message10"];
            }
            
            private void InitClass() {
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnAccNumber = new DataColumn("AccNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccNumber);
                this.columnPhNumber = new DataColumn("PhNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhNumber);
                this.columnCustomer_Name = new DataColumn("Customer_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Name);
                this.columnOrdNumber = new DataColumn("OrdNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrdNumber);
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnCustomer_Status = new DataColumn("Customer_Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Status);
                this.columnCurrentDueDate = new DataColumn("CurrentDueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentDueDate);
                this.columnSDiscoDate = new DataColumn("SDiscoDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSDiscoDate);
                this.columnPaymentInfo = new DataColumn("PaymentInfo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentInfo);
                this.columnLocalAmountDue = new DataColumn("LocalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountDue);
                this.columnLocalAmountPaid = new DataColumn("LocalAmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountPaid);
                this.columnLDAmount = new DataColumn("LDAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLDAmount);
                this.columnTotalAmountDue = new DataColumn("TotalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountDue);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnChangeDue = new DataColumn("ChangeDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeDue);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnMessage6 = new DataColumn("Message6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage6);
                this.columnMessage7 = new DataColumn("Message7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage7);
                this.columnMessage8 = new DataColumn("Message8", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage8);
                this.columnMessage9 = new DataColumn("Message9", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage9);
                this.columnMessage10 = new DataColumn("Message10", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage10);
            }
            
            public HIMP_ReceiptRow NewHIMP_ReceiptRow() {
                return ((HIMP_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HIMP_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HIMP_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HIMP_ReceiptRowChanged != null)) {
                    this.HIMP_ReceiptRowChanged(this, new HIMP_ReceiptRowChangeEvent(((HIMP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HIMP_ReceiptRowChanging != null)) {
                    this.HIMP_ReceiptRowChanging(this, new HIMP_ReceiptRowChangeEvent(((HIMP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HIMP_ReceiptRowDeleted != null)) {
                    this.HIMP_ReceiptRowDeleted(this, new HIMP_ReceiptRowChangeEvent(((HIMP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HIMP_ReceiptRowDeleting != null)) {
                    this.HIMP_ReceiptRowDeleting(this, new HIMP_ReceiptRowChangeEvent(((HIMP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHIMP_ReceiptRow(HIMP_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIMP_ReceiptRow : DataRow {
            
            private HIMP_ReceiptDataTable tableHIMP_Receipt;
            
            internal HIMP_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHIMP_Receipt = ((HIMP_ReceiptDataTable)(this.Table));
            }
            
            public string Heading1 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Heading1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Heading2Column] = value;
                }
            }
            
            public int AccNumber {
                get {
                    try {
                        return ((int)(this[this.tableHIMP_Receipt.AccNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.AccNumberColumn] = value;
                }
            }
            
            public string PhNumber {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.PhNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.PhNumberColumn] = value;
                }
            }
            
            public string Customer_Name {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Customer_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Customer_NameColumn] = value;
                }
            }
            
            public int OrdNumber {
                get {
                    try {
                        return ((int)(this[this.tableHIMP_Receipt.OrdNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.OrdNumberColumn] = value;
                }
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.StoreCodeColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableHIMP_Receipt.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.PaymentTypeColumn] = value;
                }
            }
            
            public string Customer_Status {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Customer_StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Customer_StatusColumn] = value;
                }
            }
            
            public System.DateTime CurrentDueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableHIMP_Receipt.CurrentDueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.CurrentDueDateColumn] = value;
                }
            }
            
            public string SDiscoDate {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.SDiscoDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.SDiscoDateColumn] = value;
                }
            }
            
            public int PaymentInfo {
                get {
                    try {
                        return ((int)(this[this.tableHIMP_Receipt.PaymentInfoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.PaymentInfoColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.LocalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.LocalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.LocalAmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.LocalAmountPaidColumn] = value;
                }
            }
            
            public System.Decimal LDAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.LDAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.LDAmountColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.TotalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.TotalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal ChangeDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHIMP_Receipt.ChangeDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.ChangeDueColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message5Column] = value;
                }
            }
            
            public string Message6 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message6Column] = value;
                }
            }
            
            public string Message7 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message7Column] = value;
                }
            }
            
            public string Message8 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message8Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message8Column] = value;
                }
            }
            
            public string Message9 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message9Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message9Column] = value;
                }
            }
            
            public string Message10 {
                get {
                    try {
                        return ((string)(this[this.tableHIMP_Receipt.Message10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHIMP_Receipt.Message10Column] = value;
                }
            }
            
            public bool IsHeading1Null() {
                return this.IsNull(this.tableHIMP_Receipt.Heading1Column);
            }
            
            public void SetHeading1Null() {
                this[this.tableHIMP_Receipt.Heading1Column] = System.Convert.DBNull;
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableHIMP_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableHIMP_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsAccNumberNull() {
                return this.IsNull(this.tableHIMP_Receipt.AccNumberColumn);
            }
            
            public void SetAccNumberNull() {
                this[this.tableHIMP_Receipt.AccNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhNumberNull() {
                return this.IsNull(this.tableHIMP_Receipt.PhNumberColumn);
            }
            
            public void SetPhNumberNull() {
                this[this.tableHIMP_Receipt.PhNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomer_NameNull() {
                return this.IsNull(this.tableHIMP_Receipt.Customer_NameColumn);
            }
            
            public void SetCustomer_NameNull() {
                this[this.tableHIMP_Receipt.Customer_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsOrdNumberNull() {
                return this.IsNull(this.tableHIMP_Receipt.OrdNumberColumn);
            }
            
            public void SetOrdNumberNull() {
                this[this.tableHIMP_Receipt.OrdNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tableHIMP_Receipt.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tableHIMP_Receipt.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tableHIMP_Receipt.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tableHIMP_Receipt.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableHIMP_Receipt.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableHIMP_Receipt.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomer_StatusNull() {
                return this.IsNull(this.tableHIMP_Receipt.Customer_StatusColumn);
            }
            
            public void SetCustomer_StatusNull() {
                this[this.tableHIMP_Receipt.Customer_StatusColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentDueDateNull() {
                return this.IsNull(this.tableHIMP_Receipt.CurrentDueDateColumn);
            }
            
            public void SetCurrentDueDateNull() {
                this[this.tableHIMP_Receipt.CurrentDueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSDiscoDateNull() {
                return this.IsNull(this.tableHIMP_Receipt.SDiscoDateColumn);
            }
            
            public void SetSDiscoDateNull() {
                this[this.tableHIMP_Receipt.SDiscoDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentInfoNull() {
                return this.IsNull(this.tableHIMP_Receipt.PaymentInfoColumn);
            }
            
            public void SetPaymentInfoNull() {
                this[this.tableHIMP_Receipt.PaymentInfoColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountDueNull() {
                return this.IsNull(this.tableHIMP_Receipt.LocalAmountDueColumn);
            }
            
            public void SetLocalAmountDueNull() {
                this[this.tableHIMP_Receipt.LocalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountPaidNull() {
                return this.IsNull(this.tableHIMP_Receipt.LocalAmountPaidColumn);
            }
            
            public void SetLocalAmountPaidNull() {
                this[this.tableHIMP_Receipt.LocalAmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsLDAmountNull() {
                return this.IsNull(this.tableHIMP_Receipt.LDAmountColumn);
            }
            
            public void SetLDAmountNull() {
                this[this.tableHIMP_Receipt.LDAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableHIMP_Receipt.TotalAmountDueColumn);
            }
            
            public void SetTotalAmountDueNull() {
                this[this.tableHIMP_Receipt.TotalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableHIMP_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableHIMP_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeDueNull() {
                return this.IsNull(this.tableHIMP_Receipt.ChangeDueColumn);
            }
            
            public void SetChangeDueNull() {
                this[this.tableHIMP_Receipt.ChangeDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableHIMP_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableHIMP_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableHIMP_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableHIMP_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableHIMP_Receipt.Message5Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage6Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message6Column);
            }
            
            public void SetMessage6Null() {
                this[this.tableHIMP_Receipt.Message6Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage7Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message7Column);
            }
            
            public void SetMessage7Null() {
                this[this.tableHIMP_Receipt.Message7Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage8Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message8Column);
            }
            
            public void SetMessage8Null() {
                this[this.tableHIMP_Receipt.Message8Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage9Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message9Column);
            }
            
            public void SetMessage9Null() {
                this[this.tableHIMP_Receipt.Message9Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage10Null() {
                return this.IsNull(this.tableHIMP_Receipt.Message10Column);
            }
            
            public void SetMessage10Null() {
                this[this.tableHIMP_Receipt.Message10Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HIMP_ReceiptRowChangeEvent : EventArgs {
            
            private HIMP_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public HIMP_ReceiptRowChangeEvent(HIMP_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HIMP_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
