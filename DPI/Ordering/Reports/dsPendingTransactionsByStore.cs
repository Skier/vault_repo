//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsPendingTransactionsByStore : DataSet {
        
        private spPendingTransactionsByStoreDataTable tablespPendingTransactionsByStore;
        
        public dsPendingTransactionsByStore() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsPendingTransactionsByStore(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["spPendingTransactionsByStore"] != null)) {
                    this.Tables.Add(new spPendingTransactionsByStoreDataTable(ds.Tables["spPendingTransactionsByStore"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spPendingTransactionsByStoreDataTable spPendingTransactionsByStore {
            get {
                return this.tablespPendingTransactionsByStore;
            }
        }
        
        public override DataSet Clone() {
            dsPendingTransactionsByStore cln = ((dsPendingTransactionsByStore)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["spPendingTransactionsByStore"] != null)) {
                this.Tables.Add(new spPendingTransactionsByStoreDataTable(ds.Tables["spPendingTransactionsByStore"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablespPendingTransactionsByStore = ((spPendingTransactionsByStoreDataTable)(this.Tables["spPendingTransactionsByStore"]));
            if ((this.tablespPendingTransactionsByStore != null)) {
                this.tablespPendingTransactionsByStore.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsPendingTransactionsByStore";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsPendingTransactionsByStore.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablespPendingTransactionsByStore = new spPendingTransactionsByStoreDataTable();
            this.Tables.Add(this.tablespPendingTransactionsByStore);
        }
        
        private bool ShouldSerializespPendingTransactionsByStore() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void spPendingTransactionsByStoreRowChangeEventHandler(object sender, spPendingTransactionsByStoreRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spPendingTransactionsByStoreDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnAccountNumber;
            
            private DataColumn columnPhoneNumber;
            
            private DataColumn columnCustName;
            
            private DataColumn columnPymtDate;
            
            private DataColumn columnPymtTime;
            
            private DataColumn columnClerk;
            
            private DataColumn columnAmount;
            
            private DataColumn columnDmdType;
            
            private DataColumn columnConfNumber;
            
            private DataColumn columnStatus;
            
            internal spPendingTransactionsByStoreDataTable() : 
                    base("spPendingTransactionsByStore") {
                this.InitClass();
            }
            
            internal spPendingTransactionsByStoreDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn AccountNumberColumn {
                get {
                    return this.columnAccountNumber;
                }
            }
            
            internal DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            internal DataColumn CustNameColumn {
                get {
                    return this.columnCustName;
                }
            }
            
            internal DataColumn PymtDateColumn {
                get {
                    return this.columnPymtDate;
                }
            }
            
            internal DataColumn PymtTimeColumn {
                get {
                    return this.columnPymtTime;
                }
            }
            
            internal DataColumn ClerkColumn {
                get {
                    return this.columnClerk;
                }
            }
            
            internal DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            internal DataColumn DmdTypeColumn {
                get {
                    return this.columnDmdType;
                }
            }
            
            internal DataColumn ConfNumberColumn {
                get {
                    return this.columnConfNumber;
                }
            }
            
            internal DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            public spPendingTransactionsByStoreRow this[int index] {
                get {
                    return ((spPendingTransactionsByStoreRow)(this.Rows[index]));
                }
            }
            
            public event spPendingTransactionsByStoreRowChangeEventHandler spPendingTransactionsByStoreRowChanged;
            
            public event spPendingTransactionsByStoreRowChangeEventHandler spPendingTransactionsByStoreRowChanging;
            
            public event spPendingTransactionsByStoreRowChangeEventHandler spPendingTransactionsByStoreRowDeleted;
            
            public event spPendingTransactionsByStoreRowChangeEventHandler spPendingTransactionsByStoreRowDeleting;
            
            public void AddspPendingTransactionsByStoreRow(spPendingTransactionsByStoreRow row) {
                this.Rows.Add(row);
            }
            
            public spPendingTransactionsByStoreRow AddspPendingTransactionsByStoreRow(int AccountNumber, string PhoneNumber, string CustName, string PymtDate, string PymtTime, string Clerk, System.Decimal Amount, string DmdType, string ConfNumber, string Status) {
                spPendingTransactionsByStoreRow rowspPendingTransactionsByStoreRow = ((spPendingTransactionsByStoreRow)(this.NewRow()));
                rowspPendingTransactionsByStoreRow.ItemArray = new object[] {
                        AccountNumber,
                        PhoneNumber,
                        CustName,
                        PymtDate,
                        PymtTime,
                        Clerk,
                        Amount,
                        DmdType,
                        ConfNumber,
                        Status};
                this.Rows.Add(rowspPendingTransactionsByStoreRow);
                return rowspPendingTransactionsByStoreRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                spPendingTransactionsByStoreDataTable cln = ((spPendingTransactionsByStoreDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new spPendingTransactionsByStoreDataTable();
            }
            
            internal void InitVars() {
                this.columnAccountNumber = this.Columns["AccountNumber"];
                this.columnPhoneNumber = this.Columns["PhoneNumber"];
                this.columnCustName = this.Columns["CustName"];
                this.columnPymtDate = this.Columns["PymtDate"];
                this.columnPymtTime = this.Columns["PymtTime"];
                this.columnClerk = this.Columns["Clerk"];
                this.columnAmount = this.Columns["Amount"];
                this.columnDmdType = this.Columns["DmdType"];
                this.columnConfNumber = this.Columns["ConfNumber"];
                this.columnStatus = this.Columns["Status"];
            }
            
            private void InitClass() {
                this.columnAccountNumber = new DataColumn("AccountNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccountNumber);
                this.columnPhoneNumber = new DataColumn("PhoneNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhoneNumber);
                this.columnCustName = new DataColumn("CustName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustName);
                this.columnPymtDate = new DataColumn("PymtDate", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPymtDate);
                this.columnPymtTime = new DataColumn("PymtTime", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPymtTime);
                this.columnClerk = new DataColumn("Clerk", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnClerk);
                this.columnAmount = new DataColumn("Amount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmount);
                this.columnDmdType = new DataColumn("DmdType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDmdType);
                this.columnConfNumber = new DataColumn("ConfNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfNumber);
                this.columnStatus = new DataColumn("Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStatus);
                this.columnPhoneNumber.ReadOnly = true;
                this.columnCustName.ReadOnly = true;
                this.columnPymtDate.ReadOnly = true;
                this.columnPymtTime.ReadOnly = true;
                this.columnAmount.ReadOnly = true;
            }
            
            public spPendingTransactionsByStoreRow NewspPendingTransactionsByStoreRow() {
                return ((spPendingTransactionsByStoreRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new spPendingTransactionsByStoreRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(spPendingTransactionsByStoreRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spPendingTransactionsByStoreRowChanged != null)) {
                    this.spPendingTransactionsByStoreRowChanged(this, new spPendingTransactionsByStoreRowChangeEvent(((spPendingTransactionsByStoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spPendingTransactionsByStoreRowChanging != null)) {
                    this.spPendingTransactionsByStoreRowChanging(this, new spPendingTransactionsByStoreRowChangeEvent(((spPendingTransactionsByStoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spPendingTransactionsByStoreRowDeleted != null)) {
                    this.spPendingTransactionsByStoreRowDeleted(this, new spPendingTransactionsByStoreRowChangeEvent(((spPendingTransactionsByStoreRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spPendingTransactionsByStoreRowDeleting != null)) {
                    this.spPendingTransactionsByStoreRowDeleting(this, new spPendingTransactionsByStoreRowChangeEvent(((spPendingTransactionsByStoreRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespPendingTransactionsByStoreRow(spPendingTransactionsByStoreRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spPendingTransactionsByStoreRow : DataRow {
            
            private spPendingTransactionsByStoreDataTable tablespPendingTransactionsByStore;
            
            internal spPendingTransactionsByStoreRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespPendingTransactionsByStore = ((spPendingTransactionsByStoreDataTable)(this.Table));
            }
            
            public int AccountNumber {
                get {
                    try {
                        return ((int)(this[this.tablespPendingTransactionsByStore.AccountNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.AccountNumberColumn] = value;
                }
            }
            
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.PhoneNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.PhoneNumberColumn] = value;
                }
            }
            
            public string CustName {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.CustNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.CustNameColumn] = value;
                }
            }
            
            public string PymtDate {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.PymtDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.PymtDateColumn] = value;
                }
            }
            
            public string PymtTime {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.PymtTimeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.PymtTimeColumn] = value;
                }
            }
            
            public string Clerk {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.ClerkColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.ClerkColumn] = value;
                }
            }
            
            public System.Decimal Amount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablespPendingTransactionsByStore.AmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.AmountColumn] = value;
                }
            }
            
            public string DmdType {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.DmdTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.DmdTypeColumn] = value;
                }
            }
            
            public string ConfNumber {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.ConfNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.ConfNumberColumn] = value;
                }
            }
            
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tablespPendingTransactionsByStore.StatusColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespPendingTransactionsByStore.StatusColumn] = value;
                }
            }
            
            public bool IsAccountNumberNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.AccountNumberColumn);
            }
            
            public void SetAccountNumberNull() {
                this[this.tablespPendingTransactionsByStore.AccountNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.PhoneNumberColumn);
            }
            
            public void SetPhoneNumberNull() {
                this[this.tablespPendingTransactionsByStore.PhoneNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustNameNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.CustNameColumn);
            }
            
            public void SetCustNameNull() {
                this[this.tablespPendingTransactionsByStore.CustNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPymtDateNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.PymtDateColumn);
            }
            
            public void SetPymtDateNull() {
                this[this.tablespPendingTransactionsByStore.PymtDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPymtTimeNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.PymtTimeColumn);
            }
            
            public void SetPymtTimeNull() {
                this[this.tablespPendingTransactionsByStore.PymtTimeColumn] = System.Convert.DBNull;
            }
            
            public bool IsClerkNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.ClerkColumn);
            }
            
            public void SetClerkNull() {
                this[this.tablespPendingTransactionsByStore.ClerkColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.AmountColumn);
            }
            
            public void SetAmountNull() {
                this[this.tablespPendingTransactionsByStore.AmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsDmdTypeNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.DmdTypeColumn);
            }
            
            public void SetDmdTypeNull() {
                this[this.tablespPendingTransactionsByStore.DmdTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsConfNumberNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.ConfNumberColumn);
            }
            
            public void SetConfNumberNull() {
                this[this.tablespPendingTransactionsByStore.ConfNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStatusNull() {
                return this.IsNull(this.tablespPendingTransactionsByStore.StatusColumn);
            }
            
            public void SetStatusNull() {
                this[this.tablespPendingTransactionsByStore.StatusColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spPendingTransactionsByStoreRowChangeEvent : EventArgs {
            
            private spPendingTransactionsByStoreRow eventRow;
            
            private DataRowAction eventAction;
            
            public spPendingTransactionsByStoreRowChangeEvent(spPendingTransactionsByStoreRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public spPendingTransactionsByStoreRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
