//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsDCNew_Receipt : DataSet {
        
        private DCNew_ReceiptDataTable tableDCNew_Receipt;
        
        public dsDCNew_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsDCNew_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["DCNew_Receipt"] != null)) {
                    this.Tables.Add(new DCNew_ReceiptDataTable(ds.Tables["DCNew_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DCNew_ReceiptDataTable DCNew_Receipt {
            get {
                return this.tableDCNew_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsDCNew_Receipt cln = ((dsDCNew_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["DCNew_Receipt"] != null)) {
                this.Tables.Add(new DCNew_ReceiptDataTable(ds.Tables["DCNew_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDCNew_Receipt = ((DCNew_ReceiptDataTable)(this.Tables["DCNew_Receipt"]));
            if ((this.tableDCNew_Receipt != null)) {
                this.tableDCNew_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsDCNew_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDCNew_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDCNew_Receipt = new DCNew_ReceiptDataTable();
            this.Tables.Add(this.tableDCNew_Receipt);
        }
        
        private bool ShouldSerializeDCNew_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DCNew_ReceiptRowChangeEventHandler(object sender, DCNew_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DCNew_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnCardProvider;
            
            private DataColumn columnTransType;
            
            private DataColumn columnEnrollFee;
            
            private DataColumn columnCardNumber;
            
            private DataColumn columnLoadValue;
            
            private DataColumn columnConfNumber;
            
            private DataColumn columnMerchant;
            
            private DataColumn columnSaleDate;
            
            private DataColumn columnTotalAmountPaid;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            private DataColumn columnMessage6;
            
            private DataColumn columnMessage7;
            
            private DataColumn columnMessage8;
            
            private DataColumn columnMessage9;
            
            private DataColumn columnMessage10;
            
            private DataColumn columnMessage11;
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnCardholder;
            
            private DataColumn columnLoadFee;
            
            private DataColumn columnCurrentBalance;
            
            private DataColumn columnChangeAmount;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnAmountDue;
            
            internal DCNew_ReceiptDataTable() : 
                    base("DCNew_Receipt") {
                this.InitClass();
            }
            
            internal DCNew_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn CardProviderColumn {
                get {
                    return this.columnCardProvider;
                }
            }
            
            internal DataColumn TransTypeColumn {
                get {
                    return this.columnTransType;
                }
            }
            
            internal DataColumn EnrollFeeColumn {
                get {
                    return this.columnEnrollFee;
                }
            }
            
            internal DataColumn CardNumberColumn {
                get {
                    return this.columnCardNumber;
                }
            }
            
            internal DataColumn LoadValueColumn {
                get {
                    return this.columnLoadValue;
                }
            }
            
            internal DataColumn ConfNumberColumn {
                get {
                    return this.columnConfNumber;
                }
            }
            
            internal DataColumn MerchantColumn {
                get {
                    return this.columnMerchant;
                }
            }
            
            internal DataColumn SaleDateColumn {
                get {
                    return this.columnSaleDate;
                }
            }
            
            internal DataColumn TotalAmountPaidColumn {
                get {
                    return this.columnTotalAmountPaid;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            internal DataColumn Message6Column {
                get {
                    return this.columnMessage6;
                }
            }
            
            internal DataColumn Message7Column {
                get {
                    return this.columnMessage7;
                }
            }
            
            internal DataColumn Message8Column {
                get {
                    return this.columnMessage8;
                }
            }
            
            internal DataColumn Message9Column {
                get {
                    return this.columnMessage9;
                }
            }
            
            internal DataColumn Message10Column {
                get {
                    return this.columnMessage10;
                }
            }
            
            internal DataColumn Message11Column {
                get {
                    return this.columnMessage11;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn CardholderColumn {
                get {
                    return this.columnCardholder;
                }
            }
            
            internal DataColumn LoadFeeColumn {
                get {
                    return this.columnLoadFee;
                }
            }
            
            internal DataColumn CurrentBalanceColumn {
                get {
                    return this.columnCurrentBalance;
                }
            }
            
            internal DataColumn ChangeAmountColumn {
                get {
                    return this.columnChangeAmount;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn AmountDueColumn {
                get {
                    return this.columnAmountDue;
                }
            }
            
            public DCNew_ReceiptRow this[int index] {
                get {
                    return ((DCNew_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event DCNew_ReceiptRowChangeEventHandler DCNew_ReceiptRowChanged;
            
            public event DCNew_ReceiptRowChangeEventHandler DCNew_ReceiptRowChanging;
            
            public event DCNew_ReceiptRowChangeEventHandler DCNew_ReceiptRowDeleted;
            
            public event DCNew_ReceiptRowChangeEventHandler DCNew_ReceiptRowDeleting;
            
            public void AddDCNew_ReceiptRow(DCNew_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public DCNew_ReceiptRow AddDCNew_ReceiptRow(
                        string CardProvider, 
                        string TransType, 
                        System.Decimal EnrollFee, 
                        string CardNumber, 
                        System.Decimal LoadValue, 
                        int ConfNumber, 
                        string Merchant, 
                        System.DateTime SaleDate, 
                        System.Decimal TotalAmountPaid, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5, 
                        string Message6, 
                        string Message7, 
                        string Message8, 
                        string Message9, 
                        string Message10, 
                        string Message11, 
                        string Heading1, 
                        string Heading2, 
                        string Cardholder, 
                        System.Decimal LoadFee, 
                        System.Decimal CurrentBalance, 
                        System.Decimal ChangeAmount, 
                        System.Decimal AmountTendered, 
                        System.Decimal AmountDue) {
                DCNew_ReceiptRow rowDCNew_ReceiptRow = ((DCNew_ReceiptRow)(this.NewRow()));
                rowDCNew_ReceiptRow.ItemArray = new object[] {
                        CardProvider,
                        TransType,
                        EnrollFee,
                        CardNumber,
                        LoadValue,
                        ConfNumber,
                        Merchant,
                        SaleDate,
                        TotalAmountPaid,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5,
                        Message6,
                        Message7,
                        Message8,
                        Message9,
                        Message10,
                        Message11,
                        Heading1,
                        Heading2,
                        Cardholder,
                        LoadFee,
                        CurrentBalance,
                        ChangeAmount,
                        AmountTendered,
                        AmountDue};
                this.Rows.Add(rowDCNew_ReceiptRow);
                return rowDCNew_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DCNew_ReceiptDataTable cln = ((DCNew_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DCNew_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnCardProvider = this.Columns["CardProvider"];
                this.columnTransType = this.Columns["TransType"];
                this.columnEnrollFee = this.Columns["EnrollFee"];
                this.columnCardNumber = this.Columns["CardNumber"];
                this.columnLoadValue = this.Columns["LoadValue"];
                this.columnConfNumber = this.Columns["ConfNumber"];
                this.columnMerchant = this.Columns["Merchant"];
                this.columnSaleDate = this.Columns["SaleDate"];
                this.columnTotalAmountPaid = this.Columns["TotalAmountPaid"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
                this.columnMessage6 = this.Columns["Message6"];
                this.columnMessage7 = this.Columns["Message7"];
                this.columnMessage8 = this.Columns["Message8"];
                this.columnMessage9 = this.Columns["Message9"];
                this.columnMessage10 = this.Columns["Message10"];
                this.columnMessage11 = this.Columns["Message11"];
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnCardholder = this.Columns["Cardholder"];
                this.columnLoadFee = this.Columns["LoadFee"];
                this.columnCurrentBalance = this.Columns["CurrentBalance"];
                this.columnChangeAmount = this.Columns["ChangeAmount"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnAmountDue = this.Columns["AmountDue"];
            }
            
            private void InitClass() {
                this.columnCardProvider = new DataColumn("CardProvider", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCardProvider);
                this.columnTransType = new DataColumn("TransType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransType);
                this.columnEnrollFee = new DataColumn("EnrollFee", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEnrollFee);
                this.columnCardNumber = new DataColumn("CardNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCardNumber);
                this.columnLoadValue = new DataColumn("LoadValue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLoadValue);
                this.columnConfNumber = new DataColumn("ConfNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfNumber);
                this.columnMerchant = new DataColumn("Merchant", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMerchant);
                this.columnSaleDate = new DataColumn("SaleDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSaleDate);
                this.columnTotalAmountPaid = new DataColumn("TotalAmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountPaid);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnMessage6 = new DataColumn("Message6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage6);
                this.columnMessage7 = new DataColumn("Message7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage7);
                this.columnMessage8 = new DataColumn("Message8", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage8);
                this.columnMessage9 = new DataColumn("Message9", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage9);
                this.columnMessage10 = new DataColumn("Message10", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage10);
                this.columnMessage11 = new DataColumn("Message11", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage11);
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnCardholder = new DataColumn("Cardholder", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCardholder);
                this.columnLoadFee = new DataColumn("LoadFee", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLoadFee);
                this.columnCurrentBalance = new DataColumn("CurrentBalance", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentBalance);
                this.columnChangeAmount = new DataColumn("ChangeAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeAmount);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnAmountDue = new DataColumn("AmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountDue);
            }
            
            public DCNew_ReceiptRow NewDCNew_ReceiptRow() {
                return ((DCNew_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DCNew_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DCNew_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DCNew_ReceiptRowChanged != null)) {
                    this.DCNew_ReceiptRowChanged(this, new DCNew_ReceiptRowChangeEvent(((DCNew_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DCNew_ReceiptRowChanging != null)) {
                    this.DCNew_ReceiptRowChanging(this, new DCNew_ReceiptRowChangeEvent(((DCNew_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DCNew_ReceiptRowDeleted != null)) {
                    this.DCNew_ReceiptRowDeleted(this, new DCNew_ReceiptRowChangeEvent(((DCNew_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DCNew_ReceiptRowDeleting != null)) {
                    this.DCNew_ReceiptRowDeleting(this, new DCNew_ReceiptRowChangeEvent(((DCNew_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDCNew_ReceiptRow(DCNew_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DCNew_ReceiptRow : DataRow {
            
            private DCNew_ReceiptDataTable tableDCNew_Receipt;
            
            internal DCNew_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDCNew_Receipt = ((DCNew_ReceiptDataTable)(this.Table));
            }
            
            public string CardProvider {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.CardProviderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.CardProviderColumn] = value;
                }
            }
            
            public string TransType {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.TransTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.TransTypeColumn] = value;
                }
            }
            
            public System.Decimal EnrollFee {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.EnrollFeeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.EnrollFeeColumn] = value;
                }
            }
            
            public string CardNumber {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.CardNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.CardNumberColumn] = value;
                }
            }
            
            public System.Decimal LoadValue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.LoadValueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.LoadValueColumn] = value;
                }
            }
            
            public int ConfNumber {
                get {
                    try {
                        return ((int)(this[this.tableDCNew_Receipt.ConfNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.ConfNumberColumn] = value;
                }
            }
            
            public string Merchant {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.MerchantColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.MerchantColumn] = value;
                }
            }
            
            public System.DateTime SaleDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableDCNew_Receipt.SaleDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.SaleDateColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.TotalAmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.TotalAmountPaidColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message5Column] = value;
                }
            }
            
            public string Message6 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message6Column] = value;
                }
            }
            
            public string Message7 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message7Column] = value;
                }
            }
            
            public string Message8 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message8Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message8Column] = value;
                }
            }
            
            public string Message9 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message9Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message9Column] = value;
                }
            }
            
            public string Message10 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message10Column] = value;
                }
            }
            
            public string Message11 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Message11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Message11Column] = value;
                }
            }
            
            public string Heading1 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Heading1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.Heading2Column] = value;
                }
            }
            
            public string Cardholder {
                get {
                    try {
                        return ((string)(this[this.tableDCNew_Receipt.CardholderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.CardholderColumn] = value;
                }
            }
            
            public System.Decimal LoadFee {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.LoadFeeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.LoadFeeColumn] = value;
                }
            }
            
            public System.Decimal CurrentBalance {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.CurrentBalanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.CurrentBalanceColumn] = value;
                }
            }
            
            public System.Decimal ChangeAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.ChangeAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.ChangeAmountColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal AmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableDCNew_Receipt.AmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDCNew_Receipt.AmountDueColumn] = value;
                }
            }
            
            public bool IsCardProviderNull() {
                return this.IsNull(this.tableDCNew_Receipt.CardProviderColumn);
            }
            
            public void SetCardProviderNull() {
                this[this.tableDCNew_Receipt.CardProviderColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransTypeNull() {
                return this.IsNull(this.tableDCNew_Receipt.TransTypeColumn);
            }
            
            public void SetTransTypeNull() {
                this[this.tableDCNew_Receipt.TransTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsEnrollFeeNull() {
                return this.IsNull(this.tableDCNew_Receipt.EnrollFeeColumn);
            }
            
            public void SetEnrollFeeNull() {
                this[this.tableDCNew_Receipt.EnrollFeeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCardNumberNull() {
                return this.IsNull(this.tableDCNew_Receipt.CardNumberColumn);
            }
            
            public void SetCardNumberNull() {
                this[this.tableDCNew_Receipt.CardNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsLoadValueNull() {
                return this.IsNull(this.tableDCNew_Receipt.LoadValueColumn);
            }
            
            public void SetLoadValueNull() {
                this[this.tableDCNew_Receipt.LoadValueColumn] = System.Convert.DBNull;
            }
            
            public bool IsConfNumberNull() {
                return this.IsNull(this.tableDCNew_Receipt.ConfNumberColumn);
            }
            
            public void SetConfNumberNull() {
                this[this.tableDCNew_Receipt.ConfNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsMerchantNull() {
                return this.IsNull(this.tableDCNew_Receipt.MerchantColumn);
            }
            
            public void SetMerchantNull() {
                this[this.tableDCNew_Receipt.MerchantColumn] = System.Convert.DBNull;
            }
            
            public bool IsSaleDateNull() {
                return this.IsNull(this.tableDCNew_Receipt.SaleDateColumn);
            }
            
            public void SetSaleDateNull() {
                this[this.tableDCNew_Receipt.SaleDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountPaidNull() {
                return this.IsNull(this.tableDCNew_Receipt.TotalAmountPaidColumn);
            }
            
            public void SetTotalAmountPaidNull() {
                this[this.tableDCNew_Receipt.TotalAmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableDCNew_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableDCNew_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableDCNew_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableDCNew_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableDCNew_Receipt.Message5Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage6Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message6Column);
            }
            
            public void SetMessage6Null() {
                this[this.tableDCNew_Receipt.Message6Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage7Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message7Column);
            }
            
            public void SetMessage7Null() {
                this[this.tableDCNew_Receipt.Message7Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage8Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message8Column);
            }
            
            public void SetMessage8Null() {
                this[this.tableDCNew_Receipt.Message8Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage9Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message9Column);
            }
            
            public void SetMessage9Null() {
                this[this.tableDCNew_Receipt.Message9Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage10Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message10Column);
            }
            
            public void SetMessage10Null() {
                this[this.tableDCNew_Receipt.Message10Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage11Null() {
                return this.IsNull(this.tableDCNew_Receipt.Message11Column);
            }
            
            public void SetMessage11Null() {
                this[this.tableDCNew_Receipt.Message11Column] = System.Convert.DBNull;
            }
            
            public bool IsHeading1Null() {
                return this.IsNull(this.tableDCNew_Receipt.Heading1Column);
            }
            
            public void SetHeading1Null() {
                this[this.tableDCNew_Receipt.Heading1Column] = System.Convert.DBNull;
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableDCNew_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableDCNew_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsCardholderNull() {
                return this.IsNull(this.tableDCNew_Receipt.CardholderColumn);
            }
            
            public void SetCardholderNull() {
                this[this.tableDCNew_Receipt.CardholderColumn] = System.Convert.DBNull;
            }
            
            public bool IsLoadFeeNull() {
                return this.IsNull(this.tableDCNew_Receipt.LoadFeeColumn);
            }
            
            public void SetLoadFeeNull() {
                this[this.tableDCNew_Receipt.LoadFeeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentBalanceNull() {
                return this.IsNull(this.tableDCNew_Receipt.CurrentBalanceColumn);
            }
            
            public void SetCurrentBalanceNull() {
                this[this.tableDCNew_Receipt.CurrentBalanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeAmountNull() {
                return this.IsNull(this.tableDCNew_Receipt.ChangeAmountColumn);
            }
            
            public void SetChangeAmountNull() {
                this[this.tableDCNew_Receipt.ChangeAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableDCNew_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableDCNew_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountDueNull() {
                return this.IsNull(this.tableDCNew_Receipt.AmountDueColumn);
            }
            
            public void SetAmountDueNull() {
                this[this.tableDCNew_Receipt.AmountDueColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DCNew_ReceiptRowChangeEvent : EventArgs {
            
            private DCNew_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public DCNew_ReceiptRowChangeEvent(DCNew_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DCNew_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
