//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsStore_DayTotals : DataSet {
        
        private spStores_GetDayTotalsDataTable tablespStores_GetDayTotals;
        
        public dsStore_DayTotals() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsStore_DayTotals(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["spStores_GetDayTotals"] != null)) {
                    this.Tables.Add(new spStores_GetDayTotalsDataTable(ds.Tables["spStores_GetDayTotals"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spStores_GetDayTotalsDataTable spStores_GetDayTotals {
            get {
                return this.tablespStores_GetDayTotals;
            }
        }
        
        public override DataSet Clone() {
            dsStore_DayTotals cln = ((dsStore_DayTotals)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["spStores_GetDayTotals"] != null)) {
                this.Tables.Add(new spStores_GetDayTotalsDataTable(ds.Tables["spStores_GetDayTotals"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tablespStores_GetDayTotals = ((spStores_GetDayTotalsDataTable)(this.Tables["spStores_GetDayTotals"]));
            if ((this.tablespStores_GetDayTotals != null)) {
                this.tablespStores_GetDayTotals.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsStore_DayTotals";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsStore_DayTotals.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tablespStores_GetDayTotals = new spStores_GetDayTotalsDataTable();
            this.Tables.Add(this.tablespStores_GetDayTotals);
        }
        
        private bool ShouldSerializespStores_GetDayTotals() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void spStores_GetDayTotalsRowChangeEventHandler(object sender, spStores_GetDayTotalsRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spStores_GetDayTotalsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnDisplayName;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnTransactionType;
            
            private DataColumn columnCustomerName;
            
            private DataColumn columnTransactionAmount;
            
            internal spStores_GetDayTotalsDataTable() : 
                    base("spStores_GetDayTotals") {
                this.InitClass();
            }
            
            internal spStores_GetDayTotalsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn TransactionTypeColumn {
                get {
                    return this.columnTransactionType;
                }
            }
            
            internal DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            internal DataColumn TransactionAmountColumn {
                get {
                    return this.columnTransactionAmount;
                }
            }
            
            public spStores_GetDayTotalsRow this[int index] {
                get {
                    return ((spStores_GetDayTotalsRow)(this.Rows[index]));
                }
            }
            
            public event spStores_GetDayTotalsRowChangeEventHandler spStores_GetDayTotalsRowChanged;
            
            public event spStores_GetDayTotalsRowChangeEventHandler spStores_GetDayTotalsRowChanging;
            
            public event spStores_GetDayTotalsRowChangeEventHandler spStores_GetDayTotalsRowDeleted;
            
            public event spStores_GetDayTotalsRowChangeEventHandler spStores_GetDayTotalsRowDeleting;
            
            public void AddspStores_GetDayTotalsRow(spStores_GetDayTotalsRow row) {
                this.Rows.Add(row);
            }
            
            public spStores_GetDayTotalsRow AddspStores_GetDayTotalsRow(string StoreCode, string DisplayName, System.DateTime PayDate, string PaymentType, string TransactionType, string CustomerName, System.Decimal TransactionAmount) {
                spStores_GetDayTotalsRow rowspStores_GetDayTotalsRow = ((spStores_GetDayTotalsRow)(this.NewRow()));
                rowspStores_GetDayTotalsRow.ItemArray = new object[] {
                        StoreCode,
                        DisplayName,
                        PayDate,
                        PaymentType,
                        TransactionType,
                        CustomerName,
                        TransactionAmount};
                this.Rows.Add(rowspStores_GetDayTotalsRow);
                return rowspStores_GetDayTotalsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                spStores_GetDayTotalsDataTable cln = ((spStores_GetDayTotalsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new spStores_GetDayTotalsDataTable();
            }
            
            internal void InitVars() {
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnDisplayName = this.Columns["DisplayName"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnTransactionType = this.Columns["TransactionType"];
                this.columnCustomerName = this.Columns["CustomerName"];
                this.columnTransactionAmount = this.Columns["TransactionAmount"];
            }
            
            private void InitClass() {
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnDisplayName = new DataColumn("DisplayName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDisplayName);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnTransactionType = new DataColumn("TransactionType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionType);
                this.columnCustomerName = new DataColumn("CustomerName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomerName);
                this.columnTransactionAmount = new DataColumn("TransactionAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionAmount);
                this.columnStoreCode.ReadOnly = true;
                this.columnPayDate.ReadOnly = true;
                this.columnPaymentType.ReadOnly = true;
                this.columnTransactionType.ReadOnly = true;
                this.columnCustomerName.ReadOnly = true;
                this.columnTransactionAmount.ReadOnly = true;
            }
            
            public spStores_GetDayTotalsRow NewspStores_GetDayTotalsRow() {
                return ((spStores_GetDayTotalsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new spStores_GetDayTotalsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(spStores_GetDayTotalsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.spStores_GetDayTotalsRowChanged != null)) {
                    this.spStores_GetDayTotalsRowChanged(this, new spStores_GetDayTotalsRowChangeEvent(((spStores_GetDayTotalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.spStores_GetDayTotalsRowChanging != null)) {
                    this.spStores_GetDayTotalsRowChanging(this, new spStores_GetDayTotalsRowChangeEvent(((spStores_GetDayTotalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.spStores_GetDayTotalsRowDeleted != null)) {
                    this.spStores_GetDayTotalsRowDeleted(this, new spStores_GetDayTotalsRowChangeEvent(((spStores_GetDayTotalsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.spStores_GetDayTotalsRowDeleting != null)) {
                    this.spStores_GetDayTotalsRowDeleting(this, new spStores_GetDayTotalsRowChangeEvent(((spStores_GetDayTotalsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemovespStores_GetDayTotalsRow(spStores_GetDayTotalsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spStores_GetDayTotalsRow : DataRow {
            
            private spStores_GetDayTotalsDataTable tablespStores_GetDayTotals;
            
            internal spStores_GetDayTotalsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tablespStores_GetDayTotals = ((spStores_GetDayTotalsDataTable)(this.Table));
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tablespStores_GetDayTotals.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.StoreCodeColumn] = value;
                }
            }
            
            public string DisplayName {
                get {
                    try {
                        return ((string)(this[this.tablespStores_GetDayTotals.DisplayNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.DisplayNameColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tablespStores_GetDayTotals.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tablespStores_GetDayTotals.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.PaymentTypeColumn] = value;
                }
            }
            
            public string TransactionType {
                get {
                    try {
                        return ((string)(this[this.tablespStores_GetDayTotals.TransactionTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.TransactionTypeColumn] = value;
                }
            }
            
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tablespStores_GetDayTotals.CustomerNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.CustomerNameColumn] = value;
                }
            }
            
            public System.Decimal TransactionAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tablespStores_GetDayTotals.TransactionAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tablespStores_GetDayTotals.TransactionAmountColumn] = value;
                }
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tablespStores_GetDayTotals.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.DisplayNameColumn);
            }
            
            public void SetDisplayNameNull() {
                this[this.tablespStores_GetDayTotals.DisplayNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tablespStores_GetDayTotals.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tablespStores_GetDayTotals.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionTypeNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.TransactionTypeColumn);
            }
            
            public void SetTransactionTypeNull() {
                this[this.tablespStores_GetDayTotals.TransactionTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.CustomerNameColumn);
            }
            
            public void SetCustomerNameNull() {
                this[this.tablespStores_GetDayTotals.CustomerNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsTransactionAmountNull() {
                return this.IsNull(this.tablespStores_GetDayTotals.TransactionAmountColumn);
            }
            
            public void SetTransactionAmountNull() {
                this[this.tablespStores_GetDayTotals.TransactionAmountColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class spStores_GetDayTotalsRowChangeEvent : EventArgs {
            
            private spStores_GetDayTotalsRow eventRow;
            
            private DataRowAction eventAction;
            
            public spStores_GetDayTotalsRowChangeEvent(spStores_GetDayTotalsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public spStores_GetDayTotalsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
