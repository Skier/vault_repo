//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsNO_Receipt : DataSet {
        
        private NO_ReceiptDataTable tableNO_Receipt;
        
        public dsNO_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsNO_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["NO_Receipt"] != null)) {
                    this.Tables.Add(new NO_ReceiptDataTable(ds.Tables["NO_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NO_ReceiptDataTable NO_Receipt {
            get {
                return this.tableNO_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsNO_Receipt cln = ((dsNO_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["NO_Receipt"] != null)) {
                this.Tables.Add(new NO_ReceiptDataTable(ds.Tables["NO_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableNO_Receipt = ((NO_ReceiptDataTable)(this.Tables["NO_Receipt"]));
            if ((this.tableNO_Receipt != null)) {
                this.tableNO_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsNO_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsNO_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableNO_Receipt = new NO_ReceiptDataTable();
            this.Tables.Add(this.tableNO_Receipt);
        }
        
        private bool ShouldSerializeNO_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void NO_ReceiptRowChangeEventHandler(object sender, NO_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NO_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnAccNumber;
            
            private DataColumn columnCustomer_Name;
            
            private DataColumn columnConfirmation_Number;
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnProductID;
            
            private DataColumn columnParent_ProductID;
            
            private DataColumn columnProduct_Name;
            
            private DataColumn columnProduct_UnitPrice;
            
            private DataColumn columnSubTotal;
            
            private DataColumn columnTax;
            
            private DataColumn columnLocalAmountDue;
            
            private DataColumn columnLocalAmountPaid;
            
            private DataColumn columnLdAmount;
            
            private DataColumn columnTotalAmountDue;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnChangeDue;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            private DataColumn columnPin;
            
            private DataColumn columnInternetPinText;
            
            internal NO_ReceiptDataTable() : 
                    base("NO_Receipt") {
                this.InitClass();
            }
            
            internal NO_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn AccNumberColumn {
                get {
                    return this.columnAccNumber;
                }
            }
            
            internal DataColumn Customer_NameColumn {
                get {
                    return this.columnCustomer_Name;
                }
            }
            
            internal DataColumn Confirmation_NumberColumn {
                get {
                    return this.columnConfirmation_Number;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal DataColumn Parent_ProductIDColumn {
                get {
                    return this.columnParent_ProductID;
                }
            }
            
            internal DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            internal DataColumn Product_UnitPriceColumn {
                get {
                    return this.columnProduct_UnitPrice;
                }
            }
            
            internal DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            internal DataColumn TaxColumn {
                get {
                    return this.columnTax;
                }
            }
            
            internal DataColumn LocalAmountDueColumn {
                get {
                    return this.columnLocalAmountDue;
                }
            }
            
            internal DataColumn LocalAmountPaidColumn {
                get {
                    return this.columnLocalAmountPaid;
                }
            }
            
            internal DataColumn LdAmountColumn {
                get {
                    return this.columnLdAmount;
                }
            }
            
            internal DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn ChangeDueColumn {
                get {
                    return this.columnChangeDue;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            internal DataColumn PinColumn {
                get {
                    return this.columnPin;
                }
            }
            
            internal DataColumn InternetPinTextColumn {
                get {
                    return this.columnInternetPinText;
                }
            }
            
            public NO_ReceiptRow this[int index] {
                get {
                    return ((NO_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event NO_ReceiptRowChangeEventHandler NO_ReceiptRowChanged;
            
            public event NO_ReceiptRowChangeEventHandler NO_ReceiptRowChanging;
            
            public event NO_ReceiptRowChangeEventHandler NO_ReceiptRowDeleted;
            
            public event NO_ReceiptRowChangeEventHandler NO_ReceiptRowDeleting;
            
            public void AddNO_ReceiptRow(NO_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public NO_ReceiptRow AddNO_ReceiptRow(
                        string Heading1, 
                        string Heading2, 
                        int AccNumber, 
                        string Customer_Name, 
                        string Confirmation_Number, 
                        string StoreCode, 
                        System.DateTime PayDate, 
                        string PaymentType, 
                        int ProductID, 
                        int Parent_ProductID, 
                        string Product_Name, 
                        System.Decimal Product_UnitPrice, 
                        System.Decimal SubTotal, 
                        System.Decimal Tax, 
                        System.Decimal LocalAmountDue, 
                        System.Decimal LocalAmountPaid, 
                        System.Decimal LdAmount, 
                        System.Decimal TotalAmountDue, 
                        System.Decimal AmountTendered, 
                        System.Decimal ChangeDue, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5, 
                        string Pin, 
                        string InternetPinText) {
                NO_ReceiptRow rowNO_ReceiptRow = ((NO_ReceiptRow)(this.NewRow()));
                rowNO_ReceiptRow.ItemArray = new object[] {
                        Heading1,
                        Heading2,
                        AccNumber,
                        Customer_Name,
                        Confirmation_Number,
                        StoreCode,
                        PayDate,
                        PaymentType,
                        ProductID,
                        Parent_ProductID,
                        Product_Name,
                        Product_UnitPrice,
                        SubTotal,
                        Tax,
                        LocalAmountDue,
                        LocalAmountPaid,
                        LdAmount,
                        TotalAmountDue,
                        AmountTendered,
                        ChangeDue,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5,
                        Pin,
                        InternetPinText};
                this.Rows.Add(rowNO_ReceiptRow);
                return rowNO_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                NO_ReceiptDataTable cln = ((NO_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new NO_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnAccNumber = this.Columns["AccNumber"];
                this.columnCustomer_Name = this.Columns["Customer_Name"];
                this.columnConfirmation_Number = this.Columns["Confirmation_Number"];
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnProductID = this.Columns["ProductID"];
                this.columnParent_ProductID = this.Columns["Parent_ProductID"];
                this.columnProduct_Name = this.Columns["Product_Name"];
                this.columnProduct_UnitPrice = this.Columns["Product_UnitPrice"];
                this.columnSubTotal = this.Columns["SubTotal"];
                this.columnTax = this.Columns["Tax"];
                this.columnLocalAmountDue = this.Columns["LocalAmountDue"];
                this.columnLocalAmountPaid = this.Columns["LocalAmountPaid"];
                this.columnLdAmount = this.Columns["LdAmount"];
                this.columnTotalAmountDue = this.Columns["TotalAmountDue"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnChangeDue = this.Columns["ChangeDue"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
                this.columnPin = this.Columns["Pin"];
                this.columnInternetPinText = this.Columns["InternetPinText"];
            }
            
            private void InitClass() {
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnAccNumber = new DataColumn("AccNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccNumber);
                this.columnCustomer_Name = new DataColumn("Customer_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Name);
                this.columnConfirmation_Number = new DataColumn("Confirmation_Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmation_Number);
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnProductID = new DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductID);
                this.columnParent_ProductID = new DataColumn("Parent_ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParent_ProductID);
                this.columnProduct_Name = new DataColumn("Product_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_Name);
                this.columnProduct_UnitPrice = new DataColumn("Product_UnitPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_UnitPrice);
                this.columnSubTotal = new DataColumn("SubTotal", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubTotal);
                this.columnTax = new DataColumn("Tax", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTax);
                this.columnLocalAmountDue = new DataColumn("LocalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountDue);
                this.columnLocalAmountPaid = new DataColumn("LocalAmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountPaid);
                this.columnLdAmount = new DataColumn("LdAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLdAmount);
                this.columnTotalAmountDue = new DataColumn("TotalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountDue);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnChangeDue = new DataColumn("ChangeDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeDue);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnPin = new DataColumn("Pin", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPin);
                this.columnInternetPinText = new DataColumn("InternetPinText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInternetPinText);
                this.columnHeading1.AllowDBNull = false;
                this.columnAccNumber.AllowDBNull = false;
                this.columnProductID.AllowDBNull = false;
            }
            
            public NO_ReceiptRow NewNO_ReceiptRow() {
                return ((NO_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new NO_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(NO_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NO_ReceiptRowChanged != null)) {
                    this.NO_ReceiptRowChanged(this, new NO_ReceiptRowChangeEvent(((NO_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NO_ReceiptRowChanging != null)) {
                    this.NO_ReceiptRowChanging(this, new NO_ReceiptRowChangeEvent(((NO_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NO_ReceiptRowDeleted != null)) {
                    this.NO_ReceiptRowDeleted(this, new NO_ReceiptRowChangeEvent(((NO_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NO_ReceiptRowDeleting != null)) {
                    this.NO_ReceiptRowDeleting(this, new NO_ReceiptRowChangeEvent(((NO_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveNO_ReceiptRow(NO_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NO_ReceiptRow : DataRow {
            
            private NO_ReceiptDataTable tableNO_Receipt;
            
            internal NO_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableNO_Receipt = ((NO_ReceiptDataTable)(this.Table));
            }
            
            public string Heading1 {
                get {
                    return ((string)(this[this.tableNO_Receipt.Heading1Column]));
                }
                set {
                    this[this.tableNO_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Heading2Column] = value;
                }
            }
            
            public int AccNumber {
                get {
                    return ((int)(this[this.tableNO_Receipt.AccNumberColumn]));
                }
                set {
                    this[this.tableNO_Receipt.AccNumberColumn] = value;
                }
            }
            
            public string Customer_Name {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Customer_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Customer_NameColumn] = value;
                }
            }
            
            public string Confirmation_Number {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Confirmation_NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Confirmation_NumberColumn] = value;
                }
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.StoreCodeColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableNO_Receipt.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.PaymentTypeColumn] = value;
                }
            }
            
            public int ProductID {
                get {
                    return ((int)(this[this.tableNO_Receipt.ProductIDColumn]));
                }
                set {
                    this[this.tableNO_Receipt.ProductIDColumn] = value;
                }
            }
            
            public int Parent_ProductID {
                get {
                    try {
                        return ((int)(this[this.tableNO_Receipt.Parent_ProductIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Parent_ProductIDColumn] = value;
                }
            }
            
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Product_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Product_NameColumn] = value;
                }
            }
            
            public System.Decimal Product_UnitPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.Product_UnitPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Product_UnitPriceColumn] = value;
                }
            }
            
            public System.Decimal SubTotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.SubTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.SubTotalColumn] = value;
                }
            }
            
            public System.Decimal Tax {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.TaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.TaxColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.LocalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.LocalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.LocalAmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.LocalAmountPaidColumn] = value;
                }
            }
            
            public System.Decimal LdAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.LdAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.LdAmountColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.TotalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.TotalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal ChangeDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableNO_Receipt.ChangeDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.ChangeDueColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.Message5Column] = value;
                }
            }
            
            public string Pin {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.PinColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.PinColumn] = value;
                }
            }
            
            public string InternetPinText {
                get {
                    try {
                        return ((string)(this[this.tableNO_Receipt.InternetPinTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNO_Receipt.InternetPinTextColumn] = value;
                }
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableNO_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableNO_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsCustomer_NameNull() {
                return this.IsNull(this.tableNO_Receipt.Customer_NameColumn);
            }
            
            public void SetCustomer_NameNull() {
                this[this.tableNO_Receipt.Customer_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsConfirmation_NumberNull() {
                return this.IsNull(this.tableNO_Receipt.Confirmation_NumberColumn);
            }
            
            public void SetConfirmation_NumberNull() {
                this[this.tableNO_Receipt.Confirmation_NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tableNO_Receipt.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tableNO_Receipt.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tableNO_Receipt.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tableNO_Receipt.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableNO_Receipt.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableNO_Receipt.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsParent_ProductIDNull() {
                return this.IsNull(this.tableNO_Receipt.Parent_ProductIDColumn);
            }
            
            public void SetParent_ProductIDNull() {
                this[this.tableNO_Receipt.Parent_ProductIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableNO_Receipt.Product_NameColumn);
            }
            
            public void SetProduct_NameNull() {
                this[this.tableNO_Receipt.Product_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_UnitPriceNull() {
                return this.IsNull(this.tableNO_Receipt.Product_UnitPriceColumn);
            }
            
            public void SetProduct_UnitPriceNull() {
                this[this.tableNO_Receipt.Product_UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableNO_Receipt.SubTotalColumn);
            }
            
            public void SetSubTotalNull() {
                this[this.tableNO_Receipt.SubTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaxNull() {
                return this.IsNull(this.tableNO_Receipt.TaxColumn);
            }
            
            public void SetTaxNull() {
                this[this.tableNO_Receipt.TaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountDueNull() {
                return this.IsNull(this.tableNO_Receipt.LocalAmountDueColumn);
            }
            
            public void SetLocalAmountDueNull() {
                this[this.tableNO_Receipt.LocalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountPaidNull() {
                return this.IsNull(this.tableNO_Receipt.LocalAmountPaidColumn);
            }
            
            public void SetLocalAmountPaidNull() {
                this[this.tableNO_Receipt.LocalAmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsLdAmountNull() {
                return this.IsNull(this.tableNO_Receipt.LdAmountColumn);
            }
            
            public void SetLdAmountNull() {
                this[this.tableNO_Receipt.LdAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableNO_Receipt.TotalAmountDueColumn);
            }
            
            public void SetTotalAmountDueNull() {
                this[this.tableNO_Receipt.TotalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableNO_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableNO_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeDueNull() {
                return this.IsNull(this.tableNO_Receipt.ChangeDueColumn);
            }
            
            public void SetChangeDueNull() {
                this[this.tableNO_Receipt.ChangeDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableNO_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableNO_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableNO_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableNO_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableNO_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableNO_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableNO_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableNO_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableNO_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableNO_Receipt.Message5Column] = System.Convert.DBNull;
            }
            
            public bool IsPinNull() {
                return this.IsNull(this.tableNO_Receipt.PinColumn);
            }
            
            public void SetPinNull() {
                this[this.tableNO_Receipt.PinColumn] = System.Convert.DBNull;
            }
            
            public bool IsInternetPinTextNull() {
                return this.IsNull(this.tableNO_Receipt.InternetPinTextColumn);
            }
            
            public void SetInternetPinTextNull() {
                this[this.tableNO_Receipt.InternetPinTextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class NO_ReceiptRowChangeEvent : EventArgs {
            
            private NO_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public NO_ReceiptRowChangeEvent(NO_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public NO_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
