//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsSalesRptByState : DataSet {
        
        private SalesRptByStateDataTable tableSalesRptByState;
        
        public dsSalesRptByState() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsSalesRptByState(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SalesRptByState"] != null)) {
                    this.Tables.Add(new SalesRptByStateDataTable(ds.Tables["SalesRptByState"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesRptByStateDataTable SalesRptByState {
            get {
                return this.tableSalesRptByState;
            }
        }
        
        public override DataSet Clone() {
            dsSalesRptByState cln = ((dsSalesRptByState)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SalesRptByState"] != null)) {
                this.Tables.Add(new SalesRptByStateDataTable(ds.Tables["SalesRptByState"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSalesRptByState = ((SalesRptByStateDataTable)(this.Tables["SalesRptByState"]));
            if ((this.tableSalesRptByState != null)) {
                this.tableSalesRptByState.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsSalesRptByState";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsSalesRptByState.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableSalesRptByState = new SalesRptByStateDataTable();
            this.Tables.Add(this.tableSalesRptByState);
        }
        
        private bool ShouldSerializeSalesRptByState() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SalesRptByStateRowChangeEventHandler(object sender, SalesRptByStateRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesRptByStateDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnStateName;
            
            private DataColumn columnDMADesc;
            
            private DataColumn columnSales_Count;
            
            private DataColumn columnAverage_Collected;
            
            private DataColumn columnAmount_Collected;
            
            private DataColumn columnAgent_Locations;
            
            private DataColumn columnSales_Per_Store;
            
            private DataColumn columnReportPeriod;
            
            private DataColumn columnTransactionType;
            
            internal SalesRptByStateDataTable() : 
                    base("SalesRptByState") {
                this.InitClass();
            }
            
            internal SalesRptByStateDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            internal DataColumn DMADescColumn {
                get {
                    return this.columnDMADesc;
                }
            }
            
            internal DataColumn Sales_CountColumn {
                get {
                    return this.columnSales_Count;
                }
            }
            
            internal DataColumn Average_CollectedColumn {
                get {
                    return this.columnAverage_Collected;
                }
            }
            
            internal DataColumn Amount_CollectedColumn {
                get {
                    return this.columnAmount_Collected;
                }
            }
            
            internal DataColumn Agent_LocationsColumn {
                get {
                    return this.columnAgent_Locations;
                }
            }
            
            internal DataColumn Sales_Per_StoreColumn {
                get {
                    return this.columnSales_Per_Store;
                }
            }
            
            internal DataColumn ReportPeriodColumn {
                get {
                    return this.columnReportPeriod;
                }
            }
            
            internal DataColumn TransactionTypeColumn {
                get {
                    return this.columnTransactionType;
                }
            }
            
            public SalesRptByStateRow this[int index] {
                get {
                    return ((SalesRptByStateRow)(this.Rows[index]));
                }
            }
            
            public event SalesRptByStateRowChangeEventHandler SalesRptByStateRowChanged;
            
            public event SalesRptByStateRowChangeEventHandler SalesRptByStateRowChanging;
            
            public event SalesRptByStateRowChangeEventHandler SalesRptByStateRowDeleted;
            
            public event SalesRptByStateRowChangeEventHandler SalesRptByStateRowDeleting;
            
            public void AddSalesRptByStateRow(SalesRptByStateRow row) {
                this.Rows.Add(row);
            }
            
            public SalesRptByStateRow AddSalesRptByStateRow(string StateName, string DMADesc, int Sales_Count, System.Decimal Average_Collected, System.Decimal Amount_Collected, int Agent_Locations, System.Decimal Sales_Per_Store, string ReportPeriod, string TransactionType) {
                SalesRptByStateRow rowSalesRptByStateRow = ((SalesRptByStateRow)(this.NewRow()));
                rowSalesRptByStateRow.ItemArray = new object[] {
                        StateName,
                        DMADesc,
                        Sales_Count,
                        Average_Collected,
                        Amount_Collected,
                        Agent_Locations,
                        Sales_Per_Store,
                        ReportPeriod,
                        TransactionType};
                this.Rows.Add(rowSalesRptByStateRow);
                return rowSalesRptByStateRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SalesRptByStateDataTable cln = ((SalesRptByStateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SalesRptByStateDataTable();
            }
            
            internal void InitVars() {
                this.columnStateName = this.Columns["StateName"];
                this.columnDMADesc = this.Columns["DMADesc"];
                this.columnSales_Count = this.Columns["Sales_Count"];
                this.columnAverage_Collected = this.Columns["Average_Collected"];
                this.columnAmount_Collected = this.Columns["Amount_Collected"];
                this.columnAgent_Locations = this.Columns["Agent_Locations"];
                this.columnSales_Per_Store = this.Columns["Sales_Per_Store"];
                this.columnReportPeriod = this.Columns["ReportPeriod"];
                this.columnTransactionType = this.Columns["TransactionType"];
            }
            
            private void InitClass() {
                this.columnStateName = new DataColumn("StateName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStateName);
                this.columnDMADesc = new DataColumn("DMADesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDMADesc);
                this.columnSales_Count = new DataColumn("Sales_Count", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSales_Count);
                this.columnAverage_Collected = new DataColumn("Average_Collected", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAverage_Collected);
                this.columnAmount_Collected = new DataColumn("Amount_Collected", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmount_Collected);
                this.columnAgent_Locations = new DataColumn("Agent_Locations", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAgent_Locations);
                this.columnSales_Per_Store = new DataColumn("Sales_Per_Store", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSales_Per_Store);
                this.columnReportPeriod = new DataColumn("ReportPeriod", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReportPeriod);
                this.columnTransactionType = new DataColumn("TransactionType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTransactionType);
                this.columnStateName.AllowDBNull = false;
                this.columnDMADesc.AllowDBNull = false;
                this.columnSales_Count.AllowDBNull = false;
                this.columnAverage_Collected.AllowDBNull = false;
                this.columnAmount_Collected.AllowDBNull = false;
                this.columnAgent_Locations.AllowDBNull = false;
                this.columnSales_Per_Store.AllowDBNull = false;
                this.columnReportPeriod.AllowDBNull = false;
                this.columnTransactionType.AllowDBNull = false;
            }
            
            public SalesRptByStateRow NewSalesRptByStateRow() {
                return ((SalesRptByStateRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SalesRptByStateRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SalesRptByStateRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesRptByStateRowChanged != null)) {
                    this.SalesRptByStateRowChanged(this, new SalesRptByStateRowChangeEvent(((SalesRptByStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesRptByStateRowChanging != null)) {
                    this.SalesRptByStateRowChanging(this, new SalesRptByStateRowChangeEvent(((SalesRptByStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesRptByStateRowDeleted != null)) {
                    this.SalesRptByStateRowDeleted(this, new SalesRptByStateRowChangeEvent(((SalesRptByStateRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesRptByStateRowDeleting != null)) {
                    this.SalesRptByStateRowDeleting(this, new SalesRptByStateRowChangeEvent(((SalesRptByStateRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSalesRptByStateRow(SalesRptByStateRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesRptByStateRow : DataRow {
            
            private SalesRptByStateDataTable tableSalesRptByState;
            
            internal SalesRptByStateRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesRptByState = ((SalesRptByStateDataTable)(this.Table));
            }
            
            public string StateName {
                get {
                    return ((string)(this[this.tableSalesRptByState.StateNameColumn]));
                }
                set {
                    this[this.tableSalesRptByState.StateNameColumn] = value;
                }
            }
            
            public string DMADesc {
                get {
                    return ((string)(this[this.tableSalesRptByState.DMADescColumn]));
                }
                set {
                    this[this.tableSalesRptByState.DMADescColumn] = value;
                }
            }
            
            public int Sales_Count {
                get {
                    return ((int)(this[this.tableSalesRptByState.Sales_CountColumn]));
                }
                set {
                    this[this.tableSalesRptByState.Sales_CountColumn] = value;
                }
            }
            
            public System.Decimal Average_Collected {
                get {
                    return ((System.Decimal)(this[this.tableSalesRptByState.Average_CollectedColumn]));
                }
                set {
                    this[this.tableSalesRptByState.Average_CollectedColumn] = value;
                }
            }
            
            public System.Decimal Amount_Collected {
                get {
                    return ((System.Decimal)(this[this.tableSalesRptByState.Amount_CollectedColumn]));
                }
                set {
                    this[this.tableSalesRptByState.Amount_CollectedColumn] = value;
                }
            }
            
            public int Agent_Locations {
                get {
                    return ((int)(this[this.tableSalesRptByState.Agent_LocationsColumn]));
                }
                set {
                    this[this.tableSalesRptByState.Agent_LocationsColumn] = value;
                }
            }
            
            public System.Decimal Sales_Per_Store {
                get {
                    return ((System.Decimal)(this[this.tableSalesRptByState.Sales_Per_StoreColumn]));
                }
                set {
                    this[this.tableSalesRptByState.Sales_Per_StoreColumn] = value;
                }
            }
            
            public string ReportPeriod {
                get {
                    return ((string)(this[this.tableSalesRptByState.ReportPeriodColumn]));
                }
                set {
                    this[this.tableSalesRptByState.ReportPeriodColumn] = value;
                }
            }
            
            public string TransactionType {
                get {
                    return ((string)(this[this.tableSalesRptByState.TransactionTypeColumn]));
                }
                set {
                    this[this.tableSalesRptByState.TransactionTypeColumn] = value;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SalesRptByStateRowChangeEvent : EventArgs {
            
            private SalesRptByStateRow eventRow;
            
            private DataRowAction eventAction;
            
            public SalesRptByStateRowChangeEvent(SalesRptByStateRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SalesRptByStateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
