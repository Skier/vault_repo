//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsInfinity_Receipt : DataSet {
        
        private Infinity_ReceiptDataTable tableInfinity_Receipt;
        
        public dsInfinity_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsInfinity_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Infinity_Receipt"] != null)) {
                    this.Tables.Add(new Infinity_ReceiptDataTable(ds.Tables["Infinity_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Infinity_ReceiptDataTable Infinity_Receipt {
            get {
                return this.tableInfinity_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsInfinity_Receipt cln = ((dsInfinity_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Infinity_Receipt"] != null)) {
                this.Tables.Add(new Infinity_ReceiptDataTable(ds.Tables["Infinity_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableInfinity_Receipt = ((Infinity_ReceiptDataTable)(this.Tables["Infinity_Receipt"]));
            if ((this.tableInfinity_Receipt != null)) {
                this.tableInfinity_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsInfinity_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsInfinity_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableInfinity_Receipt = new Infinity_ReceiptDataTable();
            this.Tables.Add(this.tableInfinity_Receipt);
        }
        
        private bool ShouldSerializeInfinity_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void Infinity_ReceiptRowChangeEventHandler(object sender, Infinity_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Infinity_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnConfirmation_Number;
            
            private DataColumn columnPin;
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnProduct_ID;
            
            private DataColumn columnProduct_Name;
            
            private DataColumn columnProduct_Price;
            
            private DataColumn columnReceipt_Text1;
            
            private DataColumn columnSubTotal;
            
            private DataColumn columnTotalAmountDue;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnChangeDue;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            private DataColumn columnPhoneNumber;
            
            private DataColumn columnMinutes;
            
            private DataColumn columnControlNumber;
            
            private DataColumn columnMSL;
            
            private DataColumn columnMSID;
            
            private DataColumn columnMDN;
            
            private DataColumn columnReceipt_Text2;
            
            internal Infinity_ReceiptDataTable() : 
                    base("Infinity_Receipt") {
                this.InitClass();
            }
            
            internal Infinity_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn Confirmation_NumberColumn {
                get {
                    return this.columnConfirmation_Number;
                }
            }
            
            internal DataColumn PinColumn {
                get {
                    return this.columnPin;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn Product_IDColumn {
                get {
                    return this.columnProduct_ID;
                }
            }
            
            internal DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            internal DataColumn Product_PriceColumn {
                get {
                    return this.columnProduct_Price;
                }
            }
            
            internal DataColumn Receipt_Text1Column {
                get {
                    return this.columnReceipt_Text1;
                }
            }
            
            internal DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            internal DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn ChangeDueColumn {
                get {
                    return this.columnChangeDue;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            internal DataColumn PhoneNumberColumn {
                get {
                    return this.columnPhoneNumber;
                }
            }
            
            internal DataColumn MinutesColumn {
                get {
                    return this.columnMinutes;
                }
            }
            
            internal DataColumn ControlNumberColumn {
                get {
                    return this.columnControlNumber;
                }
            }
            
            internal DataColumn MSLColumn {
                get {
                    return this.columnMSL;
                }
            }
            
            internal DataColumn MSIDColumn {
                get {
                    return this.columnMSID;
                }
            }
            
            internal DataColumn MDNColumn {
                get {
                    return this.columnMDN;
                }
            }
            
            internal DataColumn Receipt_Text2Column {
                get {
                    return this.columnReceipt_Text2;
                }
            }
            
            public Infinity_ReceiptRow this[int index] {
                get {
                    return ((Infinity_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event Infinity_ReceiptRowChangeEventHandler Infinity_ReceiptRowChanged;
            
            public event Infinity_ReceiptRowChangeEventHandler Infinity_ReceiptRowChanging;
            
            public event Infinity_ReceiptRowChangeEventHandler Infinity_ReceiptRowDeleted;
            
            public event Infinity_ReceiptRowChangeEventHandler Infinity_ReceiptRowDeleting;
            
            public void AddInfinity_ReceiptRow(Infinity_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public Infinity_ReceiptRow AddInfinity_ReceiptRow(
                        string Heading1, 
                        string Heading2, 
                        string Confirmation_Number, 
                        string Pin, 
                        string StoreCode, 
                        System.DateTime PayDate, 
                        string PaymentType, 
                        int Product_ID, 
                        string Product_Name, 
                        System.Decimal Product_Price, 
                        string Receipt_Text1, 
                        System.Decimal SubTotal, 
                        System.Decimal TotalAmountDue, 
                        System.Decimal AmountTendered, 
                        System.Decimal ChangeDue, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5, 
                        string PhoneNumber, 
                        int Minutes, 
                        string ControlNumber, 
                        string MSL, 
                        string MSID, 
                        string MDN, 
                        string Receipt_Text2) {
                Infinity_ReceiptRow rowInfinity_ReceiptRow = ((Infinity_ReceiptRow)(this.NewRow()));
                rowInfinity_ReceiptRow.ItemArray = new object[] {
                        Heading1,
                        Heading2,
                        Confirmation_Number,
                        Pin,
                        StoreCode,
                        PayDate,
                        PaymentType,
                        Product_ID,
                        Product_Name,
                        Product_Price,
                        Receipt_Text1,
                        SubTotal,
                        TotalAmountDue,
                        AmountTendered,
                        ChangeDue,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5,
                        PhoneNumber,
                        Minutes,
                        ControlNumber,
                        MSL,
                        MSID,
                        MDN,
                        Receipt_Text2};
                this.Rows.Add(rowInfinity_ReceiptRow);
                return rowInfinity_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                Infinity_ReceiptDataTable cln = ((Infinity_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new Infinity_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnConfirmation_Number = this.Columns["Confirmation_Number"];
                this.columnPin = this.Columns["Pin"];
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnProduct_ID = this.Columns["Product_ID"];
                this.columnProduct_Name = this.Columns["Product_Name"];
                this.columnProduct_Price = this.Columns["Product_Price"];
                this.columnReceipt_Text1 = this.Columns["Receipt_Text1"];
                this.columnSubTotal = this.Columns["SubTotal"];
                this.columnTotalAmountDue = this.Columns["TotalAmountDue"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnChangeDue = this.Columns["ChangeDue"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
                this.columnPhoneNumber = this.Columns["PhoneNumber"];
                this.columnMinutes = this.Columns["Minutes"];
                this.columnControlNumber = this.Columns["ControlNumber"];
                this.columnMSL = this.Columns["MSL"];
                this.columnMSID = this.Columns["MSID"];
                this.columnMDN = this.Columns["MDN"];
                this.columnReceipt_Text2 = this.Columns["Receipt_Text2"];
            }
            
            private void InitClass() {
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnConfirmation_Number = new DataColumn("Confirmation_Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmation_Number);
                this.columnPin = new DataColumn("Pin", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPin);
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnProduct_ID = new DataColumn("Product_ID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_ID);
                this.columnProduct_Name = new DataColumn("Product_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_Name);
                this.columnProduct_Price = new DataColumn("Product_Price", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_Price);
                this.columnReceipt_Text1 = new DataColumn("Receipt_Text1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceipt_Text1);
                this.columnSubTotal = new DataColumn("SubTotal", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubTotal);
                this.columnTotalAmountDue = new DataColumn("TotalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountDue);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnChangeDue = new DataColumn("ChangeDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeDue);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnPhoneNumber = new DataColumn("PhoneNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhoneNumber);
                this.columnMinutes = new DataColumn("Minutes", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMinutes);
                this.columnControlNumber = new DataColumn("ControlNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnControlNumber);
                this.columnMSL = new DataColumn("MSL", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMSL);
                this.columnMSID = new DataColumn("MSID", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMSID);
                this.columnMDN = new DataColumn("MDN", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMDN);
                this.columnReceipt_Text2 = new DataColumn("Receipt_Text2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnReceipt_Text2);
            }
            
            public Infinity_ReceiptRow NewInfinity_ReceiptRow() {
                return ((Infinity_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new Infinity_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(Infinity_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Infinity_ReceiptRowChanged != null)) {
                    this.Infinity_ReceiptRowChanged(this, new Infinity_ReceiptRowChangeEvent(((Infinity_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Infinity_ReceiptRowChanging != null)) {
                    this.Infinity_ReceiptRowChanging(this, new Infinity_ReceiptRowChangeEvent(((Infinity_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Infinity_ReceiptRowDeleted != null)) {
                    this.Infinity_ReceiptRowDeleted(this, new Infinity_ReceiptRowChangeEvent(((Infinity_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Infinity_ReceiptRowDeleting != null)) {
                    this.Infinity_ReceiptRowDeleting(this, new Infinity_ReceiptRowChangeEvent(((Infinity_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveInfinity_ReceiptRow(Infinity_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Infinity_ReceiptRow : DataRow {
            
            private Infinity_ReceiptDataTable tableInfinity_Receipt;
            
            internal Infinity_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableInfinity_Receipt = ((Infinity_ReceiptDataTable)(this.Table));
            }
            
            public string Heading1 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Heading1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Heading2Column] = value;
                }
            }
            
            public string Confirmation_Number {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Confirmation_NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Confirmation_NumberColumn] = value;
                }
            }
            
            public string Pin {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.PinColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.PinColumn] = value;
                }
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.StoreCodeColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableInfinity_Receipt.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.PaymentTypeColumn] = value;
                }
            }
            
            public int Product_ID {
                get {
                    try {
                        return ((int)(this[this.tableInfinity_Receipt.Product_IDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Product_IDColumn] = value;
                }
            }
            
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Product_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Product_NameColumn] = value;
                }
            }
            
            public System.Decimal Product_Price {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInfinity_Receipt.Product_PriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Product_PriceColumn] = value;
                }
            }
            
            public string Receipt_Text1 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Receipt_Text1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Receipt_Text1Column] = value;
                }
            }
            
            public System.Decimal SubTotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInfinity_Receipt.SubTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.SubTotalColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInfinity_Receipt.TotalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.TotalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInfinity_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal ChangeDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableInfinity_Receipt.ChangeDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.ChangeDueColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Message5Column] = value;
                }
            }
            
            public string PhoneNumber {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.PhoneNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.PhoneNumberColumn] = value;
                }
            }
            
            public int Minutes {
                get {
                    try {
                        return ((int)(this[this.tableInfinity_Receipt.MinutesColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.MinutesColumn] = value;
                }
            }
            
            public string ControlNumber {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.ControlNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.ControlNumberColumn] = value;
                }
            }
            
            public string MSL {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.MSLColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.MSLColumn] = value;
                }
            }
            
            public string MSID {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.MSIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.MSIDColumn] = value;
                }
            }
            
            public string MDN {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.MDNColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.MDNColumn] = value;
                }
            }
            
            public string Receipt_Text2 {
                get {
                    try {
                        return ((string)(this[this.tableInfinity_Receipt.Receipt_Text2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableInfinity_Receipt.Receipt_Text2Column] = value;
                }
            }
            
            public bool IsHeading1Null() {
                return this.IsNull(this.tableInfinity_Receipt.Heading1Column);
            }
            
            public void SetHeading1Null() {
                this[this.tableInfinity_Receipt.Heading1Column] = System.Convert.DBNull;
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableInfinity_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableInfinity_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsConfirmation_NumberNull() {
                return this.IsNull(this.tableInfinity_Receipt.Confirmation_NumberColumn);
            }
            
            public void SetConfirmation_NumberNull() {
                this[this.tableInfinity_Receipt.Confirmation_NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsPinNull() {
                return this.IsNull(this.tableInfinity_Receipt.PinColumn);
            }
            
            public void SetPinNull() {
                this[this.tableInfinity_Receipt.PinColumn] = System.Convert.DBNull;
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tableInfinity_Receipt.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tableInfinity_Receipt.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tableInfinity_Receipt.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tableInfinity_Receipt.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableInfinity_Receipt.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableInfinity_Receipt.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_IDNull() {
                return this.IsNull(this.tableInfinity_Receipt.Product_IDColumn);
            }
            
            public void SetProduct_IDNull() {
                this[this.tableInfinity_Receipt.Product_IDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableInfinity_Receipt.Product_NameColumn);
            }
            
            public void SetProduct_NameNull() {
                this[this.tableInfinity_Receipt.Product_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_PriceNull() {
                return this.IsNull(this.tableInfinity_Receipt.Product_PriceColumn);
            }
            
            public void SetProduct_PriceNull() {
                this[this.tableInfinity_Receipt.Product_PriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsReceipt_Text1Null() {
                return this.IsNull(this.tableInfinity_Receipt.Receipt_Text1Column);
            }
            
            public void SetReceipt_Text1Null() {
                this[this.tableInfinity_Receipt.Receipt_Text1Column] = System.Convert.DBNull;
            }
            
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableInfinity_Receipt.SubTotalColumn);
            }
            
            public void SetSubTotalNull() {
                this[this.tableInfinity_Receipt.SubTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableInfinity_Receipt.TotalAmountDueColumn);
            }
            
            public void SetTotalAmountDueNull() {
                this[this.tableInfinity_Receipt.TotalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableInfinity_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableInfinity_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeDueNull() {
                return this.IsNull(this.tableInfinity_Receipt.ChangeDueColumn);
            }
            
            public void SetChangeDueNull() {
                this[this.tableInfinity_Receipt.ChangeDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableInfinity_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableInfinity_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableInfinity_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableInfinity_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableInfinity_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableInfinity_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableInfinity_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableInfinity_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableInfinity_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableInfinity_Receipt.Message5Column] = System.Convert.DBNull;
            }
            
            public bool IsPhoneNumberNull() {
                return this.IsNull(this.tableInfinity_Receipt.PhoneNumberColumn);
            }
            
            public void SetPhoneNumberNull() {
                this[this.tableInfinity_Receipt.PhoneNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsMinutesNull() {
                return this.IsNull(this.tableInfinity_Receipt.MinutesColumn);
            }
            
            public void SetMinutesNull() {
                this[this.tableInfinity_Receipt.MinutesColumn] = System.Convert.DBNull;
            }
            
            public bool IsControlNumberNull() {
                return this.IsNull(this.tableInfinity_Receipt.ControlNumberColumn);
            }
            
            public void SetControlNumberNull() {
                this[this.tableInfinity_Receipt.ControlNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsMSLNull() {
                return this.IsNull(this.tableInfinity_Receipt.MSLColumn);
            }
            
            public void SetMSLNull() {
                this[this.tableInfinity_Receipt.MSLColumn] = System.Convert.DBNull;
            }
            
            public bool IsMSIDNull() {
                return this.IsNull(this.tableInfinity_Receipt.MSIDColumn);
            }
            
            public void SetMSIDNull() {
                this[this.tableInfinity_Receipt.MSIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsMDNNull() {
                return this.IsNull(this.tableInfinity_Receipt.MDNColumn);
            }
            
            public void SetMDNNull() {
                this[this.tableInfinity_Receipt.MDNColumn] = System.Convert.DBNull;
            }
            
            public bool IsReceipt_Text2Null() {
                return this.IsNull(this.tableInfinity_Receipt.Receipt_Text2Column);
            }
            
            public void SetReceipt_Text2Null() {
                this[this.tableInfinity_Receipt.Receipt_Text2Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class Infinity_ReceiptRowChangeEvent : EventArgs {
            
            private Infinity_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public Infinity_ReceiptRowChangeEvent(Infinity_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public Infinity_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
