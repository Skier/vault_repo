//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsHI_Receipt : DataSet {
        
        private HI_ReceiptDataTable tableHI_Receipt;
        
        public dsHI_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsHI_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["HI_Receipt"] != null)) {
                    this.Tables.Add(new HI_ReceiptDataTable(ds.Tables["HI_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public HI_ReceiptDataTable HI_Receipt {
            get {
                return this.tableHI_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsHI_Receipt cln = ((dsHI_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["HI_Receipt"] != null)) {
                this.Tables.Add(new HI_ReceiptDataTable(ds.Tables["HI_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableHI_Receipt = ((HI_ReceiptDataTable)(this.Tables["HI_Receipt"]));
            if ((this.tableHI_Receipt != null)) {
                this.tableHI_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsHI_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsHI_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableHI_Receipt = new HI_ReceiptDataTable();
            this.Tables.Add(this.tableHI_Receipt);
        }
        
        private bool ShouldSerializeHI_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void HI_ReceiptRowChangeEventHandler(object sender, HI_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HI_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnOrdNumber;
            
            private DataColumn columnCustomer_Name;
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnProductID;
            
            private DataColumn columnParent_ProductID;
            
            private DataColumn columnProduct_Name;
            
            private DataColumn columnProduct_UnitPrice;
            
            private DataColumn columnSubTotal;
            
            private DataColumn columnTax;
            
            private DataColumn columnLocalAmountDue;
            
            private DataColumn columnLocalAmountPaid;
            
            private DataColumn columnLdAmount;
            
            private DataColumn columnTotalAmountDue;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnChangeDue;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            private DataColumn columnMessage6;
            
            private DataColumn columnMessage7;
            
            private DataColumn columnMessage8;
            
            private DataColumn columnMessage9;
            
            private DataColumn columnMessage10;
            
            private DataColumn columnMessage11;
            
            private DataColumn columnPaymentInfo;
            
            private DataColumn columnPin;
            
            private DataColumn columnInternetPinText;
            
            internal HI_ReceiptDataTable() : 
                    base("HI_Receipt") {
                this.InitClass();
            }
            
            internal HI_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn OrdNumberColumn {
                get {
                    return this.columnOrdNumber;
                }
            }
            
            internal DataColumn Customer_NameColumn {
                get {
                    return this.columnCustomer_Name;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn ProductIDColumn {
                get {
                    return this.columnProductID;
                }
            }
            
            internal DataColumn Parent_ProductIDColumn {
                get {
                    return this.columnParent_ProductID;
                }
            }
            
            internal DataColumn Product_NameColumn {
                get {
                    return this.columnProduct_Name;
                }
            }
            
            internal DataColumn Product_UnitPriceColumn {
                get {
                    return this.columnProduct_UnitPrice;
                }
            }
            
            internal DataColumn SubTotalColumn {
                get {
                    return this.columnSubTotal;
                }
            }
            
            internal DataColumn TaxColumn {
                get {
                    return this.columnTax;
                }
            }
            
            internal DataColumn LocalAmountDueColumn {
                get {
                    return this.columnLocalAmountDue;
                }
            }
            
            internal DataColumn LocalAmountPaidColumn {
                get {
                    return this.columnLocalAmountPaid;
                }
            }
            
            internal DataColumn LdAmountColumn {
                get {
                    return this.columnLdAmount;
                }
            }
            
            internal DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn ChangeDueColumn {
                get {
                    return this.columnChangeDue;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            internal DataColumn Message6Column {
                get {
                    return this.columnMessage6;
                }
            }
            
            internal DataColumn Message7Column {
                get {
                    return this.columnMessage7;
                }
            }
            
            internal DataColumn Message8Column {
                get {
                    return this.columnMessage8;
                }
            }
            
            internal DataColumn Message9Column {
                get {
                    return this.columnMessage9;
                }
            }
            
            internal DataColumn Message10Column {
                get {
                    return this.columnMessage10;
                }
            }
            
            internal DataColumn Message11Column {
                get {
                    return this.columnMessage11;
                }
            }
            
            internal DataColumn PaymentInfoColumn {
                get {
                    return this.columnPaymentInfo;
                }
            }
            
            internal DataColumn PinColumn {
                get {
                    return this.columnPin;
                }
            }
            
            internal DataColumn InternetPinTextColumn {
                get {
                    return this.columnInternetPinText;
                }
            }
            
            public HI_ReceiptRow this[int index] {
                get {
                    return ((HI_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event HI_ReceiptRowChangeEventHandler HI_ReceiptRowChanged;
            
            public event HI_ReceiptRowChangeEventHandler HI_ReceiptRowChanging;
            
            public event HI_ReceiptRowChangeEventHandler HI_ReceiptRowDeleted;
            
            public event HI_ReceiptRowChangeEventHandler HI_ReceiptRowDeleting;
            
            public void AddHI_ReceiptRow(HI_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public HI_ReceiptRow AddHI_ReceiptRow(
                        string Heading1, 
                        string Heading2, 
                        int OrdNumber, 
                        string Customer_Name, 
                        string StoreCode, 
                        System.DateTime PayDate, 
                        string PaymentType, 
                        int ProductID, 
                        int Parent_ProductID, 
                        string Product_Name, 
                        System.Decimal Product_UnitPrice, 
                        System.Decimal SubTotal, 
                        System.Decimal Tax, 
                        System.Decimal LocalAmountDue, 
                        System.Decimal LocalAmountPaid, 
                        System.Decimal LdAmount, 
                        System.Decimal TotalAmountDue, 
                        System.Decimal AmountTendered, 
                        System.Decimal ChangeDue, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5, 
                        string Message6, 
                        string Message7, 
                        string Message8, 
                        string Message9, 
                        string Message10, 
                        string Message11, 
                        int PaymentInfo, 
                        string Pin, 
                        string InternetPinText) {
                HI_ReceiptRow rowHI_ReceiptRow = ((HI_ReceiptRow)(this.NewRow()));
                rowHI_ReceiptRow.ItemArray = new object[] {
                        Heading1,
                        Heading2,
                        OrdNumber,
                        Customer_Name,
                        StoreCode,
                        PayDate,
                        PaymentType,
                        ProductID,
                        Parent_ProductID,
                        Product_Name,
                        Product_UnitPrice,
                        SubTotal,
                        Tax,
                        LocalAmountDue,
                        LocalAmountPaid,
                        LdAmount,
                        TotalAmountDue,
                        AmountTendered,
                        ChangeDue,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5,
                        Message6,
                        Message7,
                        Message8,
                        Message9,
                        Message10,
                        Message11,
                        PaymentInfo,
                        Pin,
                        InternetPinText};
                this.Rows.Add(rowHI_ReceiptRow);
                return rowHI_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                HI_ReceiptDataTable cln = ((HI_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new HI_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnOrdNumber = this.Columns["OrdNumber"];
                this.columnCustomer_Name = this.Columns["Customer_Name"];
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnProductID = this.Columns["ProductID"];
                this.columnParent_ProductID = this.Columns["Parent_ProductID"];
                this.columnProduct_Name = this.Columns["Product_Name"];
                this.columnProduct_UnitPrice = this.Columns["Product_UnitPrice"];
                this.columnSubTotal = this.Columns["SubTotal"];
                this.columnTax = this.Columns["Tax"];
                this.columnLocalAmountDue = this.Columns["LocalAmountDue"];
                this.columnLocalAmountPaid = this.Columns["LocalAmountPaid"];
                this.columnLdAmount = this.Columns["LdAmount"];
                this.columnTotalAmountDue = this.Columns["TotalAmountDue"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnChangeDue = this.Columns["ChangeDue"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
                this.columnMessage6 = this.Columns["Message6"];
                this.columnMessage7 = this.Columns["Message7"];
                this.columnMessage8 = this.Columns["Message8"];
                this.columnMessage9 = this.Columns["Message9"];
                this.columnMessage10 = this.Columns["Message10"];
                this.columnMessage11 = this.Columns["Message11"];
                this.columnPaymentInfo = this.Columns["PaymentInfo"];
                this.columnPin = this.Columns["Pin"];
                this.columnInternetPinText = this.Columns["InternetPinText"];
            }
            
            private void InitClass() {
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnOrdNumber = new DataColumn("OrdNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnOrdNumber);
                this.columnCustomer_Name = new DataColumn("Customer_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Name);
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnProductID = new DataColumn("ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProductID);
                this.columnParent_ProductID = new DataColumn("Parent_ProductID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnParent_ProductID);
                this.columnProduct_Name = new DataColumn("Product_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_Name);
                this.columnProduct_UnitPrice = new DataColumn("Product_UnitPrice", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProduct_UnitPrice);
                this.columnSubTotal = new DataColumn("SubTotal", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSubTotal);
                this.columnTax = new DataColumn("Tax", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTax);
                this.columnLocalAmountDue = new DataColumn("LocalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountDue);
                this.columnLocalAmountPaid = new DataColumn("LocalAmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountPaid);
                this.columnLdAmount = new DataColumn("LdAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLdAmount);
                this.columnTotalAmountDue = new DataColumn("TotalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountDue);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnChangeDue = new DataColumn("ChangeDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeDue);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnMessage6 = new DataColumn("Message6", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage6);
                this.columnMessage7 = new DataColumn("Message7", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage7);
                this.columnMessage8 = new DataColumn("Message8", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage8);
                this.columnMessage9 = new DataColumn("Message9", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage9);
                this.columnMessage10 = new DataColumn("Message10", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage10);
                this.columnMessage11 = new DataColumn("Message11", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage11);
                this.columnPaymentInfo = new DataColumn("PaymentInfo", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentInfo);
                this.columnPin = new DataColumn("Pin", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPin);
                this.columnInternetPinText = new DataColumn("InternetPinText", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnInternetPinText);
            }
            
            public HI_ReceiptRow NewHI_ReceiptRow() {
                return ((HI_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new HI_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(HI_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.HI_ReceiptRowChanged != null)) {
                    this.HI_ReceiptRowChanged(this, new HI_ReceiptRowChangeEvent(((HI_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.HI_ReceiptRowChanging != null)) {
                    this.HI_ReceiptRowChanging(this, new HI_ReceiptRowChangeEvent(((HI_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.HI_ReceiptRowDeleted != null)) {
                    this.HI_ReceiptRowDeleted(this, new HI_ReceiptRowChangeEvent(((HI_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.HI_ReceiptRowDeleting != null)) {
                    this.HI_ReceiptRowDeleting(this, new HI_ReceiptRowChangeEvent(((HI_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveHI_ReceiptRow(HI_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HI_ReceiptRow : DataRow {
            
            private HI_ReceiptDataTable tableHI_Receipt;
            
            internal HI_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableHI_Receipt = ((HI_ReceiptDataTable)(this.Table));
            }
            
            public string Heading1 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Heading1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Heading2Column] = value;
                }
            }
            
            public int OrdNumber {
                get {
                    try {
                        return ((int)(this[this.tableHI_Receipt.OrdNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.OrdNumberColumn] = value;
                }
            }
            
            public string Customer_Name {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Customer_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Customer_NameColumn] = value;
                }
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.StoreCodeColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableHI_Receipt.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.PaymentTypeColumn] = value;
                }
            }
            
            public int ProductID {
                get {
                    try {
                        return ((int)(this[this.tableHI_Receipt.ProductIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.ProductIDColumn] = value;
                }
            }
            
            public int Parent_ProductID {
                get {
                    try {
                        return ((int)(this[this.tableHI_Receipt.Parent_ProductIDColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Parent_ProductIDColumn] = value;
                }
            }
            
            public string Product_Name {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Product_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Product_NameColumn] = value;
                }
            }
            
            public System.Decimal Product_UnitPrice {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.Product_UnitPriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Product_UnitPriceColumn] = value;
                }
            }
            
            public System.Decimal SubTotal {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.SubTotalColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.SubTotalColumn] = value;
                }
            }
            
            public System.Decimal Tax {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.TaxColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.TaxColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.LocalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.LocalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.LocalAmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.LocalAmountPaidColumn] = value;
                }
            }
            
            public System.Decimal LdAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.LdAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.LdAmountColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.TotalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.TotalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal ChangeDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableHI_Receipt.ChangeDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.ChangeDueColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message5Column] = value;
                }
            }
            
            public string Message6 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message6Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message6Column] = value;
                }
            }
            
            public string Message7 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message7Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message7Column] = value;
                }
            }
            
            public string Message8 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message8Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message8Column] = value;
                }
            }
            
            public string Message9 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message9Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message9Column] = value;
                }
            }
            
            public string Message10 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message10Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message10Column] = value;
                }
            }
            
            public string Message11 {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.Message11Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.Message11Column] = value;
                }
            }
            
            public int PaymentInfo {
                get {
                    try {
                        return ((int)(this[this.tableHI_Receipt.PaymentInfoColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.PaymentInfoColumn] = value;
                }
            }
            
            public string Pin {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.PinColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.PinColumn] = value;
                }
            }
            
            public string InternetPinText {
                get {
                    try {
                        return ((string)(this[this.tableHI_Receipt.InternetPinTextColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableHI_Receipt.InternetPinTextColumn] = value;
                }
            }
            
            public bool IsHeading1Null() {
                return this.IsNull(this.tableHI_Receipt.Heading1Column);
            }
            
            public void SetHeading1Null() {
                this[this.tableHI_Receipt.Heading1Column] = System.Convert.DBNull;
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableHI_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableHI_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsOrdNumberNull() {
                return this.IsNull(this.tableHI_Receipt.OrdNumberColumn);
            }
            
            public void SetOrdNumberNull() {
                this[this.tableHI_Receipt.OrdNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomer_NameNull() {
                return this.IsNull(this.tableHI_Receipt.Customer_NameColumn);
            }
            
            public void SetCustomer_NameNull() {
                this[this.tableHI_Receipt.Customer_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tableHI_Receipt.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tableHI_Receipt.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tableHI_Receipt.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tableHI_Receipt.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableHI_Receipt.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableHI_Receipt.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsProductIDNull() {
                return this.IsNull(this.tableHI_Receipt.ProductIDColumn);
            }
            
            public void SetProductIDNull() {
                this[this.tableHI_Receipt.ProductIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsParent_ProductIDNull() {
                return this.IsNull(this.tableHI_Receipt.Parent_ProductIDColumn);
            }
            
            public void SetParent_ProductIDNull() {
                this[this.tableHI_Receipt.Parent_ProductIDColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_NameNull() {
                return this.IsNull(this.tableHI_Receipt.Product_NameColumn);
            }
            
            public void SetProduct_NameNull() {
                this[this.tableHI_Receipt.Product_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsProduct_UnitPriceNull() {
                return this.IsNull(this.tableHI_Receipt.Product_UnitPriceColumn);
            }
            
            public void SetProduct_UnitPriceNull() {
                this[this.tableHI_Receipt.Product_UnitPriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsSubTotalNull() {
                return this.IsNull(this.tableHI_Receipt.SubTotalColumn);
            }
            
            public void SetSubTotalNull() {
                this[this.tableHI_Receipt.SubTotalColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaxNull() {
                return this.IsNull(this.tableHI_Receipt.TaxColumn);
            }
            
            public void SetTaxNull() {
                this[this.tableHI_Receipt.TaxColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountDueNull() {
                return this.IsNull(this.tableHI_Receipt.LocalAmountDueColumn);
            }
            
            public void SetLocalAmountDueNull() {
                this[this.tableHI_Receipt.LocalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountPaidNull() {
                return this.IsNull(this.tableHI_Receipt.LocalAmountPaidColumn);
            }
            
            public void SetLocalAmountPaidNull() {
                this[this.tableHI_Receipt.LocalAmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsLdAmountNull() {
                return this.IsNull(this.tableHI_Receipt.LdAmountColumn);
            }
            
            public void SetLdAmountNull() {
                this[this.tableHI_Receipt.LdAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableHI_Receipt.TotalAmountDueColumn);
            }
            
            public void SetTotalAmountDueNull() {
                this[this.tableHI_Receipt.TotalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableHI_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableHI_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeDueNull() {
                return this.IsNull(this.tableHI_Receipt.ChangeDueColumn);
            }
            
            public void SetChangeDueNull() {
                this[this.tableHI_Receipt.ChangeDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableHI_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableHI_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableHI_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableHI_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableHI_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableHI_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableHI_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableHI_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableHI_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableHI_Receipt.Message5Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage6Null() {
                return this.IsNull(this.tableHI_Receipt.Message6Column);
            }
            
            public void SetMessage6Null() {
                this[this.tableHI_Receipt.Message6Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage7Null() {
                return this.IsNull(this.tableHI_Receipt.Message7Column);
            }
            
            public void SetMessage7Null() {
                this[this.tableHI_Receipt.Message7Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage8Null() {
                return this.IsNull(this.tableHI_Receipt.Message8Column);
            }
            
            public void SetMessage8Null() {
                this[this.tableHI_Receipt.Message8Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage9Null() {
                return this.IsNull(this.tableHI_Receipt.Message9Column);
            }
            
            public void SetMessage9Null() {
                this[this.tableHI_Receipt.Message9Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage10Null() {
                return this.IsNull(this.tableHI_Receipt.Message10Column);
            }
            
            public void SetMessage10Null() {
                this[this.tableHI_Receipt.Message10Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage11Null() {
                return this.IsNull(this.tableHI_Receipt.Message11Column);
            }
            
            public void SetMessage11Null() {
                this[this.tableHI_Receipt.Message11Column] = System.Convert.DBNull;
            }
            
            public bool IsPaymentInfoNull() {
                return this.IsNull(this.tableHI_Receipt.PaymentInfoColumn);
            }
            
            public void SetPaymentInfoNull() {
                this[this.tableHI_Receipt.PaymentInfoColumn] = System.Convert.DBNull;
            }
            
            public bool IsPinNull() {
                return this.IsNull(this.tableHI_Receipt.PinColumn);
            }
            
            public void SetPinNull() {
                this[this.tableHI_Receipt.PinColumn] = System.Convert.DBNull;
            }
            
            public bool IsInternetPinTextNull() {
                return this.IsNull(this.tableHI_Receipt.InternetPinTextColumn);
            }
            
            public void SetInternetPinTextNull() {
                this[this.tableHI_Receipt.InternetPinTextColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class HI_ReceiptRowChangeEvent : EventArgs {
            
            private HI_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public HI_ReceiptRowChangeEvent(HI_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public HI_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
