//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.Reports {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsMP_Receipt : DataSet {
        
        private MP_ReceiptDataTable tableMP_Receipt;
        
        public dsMP_Receipt() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsMP_Receipt(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["MP_Receipt"] != null)) {
                    this.Tables.Add(new MP_ReceiptDataTable(ds.Tables["MP_Receipt"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MP_ReceiptDataTable MP_Receipt {
            get {
                return this.tableMP_Receipt;
            }
        }
        
        public override DataSet Clone() {
            dsMP_Receipt cln = ((dsMP_Receipt)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["MP_Receipt"] != null)) {
                this.Tables.Add(new MP_ReceiptDataTable(ds.Tables["MP_Receipt"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableMP_Receipt = ((MP_ReceiptDataTable)(this.Tables["MP_Receipt"]));
            if ((this.tableMP_Receipt != null)) {
                this.tableMP_Receipt.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsMP_Receipt";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsMP_Receipt.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableMP_Receipt = new MP_ReceiptDataTable();
            this.Tables.Add(this.tableMP_Receipt);
        }
        
        private bool ShouldSerializeMP_Receipt() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void MP_ReceiptRowChangeEventHandler(object sender, MP_ReceiptRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MP_ReceiptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnHeading1;
            
            private DataColumn columnHeading2;
            
            private DataColumn columnAccNumber;
            
            private DataColumn columnPhNumber;
            
            private DataColumn columnCustomer_Name;
            
            private DataColumn columnConfirmation_Number;
            
            private DataColumn columnStoreCode;
            
            private DataColumn columnPayDate;
            
            private DataColumn columnPaymentType;
            
            private DataColumn columnCustomer_Status;
            
            private DataColumn columnCurrentDueDate;
            
            private DataColumn columnSDiscoDate;
            
            private DataColumn columnLocalAmountDue;
            
            private DataColumn columnLocalAmountPaid;
            
            private DataColumn columnLDAmount;
            
            private DataColumn columnTotalAmountDue;
            
            private DataColumn columnAmountTendered;
            
            private DataColumn columnChangeDue;
            
            private DataColumn columnMessage1;
            
            private DataColumn columnMessage2;
            
            private DataColumn columnMessage3;
            
            private DataColumn columnMessage4;
            
            private DataColumn columnMessage5;
            
            internal MP_ReceiptDataTable() : 
                    base("MP_Receipt") {
                this.InitClass();
            }
            
            internal MP_ReceiptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Heading1Column {
                get {
                    return this.columnHeading1;
                }
            }
            
            internal DataColumn Heading2Column {
                get {
                    return this.columnHeading2;
                }
            }
            
            internal DataColumn AccNumberColumn {
                get {
                    return this.columnAccNumber;
                }
            }
            
            internal DataColumn PhNumberColumn {
                get {
                    return this.columnPhNumber;
                }
            }
            
            internal DataColumn Customer_NameColumn {
                get {
                    return this.columnCustomer_Name;
                }
            }
            
            internal DataColumn Confirmation_NumberColumn {
                get {
                    return this.columnConfirmation_Number;
                }
            }
            
            internal DataColumn StoreCodeColumn {
                get {
                    return this.columnStoreCode;
                }
            }
            
            internal DataColumn PayDateColumn {
                get {
                    return this.columnPayDate;
                }
            }
            
            internal DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            internal DataColumn Customer_StatusColumn {
                get {
                    return this.columnCustomer_Status;
                }
            }
            
            internal DataColumn CurrentDueDateColumn {
                get {
                    return this.columnCurrentDueDate;
                }
            }
            
            internal DataColumn SDiscoDateColumn {
                get {
                    return this.columnSDiscoDate;
                }
            }
            
            internal DataColumn LocalAmountDueColumn {
                get {
                    return this.columnLocalAmountDue;
                }
            }
            
            internal DataColumn LocalAmountPaidColumn {
                get {
                    return this.columnLocalAmountPaid;
                }
            }
            
            internal DataColumn LDAmountColumn {
                get {
                    return this.columnLDAmount;
                }
            }
            
            internal DataColumn TotalAmountDueColumn {
                get {
                    return this.columnTotalAmountDue;
                }
            }
            
            internal DataColumn AmountTenderedColumn {
                get {
                    return this.columnAmountTendered;
                }
            }
            
            internal DataColumn ChangeDueColumn {
                get {
                    return this.columnChangeDue;
                }
            }
            
            internal DataColumn Message1Column {
                get {
                    return this.columnMessage1;
                }
            }
            
            internal DataColumn Message2Column {
                get {
                    return this.columnMessage2;
                }
            }
            
            internal DataColumn Message3Column {
                get {
                    return this.columnMessage3;
                }
            }
            
            internal DataColumn Message4Column {
                get {
                    return this.columnMessage4;
                }
            }
            
            internal DataColumn Message5Column {
                get {
                    return this.columnMessage5;
                }
            }
            
            public MP_ReceiptRow this[int index] {
                get {
                    return ((MP_ReceiptRow)(this.Rows[index]));
                }
            }
            
            public event MP_ReceiptRowChangeEventHandler MP_ReceiptRowChanged;
            
            public event MP_ReceiptRowChangeEventHandler MP_ReceiptRowChanging;
            
            public event MP_ReceiptRowChangeEventHandler MP_ReceiptRowDeleted;
            
            public event MP_ReceiptRowChangeEventHandler MP_ReceiptRowDeleting;
            
            public void AddMP_ReceiptRow(MP_ReceiptRow row) {
                this.Rows.Add(row);
            }
            
            public MP_ReceiptRow AddMP_ReceiptRow(
                        string Heading1, 
                        string Heading2, 
                        int AccNumber, 
                        string PhNumber, 
                        string Customer_Name, 
                        string Confirmation_Number, 
                        string StoreCode, 
                        System.DateTime PayDate, 
                        string PaymentType, 
                        string Customer_Status, 
                        System.DateTime CurrentDueDate, 
                        System.DateTime SDiscoDate, 
                        System.Decimal LocalAmountDue, 
                        System.Decimal LocalAmountPaid, 
                        System.Decimal LDAmount, 
                        System.Decimal TotalAmountDue, 
                        System.Decimal AmountTendered, 
                        System.Decimal ChangeDue, 
                        string Message1, 
                        string Message2, 
                        string Message3, 
                        string Message4, 
                        string Message5) {
                MP_ReceiptRow rowMP_ReceiptRow = ((MP_ReceiptRow)(this.NewRow()));
                rowMP_ReceiptRow.ItemArray = new object[] {
                        Heading1,
                        Heading2,
                        AccNumber,
                        PhNumber,
                        Customer_Name,
                        Confirmation_Number,
                        StoreCode,
                        PayDate,
                        PaymentType,
                        Customer_Status,
                        CurrentDueDate,
                        SDiscoDate,
                        LocalAmountDue,
                        LocalAmountPaid,
                        LDAmount,
                        TotalAmountDue,
                        AmountTendered,
                        ChangeDue,
                        Message1,
                        Message2,
                        Message3,
                        Message4,
                        Message5};
                this.Rows.Add(rowMP_ReceiptRow);
                return rowMP_ReceiptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                MP_ReceiptDataTable cln = ((MP_ReceiptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new MP_ReceiptDataTable();
            }
            
            internal void InitVars() {
                this.columnHeading1 = this.Columns["Heading1"];
                this.columnHeading2 = this.Columns["Heading2"];
                this.columnAccNumber = this.Columns["AccNumber"];
                this.columnPhNumber = this.Columns["PhNumber"];
                this.columnCustomer_Name = this.Columns["Customer_Name"];
                this.columnConfirmation_Number = this.Columns["Confirmation_Number"];
                this.columnStoreCode = this.Columns["StoreCode"];
                this.columnPayDate = this.Columns["PayDate"];
                this.columnPaymentType = this.Columns["PaymentType"];
                this.columnCustomer_Status = this.Columns["Customer_Status"];
                this.columnCurrentDueDate = this.Columns["CurrentDueDate"];
                this.columnSDiscoDate = this.Columns["SDiscoDate"];
                this.columnLocalAmountDue = this.Columns["LocalAmountDue"];
                this.columnLocalAmountPaid = this.Columns["LocalAmountPaid"];
                this.columnLDAmount = this.Columns["LDAmount"];
                this.columnTotalAmountDue = this.Columns["TotalAmountDue"];
                this.columnAmountTendered = this.Columns["AmountTendered"];
                this.columnChangeDue = this.Columns["ChangeDue"];
                this.columnMessage1 = this.Columns["Message1"];
                this.columnMessage2 = this.Columns["Message2"];
                this.columnMessage3 = this.Columns["Message3"];
                this.columnMessage4 = this.Columns["Message4"];
                this.columnMessage5 = this.Columns["Message5"];
            }
            
            private void InitClass() {
                this.columnHeading1 = new DataColumn("Heading1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading1);
                this.columnHeading2 = new DataColumn("Heading2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnHeading2);
                this.columnAccNumber = new DataColumn("AccNumber", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAccNumber);
                this.columnPhNumber = new DataColumn("PhNumber", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPhNumber);
                this.columnCustomer_Name = new DataColumn("Customer_Name", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Name);
                this.columnConfirmation_Number = new DataColumn("Confirmation_Number", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnConfirmation_Number);
                this.columnStoreCode = new DataColumn("StoreCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStoreCode);
                this.columnPayDate = new DataColumn("PayDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPayDate);
                this.columnPaymentType = new DataColumn("PaymentType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnPaymentType);
                this.columnCustomer_Status = new DataColumn("Customer_Status", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCustomer_Status);
                this.columnCurrentDueDate = new DataColumn("CurrentDueDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnCurrentDueDate);
                this.columnSDiscoDate = new DataColumn("SDiscoDate", typeof(System.DateTime), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnSDiscoDate);
                this.columnLocalAmountDue = new DataColumn("LocalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountDue);
                this.columnLocalAmountPaid = new DataColumn("LocalAmountPaid", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLocalAmountPaid);
                this.columnLDAmount = new DataColumn("LDAmount", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLDAmount);
                this.columnTotalAmountDue = new DataColumn("TotalAmountDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTotalAmountDue);
                this.columnAmountTendered = new DataColumn("AmountTendered", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAmountTendered);
                this.columnChangeDue = new DataColumn("ChangeDue", typeof(System.Decimal), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnChangeDue);
                this.columnMessage1 = new DataColumn("Message1", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage1);
                this.columnMessage2 = new DataColumn("Message2", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage2);
                this.columnMessage3 = new DataColumn("Message3", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage3);
                this.columnMessage4 = new DataColumn("Message4", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage4);
                this.columnMessage5 = new DataColumn("Message5", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMessage5);
                this.columnHeading1.AllowDBNull = false;
                this.columnAccNumber.AllowDBNull = false;
                this.columnCustomer_Status.AllowDBNull = false;
            }
            
            public MP_ReceiptRow NewMP_ReceiptRow() {
                return ((MP_ReceiptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new MP_ReceiptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(MP_ReceiptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MP_ReceiptRowChanged != null)) {
                    this.MP_ReceiptRowChanged(this, new MP_ReceiptRowChangeEvent(((MP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MP_ReceiptRowChanging != null)) {
                    this.MP_ReceiptRowChanging(this, new MP_ReceiptRowChangeEvent(((MP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MP_ReceiptRowDeleted != null)) {
                    this.MP_ReceiptRowDeleted(this, new MP_ReceiptRowChangeEvent(((MP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MP_ReceiptRowDeleting != null)) {
                    this.MP_ReceiptRowDeleting(this, new MP_ReceiptRowChangeEvent(((MP_ReceiptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveMP_ReceiptRow(MP_ReceiptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MP_ReceiptRow : DataRow {
            
            private MP_ReceiptDataTable tableMP_Receipt;
            
            internal MP_ReceiptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableMP_Receipt = ((MP_ReceiptDataTable)(this.Table));
            }
            
            public string Heading1 {
                get {
                    return ((string)(this[this.tableMP_Receipt.Heading1Column]));
                }
                set {
                    this[this.tableMP_Receipt.Heading1Column] = value;
                }
            }
            
            public string Heading2 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Heading2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Heading2Column] = value;
                }
            }
            
            public int AccNumber {
                get {
                    return ((int)(this[this.tableMP_Receipt.AccNumberColumn]));
                }
                set {
                    this[this.tableMP_Receipt.AccNumberColumn] = value;
                }
            }
            
            public string PhNumber {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.PhNumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.PhNumberColumn] = value;
                }
            }
            
            public string Customer_Name {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Customer_NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Customer_NameColumn] = value;
                }
            }
            
            public string Confirmation_Number {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Confirmation_NumberColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Confirmation_NumberColumn] = value;
                }
            }
            
            public string StoreCode {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.StoreCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.StoreCodeColumn] = value;
                }
            }
            
            public System.DateTime PayDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMP_Receipt.PayDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.PayDateColumn] = value;
                }
            }
            
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.PaymentTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.PaymentTypeColumn] = value;
                }
            }
            
            public string Customer_Status {
                get {
                    return ((string)(this[this.tableMP_Receipt.Customer_StatusColumn]));
                }
                set {
                    this[this.tableMP_Receipt.Customer_StatusColumn] = value;
                }
            }
            
            public System.DateTime CurrentDueDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMP_Receipt.CurrentDueDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.CurrentDueDateColumn] = value;
                }
            }
            
            public System.DateTime SDiscoDate {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableMP_Receipt.SDiscoDateColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.SDiscoDateColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.LocalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.LocalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal LocalAmountPaid {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.LocalAmountPaidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.LocalAmountPaidColumn] = value;
                }
            }
            
            public System.Decimal LDAmount {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.LDAmountColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.LDAmountColumn] = value;
                }
            }
            
            public System.Decimal TotalAmountDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.TotalAmountDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.TotalAmountDueColumn] = value;
                }
            }
            
            public System.Decimal AmountTendered {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.AmountTenderedColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.AmountTenderedColumn] = value;
                }
            }
            
            public System.Decimal ChangeDue {
                get {
                    try {
                        return ((System.Decimal)(this[this.tableMP_Receipt.ChangeDueColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.ChangeDueColumn] = value;
                }
            }
            
            public string Message1 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Message1Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Message1Column] = value;
                }
            }
            
            public string Message2 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Message2Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Message2Column] = value;
                }
            }
            
            public string Message3 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Message3Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Message3Column] = value;
                }
            }
            
            public string Message4 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Message4Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Message4Column] = value;
                }
            }
            
            public string Message5 {
                get {
                    try {
                        return ((string)(this[this.tableMP_Receipt.Message5Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMP_Receipt.Message5Column] = value;
                }
            }
            
            public bool IsHeading2Null() {
                return this.IsNull(this.tableMP_Receipt.Heading2Column);
            }
            
            public void SetHeading2Null() {
                this[this.tableMP_Receipt.Heading2Column] = System.Convert.DBNull;
            }
            
            public bool IsPhNumberNull() {
                return this.IsNull(this.tableMP_Receipt.PhNumberColumn);
            }
            
            public void SetPhNumberNull() {
                this[this.tableMP_Receipt.PhNumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsCustomer_NameNull() {
                return this.IsNull(this.tableMP_Receipt.Customer_NameColumn);
            }
            
            public void SetCustomer_NameNull() {
                this[this.tableMP_Receipt.Customer_NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsConfirmation_NumberNull() {
                return this.IsNull(this.tableMP_Receipt.Confirmation_NumberColumn);
            }
            
            public void SetConfirmation_NumberNull() {
                this[this.tableMP_Receipt.Confirmation_NumberColumn] = System.Convert.DBNull;
            }
            
            public bool IsStoreCodeNull() {
                return this.IsNull(this.tableMP_Receipt.StoreCodeColumn);
            }
            
            public void SetStoreCodeNull() {
                this[this.tableMP_Receipt.StoreCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsPayDateNull() {
                return this.IsNull(this.tableMP_Receipt.PayDateColumn);
            }
            
            public void SetPayDateNull() {
                this[this.tableMP_Receipt.PayDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableMP_Receipt.PaymentTypeColumn);
            }
            
            public void SetPaymentTypeNull() {
                this[this.tableMP_Receipt.PaymentTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsCurrentDueDateNull() {
                return this.IsNull(this.tableMP_Receipt.CurrentDueDateColumn);
            }
            
            public void SetCurrentDueDateNull() {
                this[this.tableMP_Receipt.CurrentDueDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsSDiscoDateNull() {
                return this.IsNull(this.tableMP_Receipt.SDiscoDateColumn);
            }
            
            public void SetSDiscoDateNull() {
                this[this.tableMP_Receipt.SDiscoDateColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountDueNull() {
                return this.IsNull(this.tableMP_Receipt.LocalAmountDueColumn);
            }
            
            public void SetLocalAmountDueNull() {
                this[this.tableMP_Receipt.LocalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsLocalAmountPaidNull() {
                return this.IsNull(this.tableMP_Receipt.LocalAmountPaidColumn);
            }
            
            public void SetLocalAmountPaidNull() {
                this[this.tableMP_Receipt.LocalAmountPaidColumn] = System.Convert.DBNull;
            }
            
            public bool IsLDAmountNull() {
                return this.IsNull(this.tableMP_Receipt.LDAmountColumn);
            }
            
            public void SetLDAmountNull() {
                this[this.tableMP_Receipt.LDAmountColumn] = System.Convert.DBNull;
            }
            
            public bool IsTotalAmountDueNull() {
                return this.IsNull(this.tableMP_Receipt.TotalAmountDueColumn);
            }
            
            public void SetTotalAmountDueNull() {
                this[this.tableMP_Receipt.TotalAmountDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsAmountTenderedNull() {
                return this.IsNull(this.tableMP_Receipt.AmountTenderedColumn);
            }
            
            public void SetAmountTenderedNull() {
                this[this.tableMP_Receipt.AmountTenderedColumn] = System.Convert.DBNull;
            }
            
            public bool IsChangeDueNull() {
                return this.IsNull(this.tableMP_Receipt.ChangeDueColumn);
            }
            
            public void SetChangeDueNull() {
                this[this.tableMP_Receipt.ChangeDueColumn] = System.Convert.DBNull;
            }
            
            public bool IsMessage1Null() {
                return this.IsNull(this.tableMP_Receipt.Message1Column);
            }
            
            public void SetMessage1Null() {
                this[this.tableMP_Receipt.Message1Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage2Null() {
                return this.IsNull(this.tableMP_Receipt.Message2Column);
            }
            
            public void SetMessage2Null() {
                this[this.tableMP_Receipt.Message2Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage3Null() {
                return this.IsNull(this.tableMP_Receipt.Message3Column);
            }
            
            public void SetMessage3Null() {
                this[this.tableMP_Receipt.Message3Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage4Null() {
                return this.IsNull(this.tableMP_Receipt.Message4Column);
            }
            
            public void SetMessage4Null() {
                this[this.tableMP_Receipt.Message4Column] = System.Convert.DBNull;
            }
            
            public bool IsMessage5Null() {
                return this.IsNull(this.tableMP_Receipt.Message5Column);
            }
            
            public void SetMessage5Null() {
                this[this.tableMP_Receipt.Message5Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class MP_ReceiptRowChangeEvent : EventArgs {
            
            private MP_ReceiptRow eventRow;
            
            private DataRowAction eventAction;
            
            public MP_ReceiptRowChangeEvent(MP_ReceiptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public MP_ReceiptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
