//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace DPI.ComponentsTests {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class dsProdPrice : DataSet {
        
        private viewProdPriceTestDataTable tableviewProdPriceTest;
        
        public dsProdPrice() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected dsProdPrice(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["viewProdPriceTest"] != null)) {
                    this.Tables.Add(new viewProdPriceTestDataTable(ds.Tables["viewProdPriceTest"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public viewProdPriceTestDataTable viewProdPriceTest {
            get {
                return this.tableviewProdPriceTest;
            }
        }
        
        public override DataSet Clone() {
            dsProdPrice cln = ((dsProdPrice)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["viewProdPriceTest"] != null)) {
                this.Tables.Add(new viewProdPriceTestDataTable(ds.Tables["viewProdPriceTest"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableviewProdPriceTest = ((viewProdPriceTestDataTable)(this.Tables["viewProdPriceTest"]));
            if ((this.tableviewProdPriceTest != null)) {
                this.tableviewProdPriceTest.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "dsProdPrice";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsProdPrice.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableviewProdPriceTest = new viewProdPriceTestDataTable();
            this.Tables.Add(this.tableviewProdPriceTest);
        }
        
        private bool ShouldSerializeviewProdPriceTest() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void viewProdPriceTestRowChangeEventHandler(object sender, viewProdPriceTestRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewProdPriceTestDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnId;
            
            private DataColumn columnProdType;
            
            private DataColumn columnProdName;
            
            private DataColumn columnDescription;
            
            private DataColumn columnunitprice;
            
            private DataColumn columnLoc;
            
            private DataColumn columnTaxCode;
            
            private DataColumn columnisrecurring;
            
            private DataColumn columnpricerule;
            
            private DataColumn columnpriceruleid;
            
            private DataColumn columnIsProvisionable;
            
            private DataColumn columnIsProvViaMapping;
            
            private DataColumn columnIsInstallForEachInstance;
            
            private DataColumn columnIsRestrictedToOneInstance;
            
            private DataColumn columnFulfillMethod;
            
            private DataColumn columnProdSubClass;
            
            private DataColumn columnStartServMon;
            
            private DataColumn columnEndServMon;
            
            private DataColumn columnexclusiveSupplier;
            
            private DataColumn columnEligibilityCriteria;
            
            private DataColumn columnpricetype;
            
            private DataColumn columnIsAgentVisible;
            
            private DataColumn columnWebDescription;
            
            internal viewProdPriceTestDataTable() : 
                    base("viewProdPriceTest") {
                this.InitClass();
            }
            
            internal viewProdPriceTestDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            internal DataColumn ProdTypeColumn {
                get {
                    return this.columnProdType;
                }
            }
            
            internal DataColumn ProdNameColumn {
                get {
                    return this.columnProdName;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn unitpriceColumn {
                get {
                    return this.columnunitprice;
                }
            }
            
            internal DataColumn LocColumn {
                get {
                    return this.columnLoc;
                }
            }
            
            internal DataColumn TaxCodeColumn {
                get {
                    return this.columnTaxCode;
                }
            }
            
            internal DataColumn isrecurringColumn {
                get {
                    return this.columnisrecurring;
                }
            }
            
            internal DataColumn priceruleColumn {
                get {
                    return this.columnpricerule;
                }
            }
            
            internal DataColumn priceruleidColumn {
                get {
                    return this.columnpriceruleid;
                }
            }
            
            internal DataColumn IsProvisionableColumn {
                get {
                    return this.columnIsProvisionable;
                }
            }
            
            internal DataColumn IsProvViaMappingColumn {
                get {
                    return this.columnIsProvViaMapping;
                }
            }
            
            internal DataColumn IsInstallForEachInstanceColumn {
                get {
                    return this.columnIsInstallForEachInstance;
                }
            }
            
            internal DataColumn IsRestrictedToOneInstanceColumn {
                get {
                    return this.columnIsRestrictedToOneInstance;
                }
            }
            
            internal DataColumn FulfillMethodColumn {
                get {
                    return this.columnFulfillMethod;
                }
            }
            
            internal DataColumn ProdSubClassColumn {
                get {
                    return this.columnProdSubClass;
                }
            }
            
            internal DataColumn StartServMonColumn {
                get {
                    return this.columnStartServMon;
                }
            }
            
            internal DataColumn EndServMonColumn {
                get {
                    return this.columnEndServMon;
                }
            }
            
            internal DataColumn exclusiveSupplierColumn {
                get {
                    return this.columnexclusiveSupplier;
                }
            }
            
            internal DataColumn EligibilityCriteriaColumn {
                get {
                    return this.columnEligibilityCriteria;
                }
            }
            
            internal DataColumn pricetypeColumn {
                get {
                    return this.columnpricetype;
                }
            }
            
            internal DataColumn IsAgentVisibleColumn {
                get {
                    return this.columnIsAgentVisible;
                }
            }
            
            internal DataColumn WebDescriptionColumn {
                get {
                    return this.columnWebDescription;
                }
            }
            
            public viewProdPriceTestRow this[int index] {
                get {
                    return ((viewProdPriceTestRow)(this.Rows[index]));
                }
            }
            
            public event viewProdPriceTestRowChangeEventHandler viewProdPriceTestRowChanged;
            
            public event viewProdPriceTestRowChangeEventHandler viewProdPriceTestRowChanging;
            
            public event viewProdPriceTestRowChangeEventHandler viewProdPriceTestRowDeleted;
            
            public event viewProdPriceTestRowChangeEventHandler viewProdPriceTestRowDeleting;
            
            public void AddviewProdPriceTestRow(viewProdPriceTestRow row) {
                this.Rows.Add(row);
            }
            
            public viewProdPriceTestRow AddviewProdPriceTestRow(
                        string ProdType, 
                        string ProdName, 
                        string Description, 
                        int unitprice, 
                        int Loc, 
                        string TaxCode, 
                        string isrecurring, 
                        int pricerule, 
                        int priceruleid, 
                        string IsProvisionable, 
                        string IsProvViaMapping, 
                        string IsInstallForEachInstance, 
                        string IsRestrictedToOneInstance, 
                        string FulfillMethod, 
                        string ProdSubClass, 
                        int StartServMon, 
                        int EndServMon, 
                        int exclusiveSupplier, 
                        string EligibilityCriteria, 
                        int pricetype, 
                        string IsAgentVisible, 
                        string WebDescription) {
                viewProdPriceTestRow rowviewProdPriceTestRow = ((viewProdPriceTestRow)(this.NewRow()));
                rowviewProdPriceTestRow.ItemArray = new object[] {
                        null,
                        ProdType,
                        ProdName,
                        Description,
                        unitprice,
                        Loc,
                        TaxCode,
                        isrecurring,
                        pricerule,
                        priceruleid,
                        IsProvisionable,
                        IsProvViaMapping,
                        IsInstallForEachInstance,
                        IsRestrictedToOneInstance,
                        FulfillMethod,
                        ProdSubClass,
                        StartServMon,
                        EndServMon,
                        exclusiveSupplier,
                        EligibilityCriteria,
                        pricetype,
                        IsAgentVisible,
                        WebDescription};
                this.Rows.Add(rowviewProdPriceTestRow);
                return rowviewProdPriceTestRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                viewProdPriceTestDataTable cln = ((viewProdPriceTestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new viewProdPriceTestDataTable();
            }
            
            internal void InitVars() {
                this.columnId = this.Columns["Id"];
                this.columnProdType = this.Columns["ProdType"];
                this.columnProdName = this.Columns["ProdName"];
                this.columnDescription = this.Columns["Description"];
                this.columnunitprice = this.Columns["unitprice"];
                this.columnLoc = this.Columns["Loc"];
                this.columnTaxCode = this.Columns["TaxCode"];
                this.columnisrecurring = this.Columns["isrecurring"];
                this.columnpricerule = this.Columns["pricerule"];
                this.columnpriceruleid = this.Columns["priceruleid"];
                this.columnIsProvisionable = this.Columns["IsProvisionable"];
                this.columnIsProvViaMapping = this.Columns["IsProvViaMapping"];
                this.columnIsInstallForEachInstance = this.Columns["IsInstallForEachInstance"];
                this.columnIsRestrictedToOneInstance = this.Columns["IsRestrictedToOneInstance"];
                this.columnFulfillMethod = this.Columns["FulfillMethod"];
                this.columnProdSubClass = this.Columns["ProdSubClass"];
                this.columnStartServMon = this.Columns["StartServMon"];
                this.columnEndServMon = this.Columns["EndServMon"];
                this.columnexclusiveSupplier = this.Columns["exclusiveSupplier"];
                this.columnEligibilityCriteria = this.Columns["EligibilityCriteria"];
                this.columnpricetype = this.Columns["pricetype"];
                this.columnIsAgentVisible = this.Columns["IsAgentVisible"];
                this.columnWebDescription = this.Columns["WebDescription"];
            }
            
            private void InitClass() {
                this.columnId = new DataColumn("Id", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnId);
                this.columnProdType = new DataColumn("ProdType", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProdType);
                this.columnProdName = new DataColumn("ProdName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProdName);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDescription);
                this.columnunitprice = new DataColumn("unitprice", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnunitprice);
                this.columnLoc = new DataColumn("Loc", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnLoc);
                this.columnTaxCode = new DataColumn("TaxCode", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTaxCode);
                this.columnisrecurring = new DataColumn("isrecurring", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnisrecurring);
                this.columnpricerule = new DataColumn("pricerule", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpricerule);
                this.columnpriceruleid = new DataColumn("priceruleid", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpriceruleid);
                this.columnIsProvisionable = new DataColumn("IsProvisionable", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsProvisionable);
                this.columnIsProvViaMapping = new DataColumn("IsProvViaMapping", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsProvViaMapping);
                this.columnIsInstallForEachInstance = new DataColumn("IsInstallForEachInstance", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsInstallForEachInstance);
                this.columnIsRestrictedToOneInstance = new DataColumn("IsRestrictedToOneInstance", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsRestrictedToOneInstance);
                this.columnFulfillMethod = new DataColumn("FulfillMethod", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFulfillMethod);
                this.columnProdSubClass = new DataColumn("ProdSubClass", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnProdSubClass);
                this.columnStartServMon = new DataColumn("StartServMon", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnStartServMon);
                this.columnEndServMon = new DataColumn("EndServMon", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEndServMon);
                this.columnexclusiveSupplier = new DataColumn("exclusiveSupplier", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnexclusiveSupplier);
                this.columnEligibilityCriteria = new DataColumn("EligibilityCriteria", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEligibilityCriteria);
                this.columnpricetype = new DataColumn("pricetype", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnpricetype);
                this.columnIsAgentVisible = new DataColumn("IsAgentVisible", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnIsAgentVisible);
                this.columnWebDescription = new DataColumn("WebDescription", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnWebDescription);
                this.columnId.AutoIncrement = true;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnProdType.AllowDBNull = false;
                this.columnProdName.AllowDBNull = false;
                this.columnunitprice.ReadOnly = true;
                this.columnLoc.AllowDBNull = false;
                this.columnisrecurring.ReadOnly = true;
                this.columnpricerule.ReadOnly = true;
                this.columnpriceruleid.ReadOnly = true;
                this.columnIsProvisionable.AllowDBNull = false;
                this.columnIsProvViaMapping.AllowDBNull = false;
                this.columnexclusiveSupplier.ReadOnly = true;
                this.columnpricetype.ReadOnly = true;
            }
            
            public viewProdPriceTestRow NewviewProdPriceTestRow() {
                return ((viewProdPriceTestRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new viewProdPriceTestRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(viewProdPriceTestRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.viewProdPriceTestRowChanged != null)) {
                    this.viewProdPriceTestRowChanged(this, new viewProdPriceTestRowChangeEvent(((viewProdPriceTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.viewProdPriceTestRowChanging != null)) {
                    this.viewProdPriceTestRowChanging(this, new viewProdPriceTestRowChangeEvent(((viewProdPriceTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.viewProdPriceTestRowDeleted != null)) {
                    this.viewProdPriceTestRowDeleted(this, new viewProdPriceTestRowChangeEvent(((viewProdPriceTestRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.viewProdPriceTestRowDeleting != null)) {
                    this.viewProdPriceTestRowDeleting(this, new viewProdPriceTestRowChangeEvent(((viewProdPriceTestRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveviewProdPriceTestRow(viewProdPriceTestRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewProdPriceTestRow : DataRow {
            
            private viewProdPriceTestDataTable tableviewProdPriceTest;
            
            internal viewProdPriceTestRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableviewProdPriceTest = ((viewProdPriceTestDataTable)(this.Table));
            }
            
            public int Id {
                get {
                    return ((int)(this[this.tableviewProdPriceTest.IdColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.IdColumn] = value;
                }
            }
            
            public string ProdType {
                get {
                    return ((string)(this[this.tableviewProdPriceTest.ProdTypeColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.ProdTypeColumn] = value;
                }
            }
            
            public string ProdName {
                get {
                    return ((string)(this[this.tableviewProdPriceTest.ProdNameColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.ProdNameColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.DescriptionColumn] = value;
                }
            }
            
            public int unitprice {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.unitpriceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.unitpriceColumn] = value;
                }
            }
            
            public int Loc {
                get {
                    return ((int)(this[this.tableviewProdPriceTest.LocColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.LocColumn] = value;
                }
            }
            
            public string TaxCode {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.TaxCodeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.TaxCodeColumn] = value;
                }
            }
            
            public string isrecurring {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.isrecurringColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.isrecurringColumn] = value;
                }
            }
            
            public int pricerule {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.priceruleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.priceruleColumn] = value;
                }
            }
            
            public int priceruleid {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.priceruleidColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.priceruleidColumn] = value;
                }
            }
            
            public string IsProvisionable {
                get {
                    return ((string)(this[this.tableviewProdPriceTest.IsProvisionableColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.IsProvisionableColumn] = value;
                }
            }
            
            public string IsProvViaMapping {
                get {
                    return ((string)(this[this.tableviewProdPriceTest.IsProvViaMappingColumn]));
                }
                set {
                    this[this.tableviewProdPriceTest.IsProvViaMappingColumn] = value;
                }
            }
            
            public string IsInstallForEachInstance {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.IsInstallForEachInstanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.IsInstallForEachInstanceColumn] = value;
                }
            }
            
            public string IsRestrictedToOneInstance {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.IsRestrictedToOneInstanceColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.IsRestrictedToOneInstanceColumn] = value;
                }
            }
            
            public string FulfillMethod {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.FulfillMethodColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.FulfillMethodColumn] = value;
                }
            }
            
            public string ProdSubClass {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.ProdSubClassColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.ProdSubClassColumn] = value;
                }
            }
            
            public int StartServMon {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.StartServMonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.StartServMonColumn] = value;
                }
            }
            
            public int EndServMon {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.EndServMonColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.EndServMonColumn] = value;
                }
            }
            
            public int exclusiveSupplier {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.exclusiveSupplierColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.exclusiveSupplierColumn] = value;
                }
            }
            
            public string EligibilityCriteria {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.EligibilityCriteriaColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.EligibilityCriteriaColumn] = value;
                }
            }
            
            public int pricetype {
                get {
                    try {
                        return ((int)(this[this.tableviewProdPriceTest.pricetypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.pricetypeColumn] = value;
                }
            }
            
            public string IsAgentVisible {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.IsAgentVisibleColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.IsAgentVisibleColumn] = value;
                }
            }
            
            public string WebDescription {
                get {
                    try {
                        return ((string)(this[this.tableviewProdPriceTest.WebDescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableviewProdPriceTest.WebDescriptionColumn] = value;
                }
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableviewProdPriceTest.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableviewProdPriceTest.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsunitpriceNull() {
                return this.IsNull(this.tableviewProdPriceTest.unitpriceColumn);
            }
            
            public void SetunitpriceNull() {
                this[this.tableviewProdPriceTest.unitpriceColumn] = System.Convert.DBNull;
            }
            
            public bool IsTaxCodeNull() {
                return this.IsNull(this.tableviewProdPriceTest.TaxCodeColumn);
            }
            
            public void SetTaxCodeNull() {
                this[this.tableviewProdPriceTest.TaxCodeColumn] = System.Convert.DBNull;
            }
            
            public bool IsisrecurringNull() {
                return this.IsNull(this.tableviewProdPriceTest.isrecurringColumn);
            }
            
            public void SetisrecurringNull() {
                this[this.tableviewProdPriceTest.isrecurringColumn] = System.Convert.DBNull;
            }
            
            public bool IspriceruleNull() {
                return this.IsNull(this.tableviewProdPriceTest.priceruleColumn);
            }
            
            public void SetpriceruleNull() {
                this[this.tableviewProdPriceTest.priceruleColumn] = System.Convert.DBNull;
            }
            
            public bool IspriceruleidNull() {
                return this.IsNull(this.tableviewProdPriceTest.priceruleidColumn);
            }
            
            public void SetpriceruleidNull() {
                this[this.tableviewProdPriceTest.priceruleidColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsInstallForEachInstanceNull() {
                return this.IsNull(this.tableviewProdPriceTest.IsInstallForEachInstanceColumn);
            }
            
            public void SetIsInstallForEachInstanceNull() {
                this[this.tableviewProdPriceTest.IsInstallForEachInstanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsRestrictedToOneInstanceNull() {
                return this.IsNull(this.tableviewProdPriceTest.IsRestrictedToOneInstanceColumn);
            }
            
            public void SetIsRestrictedToOneInstanceNull() {
                this[this.tableviewProdPriceTest.IsRestrictedToOneInstanceColumn] = System.Convert.DBNull;
            }
            
            public bool IsFulfillMethodNull() {
                return this.IsNull(this.tableviewProdPriceTest.FulfillMethodColumn);
            }
            
            public void SetFulfillMethodNull() {
                this[this.tableviewProdPriceTest.FulfillMethodColumn] = System.Convert.DBNull;
            }
            
            public bool IsProdSubClassNull() {
                return this.IsNull(this.tableviewProdPriceTest.ProdSubClassColumn);
            }
            
            public void SetProdSubClassNull() {
                this[this.tableviewProdPriceTest.ProdSubClassColumn] = System.Convert.DBNull;
            }
            
            public bool IsStartServMonNull() {
                return this.IsNull(this.tableviewProdPriceTest.StartServMonColumn);
            }
            
            public void SetStartServMonNull() {
                this[this.tableviewProdPriceTest.StartServMonColumn] = System.Convert.DBNull;
            }
            
            public bool IsEndServMonNull() {
                return this.IsNull(this.tableviewProdPriceTest.EndServMonColumn);
            }
            
            public void SetEndServMonNull() {
                this[this.tableviewProdPriceTest.EndServMonColumn] = System.Convert.DBNull;
            }
            
            public bool IsexclusiveSupplierNull() {
                return this.IsNull(this.tableviewProdPriceTest.exclusiveSupplierColumn);
            }
            
            public void SetexclusiveSupplierNull() {
                this[this.tableviewProdPriceTest.exclusiveSupplierColumn] = System.Convert.DBNull;
            }
            
            public bool IsEligibilityCriteriaNull() {
                return this.IsNull(this.tableviewProdPriceTest.EligibilityCriteriaColumn);
            }
            
            public void SetEligibilityCriteriaNull() {
                this[this.tableviewProdPriceTest.EligibilityCriteriaColumn] = System.Convert.DBNull;
            }
            
            public bool IspricetypeNull() {
                return this.IsNull(this.tableviewProdPriceTest.pricetypeColumn);
            }
            
            public void SetpricetypeNull() {
                this[this.tableviewProdPriceTest.pricetypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsAgentVisibleNull() {
                return this.IsNull(this.tableviewProdPriceTest.IsAgentVisibleColumn);
            }
            
            public void SetIsAgentVisibleNull() {
                this[this.tableviewProdPriceTest.IsAgentVisibleColumn] = System.Convert.DBNull;
            }
            
            public bool IsWebDescriptionNull() {
                return this.IsNull(this.tableviewProdPriceTest.WebDescriptionColumn);
            }
            
            public void SetWebDescriptionNull() {
                this[this.tableviewProdPriceTest.WebDescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class viewProdPriceTestRowChangeEvent : EventArgs {
            
            private viewProdPriceTestRow eventRow;
            
            private DataRowAction eventAction;
            
            public viewProdPriceTestRowChangeEvent(viewProdPriceTestRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public viewProdPriceTestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
