<?xml version="1.0" encoding="utf-8"?>
<mx:Application 
    xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
    xmlns:modest="com.modestmaps.flex.*" xmlns:local="*" 
    xmlns:microsoft="com.modestmaps.mapproviders.microsoft.*" 
    xmlns:yahoo="com.modestmaps.mapproviders.yahoo.*" 
    xmlns:google="com.modestmaps.mapproviders.google.*" 
    xmlns:mapproviders="com.modestmaps.mapproviders.*"
    creationComplete="updateScaleValue()">

	<mx:Script>
		<![CDATA[
		    import mx.collections.ArrayCollection;
		    import com.modestmaps.geo.Location;
			import com.modestmaps.mapproviders.microsoft.MicrosoftRoadMapProvider;
			
            [Bindable]
			private var drawingLine:Line;
			private var lines:ArrayCollection = new ArrayCollection();

            private var drawingLineMode:Boolean = false;

			private function updateScaleValue():void
			{
			    //физических метров в одном пикселе
			    var mpp:Number = GeoUtil.metersPerPixel(map.map.grid.zoomLevel, map.center);

                //пикселей в одном экранном дюйме
			    var dpi:Number = 96;//Capabilities.screenDPI;
			    			    
			    //пикселей в одном экранном сантиметре
                var ppsm:Number = dpi / 2.54; //1 inch = 2.54 centimeters

                //физических метров в одном экранном сантиметре
                var mpsm:Number = ppsm * mpp;

			    mppLabel.text = mpp.toString();
			    mpsmLabel.text = mpsm.toString();
			    zoomLevelLabel.text = map.map.grid.zoomLevel.toString();

                for each (var line:Line in lines)
                {
                    line.invalidateDisplayList();
                }
			}

            private function getDistance2(loc1:Location, loc2:Location):Number
            {
                var eartchRadius:Number = 6372795; //радиус Земли в метрах
                
                var lat1:Number = loc1.lat * Math.PI / 180; //широта первой точки в радианах
                var lat2:Number = loc2.lat * Math.PI / 180; //широта второй точки в радианах
                var lon1:Number = loc1.lat * Math.PI / 180; //долгота первой точки в радианах
                var lon2:Number = loc2.lat * Math.PI / 180; //долгота второй точки в радианах
                
                var deltaLon:Number = lon2 - lon1; //разница координат по долготе
                var deltaLat:Number = lat2 - lat1; //разница координат по широте

                return 0;
//                Math.atan
            }

			private function map_mouseMoveHandler(event:MouseEvent):void
			{
			    var mousePoint:Point = new Point(map.mouseX, map.mouseY);
			    var mouseLocation:Location = map.map.pointLocation(mousePoint, map);
			    
			    mlatLabel.text = mouseLocation.lat.toString();
			    mlonLabel.text = mouseLocation.lon.toString();

			    if (drawingLine != null)
			    {
			        if (drawingLine is Curve)
			        {
			            Curve(drawingLine).tangentIn =
			                GeoUtil.getBearing(drawingLine.startLoc, drawingLine.endLoc) - 90;
			        } 

			        drawingLine.endLoc = mouseLocation;
			        drawingLine.invalidateDisplayList();
			        
			        var d:Number = GeoUtil.getDistance(drawingLine.startLoc, drawingLine.endLoc);
			        var b:Number = GeoUtil.getBearing(drawingLine.startLoc, drawingLine.endLoc);
			        
			        distanceLbl.text = (d / 1000).toString();
			        startBearingLbl.text = b.toString();
			    }
			}
			
			private function map_mouseWheelHandler(event:MouseEvent):void
			{
			    if (event.delta > 0)
			        map.map.zoomIn();
			    else
			        map.map.zoomOut();
			}

			private function map_mouseDownHandler(event:MouseEvent):void
			{
			    var mousePoint:Point = new Point(map.mouseX, map.mouseY);
			    var mouseLocation:Location = map.map.pointLocation(mousePoint, map);

			    if (drawingLine != null)
			    {
			        drawingLine = null;
			        drawType.selectedValue = 0;
			    } 
			    else if (drawType.selectedValue > 0)
			    {

			        if (drawType.selectedValue == 1)
			        {
        			    drawingLine = new Line();
			        } 
			        else 
			        {
			            var curve:Curve = new Curve();
    			        curve.delta = 180;
    			        curve.radius = 0;
    			        
    			        drawingLine = curve;
			        }

    			    drawingLine.map = map;
    			    drawingLine.startLoc = mouseLocation;
    			    drawingLine.endLoc = mouseLocation;
			        drawingLine.mouseEnabled = false;

    			    ds.addChild(drawingLine);
			        lines.addItem(drawingLine);
			    }
			}
			
			private function drawLine():void
			{
			    var startLocation:Location = new Location(Number(latTxt.text), Number(lonTxt.text));
			    var bearing:Number = Number(brngTxt.text);
			    var distance:Number = Number(distanceTxt.text);
			    var endLocation:Location = GeoUtil.getEndPoint(startLocation, distance * 1000, bearing);
			    
			    var line:Line = new Line();
			    line.startLoc = startLocation;
			    line.endLoc = endLocation;
		        line.mouseEnabled = false;
			    line.map = map;

		        ds.addChild(line);
		        lines.addItem(line);
			}

            public function drawSplittedLine():void
            {
			    var startLocation:Location = new Location(Number(latTxt.text), Number(lonTxt.text));
			    var bearing:Number = Number(brngTxt.text);
			    var distance:Number = Number(distanceTxt.text) * 1000; //meters
			    
			    var line:SplittedLine = new SplittedLine();
			    line.startLoc = startLocation;
			    line.startBearing = bearing;
			    line.distance = distance;
			    line.map = map;
			    line.mouseEnabled = false;
			    ds.addChild(line);
			    lines.addItem(line);
			    
/* 			    var splitCount:Number = 10; //TODO: should be deppended of distance and zoomValue
			    for (var i:int = 1; i <= splitCount; i++)
			    {
    			    var endLocation:Location = GeoUtil.getEndPoint(startLocation, distance / splitCount, bearing);

    			    var line:Line = new Line();
    			    line.startLoc = startLocation;
    			    line.endLoc = endLocation;
    		        line.mouseEnabled = false;
    			    line.map = map;
    
    		        ds.addChild(line);
    		        lines.addItem(line);

                    startLocation = endLocation;			        
			    }
 */            }
            
            private function deleteAllDrawing():void
            {
                while (lines.length > 0)
                {
                    var line:Line = Line(lines.getItemAt(0));
                    lines.removeItemAt(0);
                    ds.removeChild(line);
                }
            }
            
		]]>
	</mx:Script>

    <mx:ArrayCollection id="mapProviders">
        <microsoft:MicrosoftRoadMapProvider/>
        <microsoft:MicrosoftAerialMapProvider/>
        <microsoft:MicrosoftHybridMapProvider/>
        
        <yahoo:YahooAerialMapProvider/>
        <yahoo:YahooHybridMapProvider/>
        <yahoo:YahooOverlayMapProvider/>
        <yahoo:YahooRoadMapProvider/>

        <google:GoogleAerialMapProvider/>
        <google:GoogleHybridMapProvider/>
        <google:GoogleRoadMapProvider/>
        
        <mapproviders:BlueMarbleMapProvider />
        <mapproviders:OpenStreetMapProvider />

    </mx:ArrayCollection>

    <mx:HBox width="100%" height="100%">

        <mx:VBox id="controlPanel">

            <mx:Box width="100%" borderStyle="solid" backgroundColor="#ffffdd">
                <mx:Form labelWidth="130">
                    <mx:FormHeading label="End Point Calculation Test"/>
                    <mx:FormItem label="Start Point Lat">
                        <mx:TextInput id="latTxt" text="49.06"/>
                    </mx:FormItem>
                    <mx:FormItem label="Start Point Long">
                        <mx:TextInput id="lonTxt" text="27.40"/>
                    </mx:FormItem>
                    <mx:FormItem label="Starting Bearing">
                        <mx:TextInput id="brngTxt" text="90"/>
                    </mx:FormItem>
                    <mx:FormItem label="Distance (km)">
                        <mx:TextInput id="distanceTxt" text="1000"/>
                    </mx:FormItem>
                    <mx:HBox>
                        <mx:Button label="Draw straight Line" click="drawLine()"/>
                        <mx:Button label="Draw splitted Line" click="drawSplittedLine()"/>
                    </mx:HBox>
                    <mx:Button label="Delete All Drawing" click="deleteAllDrawing()"/>
                </mx:Form>
            </mx:Box>

            <mx:Box width="100%" borderStyle="solid" backgroundColor="#ffffdd">
                <mx:Form labelWidth="130">
                    <mx:FormHeading  label="Map Info"/>
                    <mx:FormItem label="Map Provider">
                        <mx:ComboBox id="providerList" dataProvider="{mapProviders}"/>
                    </mx:FormItem>
                    <mx:FormItem label="Zoom Level">
                        <mx:Label id="zoomLevelLabel"/>
                    </mx:FormItem>
                    <mx:FormItem label="Meters Per Pixel">
                        <mx:Label id="mppLabel"/>
                    </mx:FormItem>
                    <mx:FormItem label="Meters Per Sentimiter">
                        <mx:Label id="mpsmLabel"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:Box>

            <mx:Box width="100%" borderStyle="solid" backgroundColor="#ffffdd">
                <mx:Form labelWidth="130">
                    <mx:FormHeading  label="Mouse Location Info"/>
                    <mx:FormItem label="Latitude">
                        <mx:Label id="mlatLabel"/>
                    </mx:FormItem>
                    <mx:FormItem label="Longitude">
                        <mx:Label id="mlonLabel"/>
                    </mx:FormItem>
                </mx:Form>
            </mx:Box>

            <mx:VBox width="100%" borderStyle="solid" backgroundColor="#ffffdd" 
                paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
                <mx:HBox>
                    <mx:RadioButtonGroup id="drawType"/>
                    <mx:RadioButton groupName="drawType" label="draw none" value="0" selected="true"/>
                    <mx:RadioButton groupName="drawType" label="draw line" value="1"/>
                    <mx:RadioButton groupName="drawType" label="draw curve" value="2"/>
                </mx:HBox>

                <mx:Form labelWidth="130" paddingTop="0">
                    <mx:FormHeading  label="Drawing Line Info"/>
                    <mx:FormItem label="Distance, km">
                        <mx:Label id="distanceLbl"/>
                    </mx:FormItem>
                    <mx:FormItem label="Start Azimuth, degrees">
                        <mx:Label id="startBearingLbl"/>
                    </mx:FormItem>
                </mx:Form>
                
                <mx:VBox visible="{drawingLine != null}" includeInLayout="{drawingLine != null}"/>
            </mx:VBox>
            
        </mx:VBox>

        <mx:VBox id="mapPanel" width="100%" height="100%">

            <!-- По умолчанию маштаб и позиционирование установлено таким образом чтобы видеть на экране 
                 города Хмельницкий и Каменец-Подольский поскольку известно расстояние между ними ~90 km 
            -->
        
            <mx:Canvas id="ds" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
            	<modest:Map id="map" 
            	    stopZooming="updateScaleValue()"
            	    stopPanning="updateScaleValue()"
            	    mouseWheel="map_mouseWheelHandler(event)"
            	    mouseMove="map_mouseMoveHandler(event)"
            	    mouseDown="map_mouseDownHandler(event)"
            	    center="{new Location(49.06, 27.40)}" zoom="8"
            	    width="100%" height="100%"
            		provider="{providerList.selectedItem}" extent="40.764941, 40.693655, -73.938675, -74.039612"/>
            </mx:Canvas>

        </mx:VBox>
    </mx:HBox>

</mx:Application>
