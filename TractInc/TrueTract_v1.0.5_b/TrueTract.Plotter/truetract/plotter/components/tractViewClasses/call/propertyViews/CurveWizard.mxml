<?xml version="1.0" encoding="utf-8"?>
<CallPropertiesView 
    xmlns="truetract.plotter.components.tractViewClasses.call.propertyViews.*" 
    xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:validators="truetract.plotter.validators.*"
    xmlns:components="truetract.plotter.components.*"
    title="Curve Wizard" layout="vertical" 

    creationComplete="creationComplete_handler()">
    
    <states>
        <mx:State name="showHelp">
            <mx:SetProperty target="{showHelpBtn}" name="label" value="Hide Help"/>
            <mx:SetEventHandler target="{showHelpBtn}" name="click" handler="currentState=''"/>
        </mx:State>
    </states>

    <transitions>
        <mx:Transition fromState="" toState="showHelp">
            <mx:Parallel>
                <mx:Resize target="{helpBox}" heightFrom="0" heightTo="120" 
                    effectStart="helpBox.includeInLayout = helpBox.visible = true"/>
                <mx:Move target="{this}" 
                    xTo="{Application.application.width / 2 - this.width / 2}"
                    yTo="{Application.application.height / 2 - (this.height + 120) / 2 }" />
            </mx:Parallel>
        </mx:Transition>
        <mx:Transition fromState="showHelp" toState="">
            <mx:Parallel>
                <mx:Resize target="{helpBox}" heightFrom="120" heightTo="0"
                    effectEnd="helpBox.includeInLayout = helpBox.visible = false"/>
                <mx:Move target="{this}" 
                    xTo="{Application.application.width / 2 - this.width / 2}"
                    yTo="{Application.application.height / 2 - (this.height - 120) / 2}" />
            </mx:Parallel>
        </mx:Transition>
    </transitions>

    <mx:Script>
        <![CDATA[
            import mx.core.Application;
            import mx.managers.PopUpManager;
        	import truetract.plotter.domain.TractCall;

            import truetract.plotter.domain.callparams.*;
            import truetract.plotter.components.tractViewClasses.call.factories.CallViewFactory;
            import truetract.plotter.utils.*;
            import truetract.plotter.utils.*;

            import mx.core.UIComponent;
            import mx.containers.ControlBar;
            import mx.controls.Alert;
            import mx.controls.Spacer;
            import mx.controls.Button;
            import mx.events.ToolTipEvent;
            import mx.events.ValidationResultEvent;
            import mx.managers.ToolTipManager;
        
			private const chordColor:uint = 0x00ff00;
			private const arcColor:uint = 0xff0000;
			private const tangentInColor:uint = 0x000000;
			private const radiusColor:uint = 0xFFCC00;
			private const deltaColor:uint = 0x0000ff;
			private const chordBearingColor:uint = 0xCC00CC;

            public var radiusUom:UnitOfMeasure = UOMUtil.Instance().DefaultUOM;
            public var arcLengthUom:UnitOfMeasure = UOMUtil.Instance().DefaultUOM;
            public var chordLengthUom:UnitOfMeasure = UOMUtil.Instance().DefaultUOM;
            
            private var previewRefreshBtn:Button;

            override protected function getType():String {
                return TractCall.CALL_TYPE_CURVE;
            }

             override protected function createChildren():void {
                super.createChildren();
                
                previewRefreshBtn = new Button();
                previewRefreshBtn.label = "Refresh Preview";
                previewRefreshBtn.addEventListener(MouseEvent.CLICK, refreshPreview_handler);
                
                var spacer:Spacer = new Spacer();
                spacer.percentWidth = 100;

                ControlBar(controlBar).addChildAt(spacer, 0);
                ControlBar(controlBar).addChildAt(previewRefreshBtn, 0);
            }

            private function creationComplete_handler():void 
            {
                this.removeChild(showHelpBtn);
                ControlBar(controlBar).addChildAt(showHelpBtn, 1);

                radiusUomList.selectedItem = radiusUom;
                arcUomList.selectedItem = arcLengthUom;
                chordUomList.selectedItem = chordLengthUom;
                
                if (Model == null) {
                    sideList.selectedIndex = 0;
                    radiusTxt.text = "100";
                    deltaTxt.text = "90";
                }

                radiusTxt.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, refreshRadiusToolTip);
                arcLengthTxt.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, refreshArcLengthToolTip);
                chordLengthTxt.addEventListener(ToolTipEvent.TOOL_TIP_SHOW, refreshChordLengthToolTip);

                PopUpManager.centerPopUp(this);                
                callLater(refreshPreview);
            }

            private function refreshPreview_handler(event:MouseEvent):void {
                refreshPreview();
            }

            private function silentRefreshPreview():void {
                var params:ParamCollection = null;
                
                try {
                    params = parseForm();
                } catch (e:Error) {}

                if (params) {
                    drawCurveByParams(params);
                }
            }
            
            private function refreshPreview():void {
                var params:ParamCollection = getParameters();
                
                if (params) {
                    drawCurveByParams(params);
                }
            }
            
            override protected function getParameters():ParamCollection {
                var result:ParamCollection = null;
                
                try {
                    result = parseForm();
                } catch (e:Error) {
                    Alert.show(e.message);
                }
                
                return result;
            }
            
            private function parseForm():ParamCollection {
                validateForm();
                
                var result:ParamCollection = new ParamCollection();
                
				var radius:Number = radiusTxt.text.length > 0 ? Number(radiusTxt.text) : NaN;
				var delta:Angle = deltaTxt.length > 0 ? Angle.Parse(deltaTxt.text) : null;
				var chordLength:Number = chordLengthTxt.text.length > 0 ? Number(chordLengthTxt.text) : NaN;
				var chordBearing:GeoBearing = chordBearingTxt.text.length > 0 ? GeoBearing.Parse(chordBearingTxt.text) : null;
				var arcLength:Number = arcLengthTxt.text.length > 0 ? Number(arcLengthTxt.text) : NaN;

                if (tangentInV.validate().type == ValidationResultEvent.INVALID) {
                    throw new Error("Unable to create Curve. Tangent In Bearing is invalid");
                }
                
                if (isNaN(radius) && delta == null && chordBearing == null){
                    throw new Error("Unable to create curve. Radius (and|or) Delta (and|or) Chord Bearing must be specified. ");
                }

                if (isNaN(radius) && chordBearing == null && delta != null) {
                    if (isNaN(arcLength) && isNaN(chordLength)){
                        throw new Error("Unable to create Curve. Radius or Arc Length or Chord Length must be specified");
                    }

                    if (!isNaN(arcLength)) {
                        result.addItem(new ArcLengthParam(arcLength, UnitOfMeasure(arcUomList.selectedItem)));
                    } else {
                        result.addItem(new ChordLengthParam(chordLength, UnitOfMeasure(chordUomList.selectedItem)));
                    }
                    
                    result.addItem(new DeltaParam(delta));
                }
                else if (delta == null && chordBearing == null && !isNaN(radius)) {
                    if (isNaN(arcLength)) {
                        throw new Error("Unable to create Curve. Delta or Arc Length must be specified");
                    }
                    
                    if (36000/(5729/ radius) < arcLength) {
                        throw new Error("Arc Length is too big for current radius. The maximum possible value for current radius is " + 36000/(5729/ radius));
                    }
                    
                    result.addItem(new ArcLengthParam(arcLength, UnitOfMeasure(arcUomList.selectedItem)));
                    result.addItem(new RadiusParam(radius, UnitOfMeasure(radiusUomList.selectedItem)));
                }
                else if (isNaN(radius) && delta == null && chordBearing != null) {
                    if (isNaN(chordLength)) {
                        throw new Error("Unable to create Curve. Chord Length must be specified");
                    }
                    
                    result.addItem(new ChordLengthParam(chordLength, UnitOfMeasure(chordUomList.selectedItem)));
                    result.addItem(new ChordBearingParam(chordBearing));
                } else {
                    result.addItem(new RadiusParam(radius, UnitOfMeasure(radiusUomList.selectedItem)));
                    result.addItem(new DeltaParam(delta));
                }

                result.addItem(new TangentInBearingParam(GeoBearing.Parse(tangentInTxt.text)));
                result.addItem(new DirectionParam(sideList.selectedLabel == "L" ? "Left" : "Right"));

                return result;
            }

            private function drawCurveByParams(params:ParamCollection):void {

                var call:TractCall = new TractCall();
                call.CallDBValue = params.GetDBString();
                call.CallType = getType();
                
                var curve:GeoCurve = GeoCurve(CallViewFactory.Instance().GetCallGeoShape(call));

                curve.radius = (preview.width / 2) - 20;

            	var nStartingAngle:Number = (curve.radialIn.Azimuth + 180) * Math.PI / 180;
            	                
				var center:Point = new Point(preview.width / 2, preview.height / 2);
				
                var startPoint:Point = new Point (
                    center.x + (curve.radius * Math.sin(nStartingAngle)),
                    center.y - (curve.radius * Math.cos(nStartingAngle)));

				var deltaRadius:Number = 10;
				
				var deltaCurve:GeoCurve = new GeoCurve(deltaRadius, curve.delta, curve.tangentIn);
				deltaCurve.direction = curve.direction;
				
	            var deltaStartPoint:Point = new Point(
                    center.x + (deltaCurve.radius * Math.sin(nStartingAngle)),
                    center.y - (deltaCurve.radius * Math.cos(nStartingAngle)));

				preview.graphics.clear();

				//draw tangentIn
				drawTangentIn(curve.tangentIn, startPoint);

                //draw Curve
				preview.graphics.lineStyle(2, arcColor);
				var endPoint:Point = GraphicsUtil.drawArcEx(preview.graphics, startPoint, curve.tangentIn.Azimuth, 
                    curve.radius, curve.delta, curve.direction == GeoCurve.RIGHT);
				
				//draw radialIn
				preview.graphics.lineStyle(1, radiusColor);
				preview.graphics.moveTo(startPoint.x, startPoint.y);
				preview.graphics.lineTo(center.x, center.y);

				//draw radialOut
				preview.graphics.moveTo(endPoint.x, endPoint.y);
				preview.graphics.lineTo(center.x, center.y);

				//draw chord
				preview.graphics.lineStyle(1, chordColor, 1, true);
				preview.graphics.moveTo(startPoint.x, startPoint.y);
				preview.graphics.lineTo(endPoint.x, endPoint.y);

				//draw chordBearing
				drawChordBearing(curve.chord.bearing, endPoint);

				//fake rectangle to avoid bugs with filling 
				preview.graphics.drawRect(0,0,0,0);
				
				//draw start Point
				preview.graphics.beginFill(chordColor);
				preview.graphics.lineStyle(1);
				preview.graphics.drawRect(startPoint.x - 4, startPoint.y - 4, 8, 8);
				preview.graphics.endFill();

				//draw center Point
				preview.graphics.beginFill(0xffff00);
				preview.graphics.lineStyle(1);
				preview.graphics.drawRect(center.x - 4, center.y - 4, 8, 8);
				preview.graphics.endFill();
								
				//draw end Point
				preview.graphics.beginFill(0xff0000);
				preview.graphics.lineStyle(1);
				preview.graphics.drawRect(endPoint.x - 4, endPoint.y - 4, 8, 8);
				preview.graphics.endFill();
				
				//draw delta
				preview.graphics.lineStyle(1, deltaColor );
				
				GraphicsUtil.drawArcEx(preview.graphics, deltaStartPoint, deltaCurve.tangentIn.Azimuth, 
                    deltaCurve.radius, deltaCurve.delta, deltaCurve.direction == GeoCurve.RIGHT);
                    
				preview.graphics.endFill();
			}
			
			private function drawTangentIn(tangentIn:GeoBearing, startPoint:Point):void {
				var line:GeoLine = new GeoLine(tangentIn, 45);
				var reverseLine:GeoLine = new GeoLine( GeoBearing.CreateByAzimuth(tangentIn.Azimuth + 180), 45);
				var arrowPart1:GeoLine = new GeoLine(GeoBearing.CreateByAzimuth(tangentIn.Azimuth + 200), 7);
				var arrowPart2:GeoLine = new GeoLine(GeoBearing.CreateByAzimuth(tangentIn.Azimuth + 160), 7);
				
				preview.graphics.lineStyle(1, tangentInColor);

				//half of tangentIn				
				preview.graphics.moveTo(startPoint.x, startPoint.y);
				preview.graphics.lineTo(
					startPoint.x + line.endPosition.Easting, 
					startPoint.y - line.endPosition.Northing);

				//reverse half of tangentIn
				preview.graphics.moveTo(startPoint.x, startPoint.y);
				preview.graphics.lineTo(
					startPoint.x + reverseLine.endPosition.Easting, 
					startPoint.y - reverseLine.endPosition.Northing);

				startPoint = new Point(startPoint.x + line.endPosition.Easting, startPoint.y - line.endPosition.Northing + 1);
				
				//draw arrow
				preview.graphics.moveTo(startPoint.x, startPoint.y);
 				preview.graphics.lineTo(
					startPoint.x + arrowPart1.endPosition.Easting, 
					startPoint.y - arrowPart1.endPosition.Northing);

				//draw arrow
				preview.graphics.moveTo(startPoint.x+1, startPoint.y);				
				preview.graphics.lineTo(
					startPoint.x + arrowPart2.endPosition.Easting + 1, 
					startPoint.y - arrowPart2.endPosition.Northing);

			    preview.graphics.endFill();
			}

			private function drawChordBearing(chordBearing:GeoBearing, startPoint:Point):void {
				var line:GeoLine = new GeoLine(chordBearing, 20);
				var arrowPart1:GeoLine = new GeoLine(GeoBearing.CreateByAzimuth(chordBearing.Azimuth + 200), 7);
				var arrowPart2:GeoLine = new GeoLine(GeoBearing.CreateByAzimuth(chordBearing.Azimuth + 160), 7);
				
				preview.graphics.lineStyle(1, chordBearingColor);

				//half of tangentIn				
				preview.graphics.moveTo(startPoint.x, startPoint.y);
				preview.graphics.lineTo(
					startPoint.x + line.endPosition.Easting, 
					startPoint.y - line.endPosition.Northing);
 
				var endPoint:Point = new Point(startPoint.x + line.endPosition.Easting, startPoint.y - line.endPosition.Northing);
			
				//draw arrow
				preview.graphics.moveTo(endPoint.x, endPoint.y);
 				preview.graphics.lineTo(
					endPoint.x + arrowPart1.endPosition.Easting, 
					endPoint.y - arrowPart1.endPosition.Northing);

				//draw arrow
				preview.graphics.moveTo(endPoint.x+1, endPoint.y);				
				preview.graphics.lineTo(
					endPoint.x + arrowPart2.endPosition.Easting, 
					endPoint.y - arrowPart2.endPosition.Northing);

			    preview.graphics.endFill();
			}

            private function validateForm():void {
                var validationEvent:ValidationResultEvent;

                validationEvent = deltaV.validate();
                if (validationEvent.type == ValidationResultEvent.INVALID)
                    throw new Error("Delta validation error. " + validationEvent.message);

                validationEvent = radiusV.validate();
                if (validationEvent.type == ValidationResultEvent.INVALID)
                    throw new Error("Radius validation error. " + validationEvent.message);

                validationEvent = chordLengthV.validate();
                if (validationEvent.type == ValidationResultEvent.INVALID)
                    throw new Error("Chord Length validation error. " + validationEvent.message);

                validationEvent = chordBearingV.validate();
                if (validationEvent.type == ValidationResultEvent.INVALID)
                    throw new Error("Chord Bearing validation error. " + validationEvent.message);

                validationEvent = arcLengthV.validate();
                if (validationEvent.type == ValidationResultEvent.INVALID)
                    throw new Error("Arc Length validation error. " + validationEvent.message);
            }
            
            private function refreshRadiusToolTip(event:ToolTipEvent):void {
                if (radiusTxt.enabled) {
                    ToolTipManager.currentToolTip.text = "The Arc Radius";
                    return;
                }

                if (deltaTxt.text.length == 0 && chordLengthTxt.text.length > 0) {
                    ToolTipManager.currentToolTip.text = "Unable to create curve by Radius and Chord Length. Please remove Chord Length.";
                } else if (chordLengthTxt.text.length > 0) {
                    ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Chord Length.";
                } else {
                    ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Delta or Arc Length.";
                }
            }

            private function refreshArcLengthToolTip(event:ToolTipEvent):void {
                if (arcLengthTxt.enabled) {
                    ToolTipManager.currentToolTip.text = "The Arc Length";
                    return;
                }
                
                if (chordLengthTxt.text.length > 0 && radiusTxt.text.length == 0 && deltaTxt.text.length == 0) {
                    ToolTipManager.currentToolTip.text = "Unable to create curve by Arc Length and Chord Length. Please remove Chord Length.";
                } else if (chordLengthTxt.text.length > 0) {
                    ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Chord Length.";
                } else {
                    ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Radius or Delta.";
                }
            }

            private function refreshChordLengthToolTip(event:ToolTipEvent):void {
                if (chordLengthTxt.enabled) {
                    ToolTipManager.currentToolTip.text = "The Chord Length";
                    return;
                }

                if (arcLengthTxt.text.length > 0 && radiusTxt.text.length == 0 && deltaTxt.text.length == 0) {
                    ToolTipManager.currentToolTip.text = "Unable to create curve by Arc Length and Chord Length. Please remove Arc Length.";
                } else if (arcLengthTxt.text.length > 0) {
                    if (deltaTxt.text.length > 0){
                        ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Arc Length.";
                    } else {
                        ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Arc Length and Radius.";
                    }
                } else {
                    ToolTipManager.currentToolTip.text = "Curve is fully defined. Please remove Radius.";
                }
                
            }
            
            private function degreeInput_changeHandler(event:Event):void 
            {
            	var input:TextInput = event.currentTarget as TextInput;
            	
				input.text = input.text.replace("\u00b0", "*");
				input.text = input.text.replace("'", "*");
				input.text = input.text.replace("\"", "*");

				var gradFound:Boolean = false;
				var minFound:Boolean = false;
				var secFound:Boolean = false;

				var result:String = "";

				for ( var i:int=0; i < input.text.length; i++ ) {
					if (input.text.charAt(i) == "*" && !gradFound) {
						result += "\u00b0";
						gradFound = true;
					} else if (input.text.charAt(i) == "*" && !minFound) {
						result += "'";
						minFound = true;
					} else if (input.text.charAt(i) == "*" && !secFound) {
						result += "\"";
						secFound = true;
					} else {
						result += input.text.charAt(i);
					}
				}
				
				input.text = result;
            }
            
        ]]>
    </mx:Script>

    <mx:NumberValidator id="radiusV" source="{radiusTxt}" property="text" required="false" allowNegative="false" />
    <mx:NumberValidator id="chordLengthV" source="{chordLengthTxt}" property="text" required="false" allowNegative="false"/>
    <mx:NumberValidator id="arcLengthV" source="{arcLengthTxt}" property="text" required="false" allowNegative="false"/>
    
    <validators:AngleValidator id="deltaV" source="{deltaTxt}" property="text" required="false"/>
    <validators:GeoBearingValidator id="tangentInV" source="{tangentInTxt}" property="text" required="true" />
    <validators:GeoBearingValidator id="chordBearingV" source="{chordBearingTxt}" property="text" required="false" />
    
    <subComponents>
        <mx:VBox verticalGap="3">
            
        	<mx:HBox verticalAlign="top" horizontalGap="3">

    		    <mx:Canvas backgroundColor="#FFFFFF" backgroundAlpha="0.54" borderStyle="solid">
    		        <mx:Canvas id="preview" height="{paramForm.height}" width="150"/>
    		        <mx:Label text="Preview" fontWeight="bold" x="3" y="3"/>
    		    </mx:Canvas>

        		<mx:Grid id="paramForm" verticalGap="3" horizontalGap="3">

        			<mx:GridRow verticalAlign="middle">

        				<mx:GridItem width="20">
        					<mx:Spacer/>
        				</mx:GridItem>
        				<mx:GridItem>
        					<mx:Label text="Side"/>
        				</mx:GridItem>
        				<mx:GridItem>
        					<components:ExtendedComboBox id="sideList" 
        					    keepOptimalDropDownWidth="true" width="100" 
								enabled="{!(chordBearingTxt.text.length > 0)}"
        					    change="silentRefreshPreview()">

        						<mx:Array>
        							<mx:Object id="clockwise" label="R"/>
        							<mx:Object id="counterclockwise" label="L"/>
        						</mx:Array>

        					</components:ExtendedComboBox>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow verticalAlign="middle">
        				<mx:GridItem backgroundColor="{tangentInColor}"/>
        				<mx:GridItem>
        					<mx:Label text="TanIn"/>
        				</mx:GridItem>
        				<mx:GridItem>
        					<mx:TextInput id="tangentInTxt"
			                	change="degreeInput_changeHandler(event)"
        					    width="100" text="{TangentInBearing.toString()}" 
        					    focusOut="silentRefreshPreview()"/>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow>
        				<mx:GridItem backgroundColor="{deltaColor}"/>
        				<mx:GridItem>
        					<mx:Label text="Delta" enabled="{deltaTxt.enabled}" />
        				</mx:GridItem>
        				<mx:GridItem>
        					<mx:TextInput id="deltaTxt" 
        					    width="100"
			                	change="degreeInput_changeHandler(event)"
        					    toolTip="{deltaTxt.enabled ? null : 'Curve is fully defined. Please remove Radius or Arc length'}"
        					    focusOut="silentRefreshPreview()"
        					    enabled="{!(radiusTxt.text.length > 0 &amp;&amp; arcLengthTxt.text.length > 0 || chordBearingTxt.text.length > 0)}"/>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow verticalAlign="middle">
        				<mx:GridItem backgroundColor="{radiusColor}">
        				</mx:GridItem>
        				<mx:GridItem>
        					<mx:Label text="R" enabled="{radiusTxt.enabled}" toolTip="Radius"/>
        				</mx:GridItem>
        				<mx:GridItem >
        				    <mx:HBox horizontalGap="3" >
            					<mx:TextInput id="radiusTxt"
            					    toolTip="The Arc Radius" width="100"
            					    focusOut="silentRefreshPreview()"
            					    enabled="{!((chordLengthTxt.text.length > 0 || chordBearingTxt.text.length > 0) || (deltaTxt.text.length > 0 &amp;&amp; arcLengthTxt.text.length > 0))}"
            					    />
                                <components:ExtendedComboBox id="radiusUomList" 
                                    labelField="Name" showDataTips="true" 
                                    keepOptimalDropDownWidth="true"
                                    width="75" enabled="{radiusTxt.enabled}"
                                    dataProvider="{UOMUtil.Instance().UnitList}" enter="commit()"/>
                            </mx:HBox>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow>
        				<mx:GridItem backgroundColor="{chordColor}"/>
        				<mx:GridItem>
        					<mx:Label text="Ch Ln" enabled="{chordLengthTxt.enabled}" toolTip="Chord Length"/>
        				</mx:GridItem>
        				<mx:GridItem>
        				    <mx:HBox horizontalGap="3" >        				
            					<mx:TextInput id="chordLengthTxt" width="100"
            					    toolTip="Chord Length"
            					    focusOut="silentRefreshPreview()"
            					    enabled="{radiusTxt.text.length == 0 &amp;&amp; arcLengthTxt.text.length == 0}"
            					    />
                                <components:ExtendedComboBox id="chordUomList" 
                                    labelField="Name" width="75" showDataTips="true"
                                    keepOptimalDropDownWidth="true"
                                    enabled="{chordLengthTxt.enabled}"
                                    dataProvider="{UOMUtil.Instance().UnitList}" enter="commit()"/>
                            </mx:HBox>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow>
        				<mx:GridItem backgroundColor="{chordBearingColor}"/>
        				<mx:GridItem>
        					<mx:Label text="ChBrng" enabled="{chordBearingTxt.enabled}" toolTip="Chord Bearing"/>
        				</mx:GridItem>
        				<mx:GridItem>
        				    <mx:HBox horizontalGap="3" >        				
            					<mx:TextInput id="chordBearingTxt" width="100"
            					    toolTip="Chord Bearing"
				                	change="degreeInput_changeHandler(event)"
            					    focusOut="silentRefreshPreview()"
            					    enabled="{radiusTxt.text.length == 0 &amp;&amp; deltaTxt.text.length == 0 &amp;&amp; arcLengthTxt.text.length == 0 }"
            					    />
                            </mx:HBox>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        			<mx:GridRow>
        				<mx:GridItem backgroundColor="{arcColor}"/>
        				<mx:GridItem>
        					<mx:Label text="Arc Ln" enabled="{arcLengthTxt.enabled}" toolTip="Arc Length"/>
        				</mx:GridItem>
        				<mx:GridItem>
        				    <mx:HBox horizontalGap="3" >
            					<mx:TextInput id="arcLengthTxt"
            					    toolTip="Arc Length" width="100"
            					    focusOut="silentRefreshPreview()"
            					    enabled="{chordLengthTxt.text.length == 0 &amp;&amp; chordBearingTxt.text.length == 0 &amp;&amp; (deltaTxt.text.length == 0 || radiusTxt.text.length == 0)}"
            					    />
                                <components:ExtendedComboBox id="arcUomList" 
                                    labelField="Name" showDataTips="true"
                                    enabled="{arcLengthTxt.enabled}" width="75"
                                    keepOptimalDropDownWidth="true"
                                    dataProvider="{UOMUtil.Instance().UnitList}" enter="commit()"/>
        				    </mx:HBox>
        				</mx:GridItem>
        			</mx:GridRow>
        			
        		</mx:Grid>
        		
        	</mx:HBox>

        	<mx:VBox id="helpBox" width="100%"
        	    visible="false" includeInLayout="false"
        	    horizontalScrollPolicy="off" backgroundAlpha="0.5"
        	    height="0" borderStyle="solid" backgroundColor="#fdfcdf" borderColor="#FFCC00">

            	<mx:Text condenseWhite="true" paddingTop="5" paddingBottom="5" paddingLeft="5" 
            	    paddingRight="5" selectable="false">
            	    <mx:htmlText>
            	        <![CDATA[
            	            <b>CURVE DIRECTION</b>. The direction of the curve along its arc.<br>
            	                <i>"Right"</i> means the clock-wise, <i>"Left"</i> - counterclock-wise directions.
            	            <br><br>
                            <b>TANGENT BEARING</b>. The bearing of the line that is tangent to the <br>
                               curve at the curve starting point.
                            <br><br>
                            <b>DELTA (CENTRAL ANGLE)</b>. The central angle is the angle formed by <br> 
                                two radii drawn from center of the circle to the curve starting point and <br>
                                to the curve ending point. It cannot be bigger than 360.
                            <br><br>
                            <b>RADIUS</b>. The radius of the circle of which the curve is an arc. <br>
                                The radius is always perpendicular to back and forward tangents.
                            <br><br>
                            <b>ARC LENGTH</b>. The Arc Length is the distance from curve starting point <br>
                                to curve ending point, measured along the curve. <br> 
                                The max Arc Length must be calculated by formula: <br>
                                <i>A max = 100 * 360 / (5729 / Radius)</i>
                            <br><br>
                            <b>СHORD LENGTH</b>. The straight-line distance from the Start Point to <br>
                                the End Point. The chord length can not be bigger than double radius.
                            <br><br>
                            <b>CHORD BEARING</b>. The bearing of straight-line from the Start Point <br>
                                to the End Point.
                            <br>
                        ]]>
            	    </mx:htmlText>
            	</mx:Text>
            	
        	</mx:VBox>

        </mx:VBox>

	    <mx:Button id="showHelpBtn" icon="@Embed(source='/assets/alert.png')"
	        label="Show Help" click="currentState = 'showHelp'"/>
        
    </subComponents>
</CallPropertiesView>
