<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
    title="File" layout="vertical" 
    xmlns:net="flash.net.*"     
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:steps="truetract.web.wizards.steps.*"
    xmlns:editTractWizard="truetract.web.wizards.editTractWizard.*"
    xmlns:wizard="truetract.web.util.wizard.*" 
    xmlns:tractEditor="truetract.web.dashboard.documentPanel.tractEditor.*"    
    xmlns:validators="truetract.plotter.validators.*"
    creationComplete="onCreateHandler()">

    <mx:Metadata>
        [Event(name="commit", type="flash.events.Event")]
        [Event(name="cancel", type="flash.events.Event")]
    </mx:Metadata>

    <mx:Script>
        <![CDATA[
            import truetract.domain.IFileAttachment;
            import truetract.domain.mementos.ProjectAttachmentMemento;
            import truetract.web.util.TokenResponder;
            import truetract.web.AppModel;
            import truetract.domain.File;
            import truetract.domain.DictionaryRegistry;
            import truetract.domain.DocumentAttachment;
            import truetract.domain.Tract;
            import truetract.web.AppController;

            import mx.events.DynamicEvent;
            import mx.collections.ArrayCollection;
            import mx.controls.Alert;
            import mx.managers.PopUpManager;
            import mx.rpc.AsyncToken;
            import mx.rpc.Responder;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;

            public static function open(parent:DisplayObject, modal:Boolean = false):FileAttachmentEditor
            {
                var dialog:FileAttachmentEditor = new FileAttachmentEditor();
                
                PopUpManager.addPopUp(dialog, parent, modal);
                PopUpManager.centerPopUp(dialog);

                return dialog;
            }

            [Bindable] private var file:File;
            private var isNewAttachment:Boolean = false;

            private var _attachment:IFileAttachment;
            [Bindable] public function get attachment():IFileAttachment { return _attachment };
            public function set attachment(value:IFileAttachment):void
            {
                _attachment = value;

                if (null == attachment.file)
                {
//                    fr.browse();
                    attachment.file = new File();
                    isNewAttachment = true;
                } else {
	                uploaded = true;
                }

                file = attachment.file;
            }
            
            [Bindable] public var showAttachmentTypes:Boolean = true;
            [Bindable] public var attachmentTypes:XML;

            [Bindable] public var uploadInProgress:Boolean = false;
            [Bindable] public var uploaded:Boolean = false;
            [Bindable] public var isFileSelected:Boolean = false;

            public var uploadID:String = "myupload-" + new Date().time;

            public function close():void 
            {
                this.setStyle("footerColors", null); //bug workarround
                PopUpManager.removePopUp(this);
            }

            private function onCreateHandler():void 
            {
            	focusManager.setFocus(descriptionTxt);
            }
            
            private function cancelButton_clickHandler():void
            {
                dispatchEvent(new Event("cancel"));
                close();
            }

            private function isFormValid():Boolean
            {
                return formValidator.validate(true);
            }

            private function okButton_clickHandler():void
            {
                if (!isFormValid()) return;

                attachment.file.FileName = fileNameLabel.text;
                attachment.file.Description = descriptionTxt.text;
                attachment.file.Created = new Date();
                attachment.file.CreatedBy = AppModel.getInstance().user.UserId;
                attachment.attachmentTypeId = typeCmb.selectedItem.@Id;

                dispatchEvent(new Event("commit"));
            }

            private function fr_selectHandler(event:Event):void
            {
            	if (fr.name.toUpperCase().indexOf(".PDF") != (fr.name.length - 4)) 
            	{
            		Alert.show("Only pdf files are supported !");
            		return;
            	}
            	
                fileNameLabel.text = fr.name;

                var urlRequest:URLRequest = new URLRequest("weborb.aspx");
                var variables:URLVariables = new URLVariables();
                variables.UPLOADID = uploadID;
                urlRequest.data = variables;
                fr.upload(urlRequest);
                
                isFileSelected = true;
                uploadInProgress = true;
                uploaded = false;
            }

            private function fr_cancelHandler():void
            {
                close();
            }                       

            private function fr_completeHandler():void
            {
                uploadInProgress = false;
                pb.label = "UPLOADED";
                uploaded = true;
            }                       

            private function fr_progressHandler(event:ProgressEvent):void
            {
                pb.setProgress(event.bytesLoaded, event.bytesTotal);
            }                       

            private function fr_ioErrorHandler(event:IOErrorEvent):void
            {
                uploadInProgress = false;
                Alert.show("Unable to upload file.", event.text);
            }
            
            private function selectButton_clickHandler():void
            {
            	
				var pdfFilter:FileFilter = new FileFilter("PDF Documents", "*.pdf");
                fr.browse([pdfFilter]);
            }

        ]]>
    </mx:Script>

    <net:FileReference id="fr" 
        select="fr_selectHandler(event)" 
        complete="fr_completeHandler()"
        progress="fr_progressHandler(event)"
        ioError="fr_ioErrorHandler(event)"
        cancel="fr_cancelHandler()"/>

    <validators:ValidatorsGroup id="formValidator">

        <mx:StringValidator
            source="{fileNameLabel}" property="text" required="true"/>

        <mx:StringValidator
            source="{descriptionTxt}" property="text" required="true"/>

        <mx:StringValidator
            source="{typeCmb}" property="selectedLabel" required="true"/>
    </validators:ValidatorsGroup>

    <mx:Form styleName="popupPanel">

        <mx:FormItem label="Description :" width="100%" labelWidth="100" required="true">
            <mx:TextInput id="descriptionTxt" 
                text="{file.Description}" width="100%"/>
        </mx:FormItem>

        <mx:FormItem label="Type :" width="100%" labelWidth="100">
            <mx:ComboBox id="typeCmb" 
                enabled="{showAttachmentTypes}"
                dataProvider="{attachmentTypes.AttachmentType}"
                selectedItem="{attachmentTypes.AttachmentType.(@Id == attachment.attachmentTypeId)}"
                labelField="@Name" width="100%"/>
        </mx:FormItem>

        <mx:FormItem id="fileFormItem" label="File:" width="100%" labelWidth="100">
            <mx:HBox width="100%">
                <mx:Label id="fileNameLabel" text="{file.FileName}" width="100%"/>
                <mx:Button label=".." width="20" height="20" 
                	click="selectButton_clickHandler()"
                	enabled="{typeCmb.selectedItem &amp;&amp; descriptionTxt.text.length > 0 &amp;&amp; !uploadInProgress}"/>
            </mx:HBox>
        </mx:FormItem>

        <mx:HBox width="100%" visible="{isFileSelected}" includeInLayout="{isFileSelected}">
            <mx:Spacer width="100"/>
            <mx:ProgressBar id="pb" 
                width="100%" label="{uploadInProgress ? 'UPLOADING 0%' : ''}" mode="manual"/>
        </mx:HBox>

    </mx:Form>

    <mx:ControlBar horizontalAlign="right">

        <mx:Button id="btnOk"
            label="Ok"
            click="okButton_clickHandler()" 
            enabled="{uploaded &amp;&amp; typeCmb.selectedIndex > 0 &amp;&amp; descriptionTxt.text.length > 0}"/>

        <mx:Button id="btnCancel"
            label="Cancel" 
            click="cancelButton_clickHandler()"/>
    </mx:ControlBar>

</mx:TitleWindow>
