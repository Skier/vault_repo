<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="tractIncClientApp.project.tab.IProjectTabUI"
    rollOver="rollOverHandler(event)"
    rollOut="rollOutHandler(event)"
    mouseDown="mouseDownHandler(event)"
    mouseMove="mouseMoveHandler(event)"
    mouseUp="mouseUpHandler(event)"
    dragEnter="dragEnterHandler(event)"
    dragDrop="dragDropHandler(event)"
	>

    <mx:Metadata>
        [Event(name="deleteProjectTab", type="mx.events.DynamicEvent")]
        [Event(name="dragStart", type="mx.events.DragEvent")]
    </mx:Metadata>

	<mx:Script>
		<![CDATA[
			import truetract.domain.Project;
			import mx.core.IUIComponent;
			import mx.managers.DragManager;
			import mx.controls.Alert;
			import mx.events.DragEvent;
			import mx.events.DynamicEvent;
			import mx.effects.Resize;
			import truetract.domain.ProjectTab;
			
        	[Embed(source="/assets/tab_folder.png")]
        	[Bindable]
        	private var imgTabNormal:Class;
			
        	[Embed(source="/assets/tab_folder_warning.png")]
        	[Bindable]
        	private var imgTabWarning:Class;
			
			[Bindable] public var readOnly:Boolean = false;
			
			[Bindable] private var _selected:Boolean = false;;
            [Bindable] public function set selected(value:Boolean):void { _selected = value; };
            		   public function get selected():Boolean { return _selected; };

            [Bindable] private var _projectTab:ProjectTab;
            [Bindable] public function set projectTab(value:ProjectTab):void { _projectTab = value; };
            		   public function get projectTab():ProjectTab { return _projectTab; };
            
            private function btnDeleteClickHandler():void 
            {
            	var event:DynamicEvent = new DynamicEvent("deleteProjectTab");
            	event.projectTab = projectTab;
            	
            	dispatchEvent(event);
            }

	        private function rollOverHandler(event:MouseEvent):void
	        {
	            boxContent.setStyle("borderColor", "#cccccc");
	            boxContent.setStyle("shadowDistance", 2);
	        }
	
	        private function rollOutHandler(event:MouseEvent):void
	        {
	            boxContent.setStyle("borderColor", "#999999");
	            boxContent.setStyle("shadowDistance", 1);
	        }
	
	        private var dragStartPoint:Point;
	
	        public function mouseDownHandler(event:MouseEvent):void
	        {
	        	if (readOnly)
	        		return;
	        		
	            if (event.target != deleteTabButton)
	            {
	                dragStartPoint = new Point(event.stageX, event.stageY);
	                dragStartPoint = globalToLocal(dragStartPoint);
	            }
	        }
	
	        public function mouseMoveHandler(event:MouseEvent):void
	        {
	        	if (readOnly)
	        		return;
	        		
	            if (dragStartPoint != null)
	            {
	                var dragEvent:DragEvent = new DragEvent(DragEvent.DRAG_START, true);
	                dragEvent.localX = dragStartPoint.x;
	                dragEvent.localY = dragStartPoint.y;
	                dragEvent.buttonDown = true;
	                dispatchEvent(dragEvent);
	
	                rollOutHandler(event);
	
	                dragStartPoint = null;
	            }
	        }
	
	        public function mouseUpHandler(event:MouseEvent):void
	        {
	        	if (readOnly)
	        		return;
	        		
	            if (dragStartPoint != null)
	            {
	                dragStartPoint = null;
	            }
	        }
	        
	        private function dragEnterHandler(event:DragEvent):void
	        {
	        	if (readOnly)
	        		return;
	        		
	            if (event.dragSource.hasFormat("projectTab"))
	            {
	                DragManager.acceptDragDrop(IUIComponent(event.target));
                    DragManager.showFeedback(DragManager.MOVE);
	            }
	        }
	
	        private function dragDropHandler(event:DragEvent):void
	        {
	        	if (readOnly)
	        		return;
	        		
	            var draggedTab:ProjectTab = event.dragSource.dataForFormat("projectTab") as ProjectTab;
	            var droppedTab:ProjectTab = projectTab;
	            
	            if (draggedTab.ProjectId != droppedTab.ProjectId) 
	            {
	            	Alert.show("You can not drag-n-drop tabs from one project to another!");
	            	return;
	            }
	            
	            var project:Project = draggedTab.ProjectRef;
	            
	            var draggedIndex:int = project.TabsList.getItemIndex(draggedTab);
	            var droppedIndex:int = project.TabsList.getItemIndex(droppedTab);
	            
	            project.TabsList.removeItemAt(draggedIndex);
	            
	            project.TabsList.addItemAt(draggedTab, droppedIndex);
	        }  
	 
	
		]]>
	</mx:Script>
		
	<mx:VBox id="boxContent"
		width="76" height="76" 
		verticalAlign="middle" horizontalAlign="center"
		horizontalScrollPolicy="off" verticalScrollPolicy="off"
		paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2"
		backgroundColor="{selected ? 0xffffcc : 0xffffff}"
		borderColor="#999999" borderStyle="solid" cornerRadius="2"
		dropShadowEnabled="true" shadowDirection="right" shadowDistance="1">
 		<mx:Image id="imgTab"
 			source="{(projectTab.ActiveTabDocument == null || projectTab.ContactsList.length == 0) ? imgTabWarning : imgTabNormal}" 
 			width="48" height="48"
 			toolTip="{(imgTab.source == imgTabWarning) ? 'Tab is incomplete. See detail information' : null}"/>

		<mx:Label width="100%" minWidth="48" 
			text="{projectTab.Name}" textAlign="center" fontSize="9"/>
	</mx:VBox>
	
	<mx:HBox horizontalAlign="right" verticalAlign="top"
		width="100%"
		paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
		<mx:Label text="{projectTab.TabOrder + 1}" 
			color="{(projectTab.ProjectRef.TabsList.getItemIndex(projectTab) == projectTab.TabOrder) ? 0x999999 : 0xcc6666}"/>

		<mx:Spacer width="100%"/>

	    <mx:Button id="deleteTabButton"
	    	visible="{selected &amp;&amp; !readOnly}"
	        icon="@Embed(source='/assets/delete2.png')" height="20" width="20"
	        styleName="toolButton" toolTip="Delete Tab"
	        click="btnDeleteClickHandler()"/>
	</mx:HBox>
</mx:Canvas>

