<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    layout="vertical" title="Client" 
    xmlns:validators="TractInc.SDK.validators.*"
    creationComplete="init();"
    minWidth="500">

    <mx:Script>
        <![CDATA[
            import mx.collections.ArrayCollection;
            import mx.controls.CheckBox;
            import mx.controls.Label;
            import mx.controls.Alert;
        	import mx.rpc.Responder;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            import mx.managers.PopUpManager;

        	import TractInc.Domain.Client;
        	import TractInc.Domain.Company;
            
            [Bindable]
            private var canEdit:Boolean = false;
            private var controller:ClientController = null;
            private var currentClient:Client = null;
//            private var checkBoxes:Array = new Array();
                
            public static function open(ctrl:ClientController, client:Client, modal:Boolean):EditView
            {
                var popup:EditView = new EditView();
                popup.postCreate(ctrl, client);
                
                PopUpManager.addPopUp(popup, ctrl.view, modal);
                PopUpManager.centerPopUp(popup);
                
                return popup;
            }

            public function postCreate(ctrl:ClientController, client:Client):void
            {
                controller = ctrl;
                currentClient = client;
            }
            
            public function init():void
            {
                canEdit = true; //controller.model.userManagerPackage.canManageUsers;
                
                var la:ArrayCollection = new ArrayCollection();
                var ra:ArrayCollection = new ArrayCollection();
                this.leftDataGrid.dataProvider = la;
                this.rightDataGrid.dataProvider = ra;
                for each (var c:Company in controller.parentController.model.companyList) {
/*                    
                    var box:CheckBox = new CheckBox();
                    box.label = c.CompanyName;
                    box.selected = isCompanySelected(c);
                    box.data = c;
                    checkBoxes.push(box);
                    checkList.addChild(box);
*/                    
                    if ( isCompanySelected(c) ) {
                        ra.addItem(c);
                    } else {
                        la.addItem(c);
                    }
                }
                
                if ( null != currentClient ) {
                    this.txtClientName.text = currentClient.ClientName;
                    this.txtClientAddress.text = currentClient.ClientAddress;
                } else {
                    currentClient = new Client();
                }
            }
            
            public function getClient():Client
            {
                currentClient.ClientName = this.txtClientName.text;
                currentClient.ClientAddress = this.txtClientAddress.text;

                currentClient.CompanyList = new Array();
/*                
                for each (var box:CheckBox in checkBoxes) {
                    if ( box.selected ) {
                        currentClient.CompanyList.push(box.data);
                    }
                }
*/                
                for each (var c:Company in rightDataGrid.dataProvider) {
                    currentClient.CompanyList.push(c);
                }
                return currentClient;
            }

            public function close():void
            {
                PopUpManager.removePopUp(this);
            }
            
            private function commit():void
            {
                if ( !formValidator.validate(true) ) {
                    return;
                }
                controller.saveClient(getClient());
            }
            
            private function isCompanySelected(company:Company):Boolean
            {
                if ( null != currentClient ) {
                    for each (var c:Company in currentClient.CompanyList) {
                        if ( company.CompanyId == c.CompanyId ) {
                            return true;
                        }
                    }
                }
                return false;
            }    
/*            
            private function checkAllBoxOnClickHandler(event:Event):void
            {
                for each (var box:CheckBox in checkBoxes) {
                    box.selected = true;
                }
                checkAllBox.selected = false;
            }
            
            private function uncheckAllBoxOnClickHandler(event:Event):void
            {
                for each (var box:CheckBox in checkBoxes) {
                    box.selected = false;
                }
                uncheckAllBox.selected = false;
            }
*/            
            private function addAllOnClickHandler(event:Event):void
            {
                for each(var c:Company in this.leftDataGrid.dataProvider) {
                    (this.rightDataGrid.dataProvider as ArrayCollection).addItem(c);
                }
                (this.leftDataGrid.dataProvider as ArrayCollection).removeAll();
            }
            
            private function addOneOnClickHandler(event:Event):void
            {
                if ( null != leftDataGrid.selectedItem ) {
                    (rightDataGrid.dataProvider as ArrayCollection).addItem(
                            leftDataGrid.selectedItem);
                    (leftDataGrid.dataProvider as ArrayCollection).removeItemAt(
                            leftDataGrid.selectedIndex);
                }
            }
            
            private function removeAllOnClickHandler(event:Event):void
            {
                for each(var c:Company in this.rightDataGrid.dataProvider) {
                    (this.leftDataGrid.dataProvider as ArrayCollection).addItem(c);
                }
                (this.rightDataGrid.dataProvider as ArrayCollection).removeAll();
            }
            
            private function removeOneOnClickHandler(event:Event):void
            {
                if ( null != rightDataGrid.selectedItem ) {
                    (leftDataGrid.dataProvider as ArrayCollection).addItem(
                            rightDataGrid.selectedItem);
                    (rightDataGrid.dataProvider as ArrayCollection).removeItemAt(
                            rightDataGrid.selectedIndex);
                }
            }
            
        ]]>
    </mx:Script>

    <validators:ValidatorsGroup id="formValidator">
        <mx:StringValidator source="{txtClientName}" property="text" required="true"/>
        <mx:StringValidator source="{txtClientAddress}" property="text" required="true"/>
    </validators:ValidatorsGroup>
    
    <mx:Form id="mainForm" enabled="{canEdit}" 
        borderColor="#000000"
        backgroundColor="#ffffff" 
        paddingBottom="20" paddingLeft="20" paddingRight="20" paddingTop="20"
        width="100%">

        <mx:FormItem label="Name" width="100%" required="true">
            <mx:TextInput id="txtClientName" width="100%"/>
        </mx:FormItem>
        <mx:FormItem label="Address" width="100%">
            <mx:TextArea id="txtClientAddress" height="80" width="100%"/>
        </mx:FormItem>

        <mx:FormItem label="Companies" width="100%">
            <mx:HBox width="100%" height="100%">
                <mx:VBox>
                <mx:Label text="Avail Companies"/>
                <mx:DataGrid id="leftDataGrid" width="100%" height="100%">
                    <mx:columns>
                        <mx:DataGridColumn headerText="Id" width="20" dataField="CompanyId"/>
                        <mx:DataGridColumn headerText="Name" width="85" dataField="CompanyName"/>
                    </mx:columns>
                </mx:DataGrid>
                </mx:VBox>
                <mx:VBox height="100%">
		            <mx:Spacer height="40"/>
                    <mx:Button label="&gt;&gt;" click="addAllOnClickHandler(event)"/>
                    <mx:Button label="&gt;" click="addOneOnClickHandler(event)"/>
		            <mx:Spacer height="100%"/>
                    <mx:Button label="&lt;" click="removeOneOnClickHandler(event)"/>
                    <mx:Button label="&lt;&lt;" click="removeAllOnClickHandler(event)"/>
                </mx:VBox>
                <mx:VBox>
                <mx:Label text="Current Companies"/>
                <mx:DataGrid id="rightDataGrid" width="100%" height="100%">
                    <mx:columns>
                        <mx:DataGridColumn headerText="Id" width="20" dataField="CompanyId"/>
                        <mx:DataGridColumn headerText="Name" width="85" dataField="CompanyName"/>
                    </mx:columns>
                </mx:DataGrid>
                </mx:VBox>
            </mx:HBox>
        </mx:FormItem>

<!--    
        <mx:VBox width="100%">
            <mx:HBox width="100%" horizontalAlign="center">
                <mx:CheckBox id="checkAllBox" label="Check All" click="checkAllBoxOnClickHandler(event)"/>    
                <mx:CheckBox id="uncheckAllBox" label="Uncheck All" click="uncheckAllBoxOnClickHandler(event)"/>    
            </mx:HBox>
            <mx:VBox id="checkList">
            </mx:VBox>
        </mx:VBox>
-->        
    </mx:Form>
            
    <mx:ControlBar horizontalAlign="right">
        <mx:Button label="Save" click="commit()" enabled="{canEdit}"/>
        <mx:Button label="Cancel" click="close()"/>
    </mx:ControlBar>
    
</mx:TitleWindow>
