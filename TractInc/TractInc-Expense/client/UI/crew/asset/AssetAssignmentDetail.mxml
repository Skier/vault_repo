<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical"
	creationComplete="onCreationComplete()"
    title="Create Assignment"
    >

    <mx:Script>
        <![CDATA[
        	import mx.collections.ListCollectionView;
        	import mx.controls.Alert;
        	import App.Entity.AFEDataObject;
        	import App.Entity.ClientDataObject;
        	import App.Entity.AssetAssignmentDataObject;
        	import mx.events.PropertyChangeEvent;
        	import mx.events.DynamicEvent;
        	import mx.events.CollectionEvent;
        	import mx.binding.utils.ChangeWatcher;
        	import mx.controls.dataGridClasses.DataGridColumn;
            import mx.collections.ArrayCollection;
            import mx.managers.PopUpManager;

            [Bindable]
            public var assetAssignment:AssetAssignmentDataObject;
            
            [Bindable]
            private var model:AssetsModel;
            
            public static function Open(assetAssignment:AssetAssignmentDataObject, parent:DisplayObject, model:AssetsModel):AssetAssignmentDetail 
            {
                var popup:AssetAssignmentDetail = new AssetAssignmentDetail();
                popup.assetAssignment = assetAssignment;
                popup.model = model;
                popup.model.clients = new ArrayCollection(popup.model.data.Clients);
                popup.model.clients.filterFunction = function(obj:Object):Boolean {
                	var client:ClientDataObject = ClientDataObject(obj);
                	return !client.Deleted
                		&& client.Active
                		&& (null != model.afesByClient[client.ClientId]);
                }
                popup.model.clients.refresh();

                PopUpManager.addPopUp(popup, parent, true);
                PopUpManager.centerPopUp(popup);

                return popup;
            }
            
            private function onCreationComplete():void {
           		PopUpManager.centerPopUp(this);
            }
            
            private function onClientChanged():void {
       			if (null == model.afesByClient[ClientDataObject(cbClients.selectedItem).ClientId]) {
       				return;
       			}
       			
       			var afes:ArrayCollection = new ArrayCollection(ArrayCollection(model.afesByClient[ClientDataObject(cbClients.selectedItem).ClientId]).toArray());
       			afes.filterFunction = function(obj:Object):Boolean {
       				var hasNotAssigned:Boolean = false;
           			for each (var project:String in ArrayCollection(model.projectsByAfe[obj])) {
           				var isAssigned:Boolean = false;
            			for each (var assignment:AssetAssignmentDataObject in ListCollectionView(model.projectsByAsset[assetAssignment.AssetId])) {
            				if (assignment.Deleted) {
            					continue;
            				}
            				
            				if (assignment.SubAFE == project) {
            					isAssigned = true;
            					break;
            				}
            			}
            			if (!isAssigned) {
            				hasNotAssigned = true;
            				break;
            			}
           			}
           			return hasNotAssigned;
       			}
       			afes.refresh();
       			
            	cbAfes.dataProvider = afes;
            	cbSubAfes.dataProvider = null;
            }
            
            private function onAfeChanged():void {
            	var projects:ArrayCollection = new ArrayCollection(ArrayCollection(model.projectsByAfe[cbAfes.selectedItem]).toArray());
            	projects.filterFunction = function(obj:Object):Boolean {
            		for each (var assignment:AssetAssignmentDataObject in ListCollectionView(model.projectsByAsset[assetAssignment.AssetId])) {
            			if (assignment.Deleted) {
            				continue;
            			}
            			
            			if ((assignment.AFE == String(cbAfes.selectedItem))
            					&& (assignment.SubAFE == String(obj))) {
            				return false;
            			}
            		}
            		return true;
            	};
            	projects.refresh();
            	cbSubAfes.dataProvider = projects;
            }
            
        ]]>
    </mx:Script>
    
    <mx:VBox width="100%">
        <mx:HBox>
            <mx:Label text="Client:" width="90" textAlign="right"/>
            <mx:ComboBox
            	id="cbClients"
            	width="200"
            	labelField="ClientName"
                dataProvider="{model.clients}"
                change="onClientChanged()"
                prompt=" "
                />
        </mx:HBox>
        
        <mx:HRule width="100%"/>
        
        <mx:HBox>
            <mx:Label text="AFE:" width="90" textAlign="right"/>
            <mx:ComboBox
            	id="cbAfes"
            	width="200"
            	labelField="AFEName"
            	change="onAfeChanged()"
                prompt=" "
                />
        </mx:HBox>
        <mx:HBox>
            <mx:Label text="Project:" width="90" textAlign="right"/>
            <mx:ComboBox
            	id="cbSubAfes"
            	width="250"
            	labelField="SubAFE"
                prompt=" "
                />
        </mx:HBox>
    </mx:VBox>
    
    <mx:HRule width="100%"/>
    
    <mx:HBox width="100%" horizontalAlign="right">
        <mx:Button
        	id="btnSubmit"
        	label="Ok"
            enabled="{cbSubAfes.selectedItem != null}"/>
        <mx:Button
        	id="btnCancel"
        	label="Cancel"/>
    </mx:HBox>
    
</mx:TitleWindow>
