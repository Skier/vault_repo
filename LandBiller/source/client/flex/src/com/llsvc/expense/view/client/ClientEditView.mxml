<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" 
	title="Client Edit" width="370" xmlns:controls="com.llsvc.controls.*">
	
	<mx:Script>
		<![CDATA[
			import com.llsvc.domain.vo.clientVO;
			import mx.events.ValidationResultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import com.llsvc.services.PersonService;
			import com.llsvc.services.AddressService;
			import com.llsvc.domain.State;
			import com.llsvc.domain.Person;
			import com.llsvc.domain.Address;
			import com.llsvc.registry.MainModel;
			import mx.rpc.events.FaultEvent;
			import com.llsvc.services.ClientService;
			import com.llsvc.domain.Client;
			import mx.managers.PopUpManager;
			import mx.collections.ArrayCollection;
			import mx.rpc.Responder;
			
			[Bindable] private var isBusy:Boolean = false;
			[Bindable] private var usStates:ArrayCollection;
			
			[Bindable] public var client:Client;
			
            public static function open(parent:DisplayObject, client:Client, modal:Boolean = true):ClientEditView
            {
                var popup:ClientEditView = new ClientEditView();
                
                popup.usStates = MainModel.instance.getStates();
                popup.client = client;
                popup.initClient();

                PopUpManager.addPopUp(popup, parent, modal);
                PopUpManager.centerPopUp(popup);
                
                return popup;
            }

            public function close():void
            {
                PopUpManager.removePopUp(this);
            }
            
            private function initClient():void 
            {
				if (client == null) 
					client = new Client();
				
				if (client.person == null) 
					client.person = new Person();

				if (client.person.address == null)
					client.person.address = new Address();
            }
			
			private function isFormValid():Boolean 
			{
				var result:Boolean = true;
/* 				
				if (vClientName.validate().type == ValidationResultEvent.INVALID) 
					result = false;
 */				
				if (vFirstName.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vMiddleName.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vLastName.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vPhone.validate().type == ValidationResultEvent.INVALID) 
					result = false;
/* 
				if (vPhoneAlt.validate().type == ValidationResultEvent.INVALID) 
					result = false;
 */
				if (vAddress1.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vAddress2.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vCity.validate().type == ValidationResultEvent.INVALID) 
					result = false;

				if (vZip.validate().type == ValidationResultEvent.INVALID) 
					result = false;
					
				if (cbState.selectedItem == null) 
				{
					result = false;
				}
				
				return result;
			}
			
			private function startRemoting():void 
			{
				isBusy = true;
			}
			
			private function stopRemoting():void 
			{
				isBusy = false;
			}
			
			private function getClient():Client 
			{
				client.name = client.company.name + " " + txtFirstName.text + " " + txtLastName.text;
				client.userid = MainModel.instance.currentUser.userid;
				
				client.person.firstname = txtFirstName.text;
				client.person.middlename = txtMiddleName.text;
				client.person.lastname = txtLastName.text;
				client.person.phone = txtPhone.text;
				client.person.phonealt = txtPhoneAlt.text;

				client.person.address.address1 = txtAddress1.text;
				client.person.address.address2 = txtAddress2.text;
				client.person.address.city = txtCity.text;
				client.person.address.state = cbState.selectedItem as State;
				client.person.address.stateid = client.person.address.state.stateid;
				client.person.address.zip = txtZip.text;

				return client;
			}
			
			public function save(client:Client):void 
			{
				if (client == null 
					|| client.person == null 
					|| client.person.address == null
					|| client.person.address.state == null)
				{
					trace("Client is incomplete!");
					return;
				}

				startRemoting();				
				AddressService.instance.saveAddress(client.person.address).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							client.person.addressid = client.person.address.addressid;
							
							PersonService.instance.savePerson(client.person).addResponder(
								new mx.rpc.Responder(
									function (event:ResultEvent):void 
									{
										client.personid = client.person.personid;
										
										ClientService.instance.saveClient(client).addResponder(
											new mx.rpc.Responder(
												function (event:ResultEvent):void 
												{
													stopRemoting();
													dispatchEvent(new Event("clientSavingComplete"));
												}, faultHandler));
									}, faultHandler));
						}, faultHandler));
			}
			
			private function faultHandler(event:FaultEvent):void 
			{
				stopRemoting();
				Alert.show("Client saving failed !\n" + event.fault.message); 
			}
				
			private function btnCancelClickHandler(event:*):void 
			{
				dispatchEvent(new Event("cancelRequest"));
			}
			
			private function btnOkClickHandler(event:*):void 
			{
				if (!isFormValid())
					return;
					
				save(getClient());
			}
			
		]]>
	</mx:Script>

<!--
	<mx:StringValidator id="vClientName" source="{txtClientName}" property="text" maxLength="50" required="true"/>
-->
	<mx:StringValidator id="vFirstName" source="{txtFirstName}" property="text" maxLength="50" required="true"/>
	<mx:StringValidator id="vMiddleName" source="{txtMiddleName}" property="text" maxLength="50" required="false"/>
	<mx:StringValidator id="vLastName" source="{txtLastName}" property="text" maxLength="50" required="true"/>
	<mx:PhoneNumberValidator id="vPhone" source="{txtPhone}" property="text" required="true"/>
<!--
	<mx:PhoneNumberValidator id="vPhoneAlt" source="{txtPhoneAlt}" property="text" required="false"/>
-->
	<mx:StringValidator id="vAddress1" source="{txtAddress1}" property="text" maxLength="50" required="true"/>
	<mx:StringValidator id="vAddress2" source="{txtAddress2}" property="text" maxLength="50" required="false"/>
	<mx:StringValidator id="vCity" source="{txtCity}" property="text" required="true"/>
	<mx:ZipCodeValidator id="vZip" source="{txtZip}" property="text" required="true"/>

	<mx:Form width="100%">
<!--
		<mx:FormItem label="Client" required="true" width="100%">
			<mx:TextInput id="txtClientName" width="100%" text="{client.name}"/>
		</mx:FormItem>
-->
		<mx:FormHeading label="Contact person"/>
		<mx:FormItem label="First Name" required="true" width="100%">
			<mx:TextInput id="txtFirstName" width="100%" text="{client.person.firstname}"/>
		</mx:FormItem>
		<mx:FormItem label="Middle Name" width="100%">
			<mx:TextInput id="txtMiddleName" width="100%" text="{client.person.middlename}"/>
		</mx:FormItem>
		<mx:FormItem label="Last Name" required="true" width="100%">
			<mx:TextInput id="txtLastName" width="100%" text="{client.person.lastname}"/>
		</mx:FormItem>
		<mx:FormItem label="Phone" required="true" width="100%">
			<controls:MaskedInput id="txtPhone" inputMask="(###) ###-####" width="100%" text="{client.person.phone}"/>
		</mx:FormItem>
		<mx:FormItem label="Phone Alt" width="100%">
			<controls:MaskedInput id="txtPhoneAlt" inputMask="(###) ###-####" width="100%" text="{client.person.phonealt}"/>
		</mx:FormItem>
		<mx:FormItem label="Address1" required="true" width="100%">
			<mx:TextInput id="txtAddress1" width="100%" text="{client.person.address.address1}"/>
		</mx:FormItem>
		<mx:FormItem label="Address2" width="100%">
			<mx:TextInput id="txtAddress2" width="100%" text="{client.person.address.address2}"/>
		</mx:FormItem>
		<mx:FormItem label="City" required="true" width="100%">
			<mx:TextInput id="txtCity" width="100%" text="{client.person.address.city}"/>
		</mx:FormItem>
		<mx:FormItem label="State" required="true" width="100%">
			<controls:ComboBox id="cbState" dataProvider="{usStates}" 
				valueField="statefips" value="{client.person.address.stateid}" 
				labelField="name"/>
		</mx:FormItem>
		<mx:FormItem label="Zip" required="true" width="100%">
			<mx:TextInput id="txtZip" width="100%" text="{client.person.address.zip}"/>
		</mx:FormItem>
	</mx:Form>

	<mx:ProgressBar labelPlacement="right" label="" indeterminate="true" width="100%"
		visible="{isBusy}" includeInLayout="{isBusy}"/>

	<mx:ControlBar horizontalAlign="center" width="100%">
		<mx:Button height="24" label="Ok" enabled="{!isBusy}" click="btnOkClickHandler(event)"/>
		<mx:Button height="24" label="Cancel" enabled="{!isBusy}" click="btnCancelClickHandler(event)"/>
	</mx:ControlBar>
	
</mx:TitleWindow>
