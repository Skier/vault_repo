<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:lease="com.llsvc.client.lms.view.lease.*"
    xmlns:degrafa="com.degrafa.*"
    xmlns:geometry="com.degrafa.geometry.*"
    xmlns:paint="com.degrafa.paint.*"
    creationComplete="init()">

    <mx:Script>
        <![CDATA[
            import com.llsvc.domain.LeaseTractQQ;
            import mx.collections.ArrayCollection;
            import mx.rpc.Responder;
            import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            import mx.rpc.http.HTTPService;
            import mx.controls.Alert;
            import mx.controls.Image;
            import mx.managers.CursorManager;
        
            import com.yahoo.maps.api.core.location.BoundingBox;
            import com.yahoo.maps.api.YahooMap;
            import com.yahoo.maps.api.YahooMapEvent;
            import com.yahoo.maps.webservices.geocoder.Geocoder;
            import com.yahoo.maps.webservices.geocoder.GeocoderResultSet;
            import com.yahoo.maps.webservices.geocoder.GeocoderResult;
            import com.yahoo.maps.webservices.geocoder.events.GeocoderEvent;
            import com.yahoo.maps.api.core.location.LatLon;
            import com.yahoo.maps.api.core.location.BoundingBox;
    
            import com.afcomponents.umap.gui.MapTypeControl;
            import com.afcomponents.umap.overlays.KMLLayer;
            import com.afcomponents.umap.core.UMap;
            import com.afcomponents.umap.gui.ZoomControl;
            import com.afcomponents.umap.gui.MapTypeControl;
            import com.afcomponents.umap.types.LatLng;
            import com.afcomponents.umap.events.DisplayEvent;
            import com.afcomponents.umap.events.MapEvent;
            import com.afcomponents.umap.providers.TileLayer;
            import com.afcomponents.umap.types.LatLngBounds;
            
            //import com.google.maps.MapEvent;
            import com.google.maps.MapMoveEvent;
            import com.google.maps.MapZoomEvent;
            import com.google.maps.Map;
            import com.google.maps.MapType;
            import com.google.maps.LatLng;
            import com.google.maps.InfoWindowOptions;
            import com.google.maps.overlays.Marker;
            import com.google.maps.controls.MapTypeControl;
            import com.google.maps.controls.ZoomControl;
            import com.google.maps.controls.PositionControl;
            
            import com.degrafa.GeometryComposition;
            import com.degrafa.core.collections.GeometryCollection;
            import com.degrafa.paint.SolidStroke;
            import com.degrafa.core.collections.StrokeCollection;
            import com.degrafa.paint.SolidFill;
            import com.degrafa.core.collections.FillCollection;
            import com.degrafa.geometry.Path;
            import com.degrafa.geometry.Polygon;
            
            import com.llsvc.domain.Tract;
            import com.llsvc.domain.Lease;
            import com.llsvc.domain.LeaseTract;
            import com.llsvc.util.TractDescriptionUtil;
            import com.llsvc.framework.storage.Storage;
            
            private static const YAHOO_APP_ID:String = "2SSffdjV34HQnJzB3YV4eNzGj2lmN4HJneSsiW0LgkxXLOYzK2fXx981FM.UWzUtbbjO0kD7fA--";
            
            private var _tractGraphics:Graphics = null;            
            protected var _yahooMap:YahooMap = null;
            private var _umap:UMap = null;
            private var _gmap:Map = null;
            
            private var tractCount:int = 0;
            private var tractCountDown:int = 0;
            private var selectedTracts:ArrayCollection = new ArrayCollection();
            private var geoServerUrlPrefix:String = null;

			private var fileRef:FileReference = null;
			
			//--------------------
			[Bindable] public var ddEnabled:Boolean; 
			[Bindable] public var ddSelected:Boolean;
			
			[Bindable] public var mapScale:int; 
			//--------------------
                        
            protected function getGeoServerUrlPrefix():String {
//              return "http://llsvc.demo.logicland.com.ua/geoserver/";
                return geoServerUrlPrefix;  
            }
            
            private function init():void {
                var responder:mx.rpc.Responder = new mx.rpc.Responder(onGetGeoServerUrlResultHandler, 
                        onGetGeoServerUrlFaultHandler);
                Storage.instance.getGeoServerUrl(responder);
            }
            
            private function onGetGeoServerUrlResultHandler(event:ResultEvent):void {
                geoServerUrlPrefix = event.result.toString();
                init2();
            }
    
            private function onGetGeoServerUrlFaultHandler(event:FaultEvent):void {
                Alert.show(event.fault.message);
            }
            
            private function init2():void
            {
                _yahooMap = new YahooMap(); 
                _yahooMap.addEventListener(YahooMapEvent.MAP_INITIALIZE, handleYahooInitialize, false, 0, true);
                _yahooMap.addEventListener(YahooMapEvent.MAP_ZOOM, handleYahooZoom);
                _yahooMap.addEventListener(YahooMapEvent.MAP_DRAG_START, handleYahooDragStart);
                _yahooMap.addEventListener(YahooMapEvent.MAP_DRAG_STOP, handleYahooDragStop);
                _yahooMap.addEventListener(YahooMapEvent.MAP_TYPE_CHANGED, handleYahooMapTypeChanged);
//                _yahooMap.addEventListener(YahooMapEvent.MAP_CLICK, handleYahooDoubleClick);
                _yahooMap.addEventListener(MouseEvent.CLICK, handleYahooDoubleClick);
//                _yahooMap.addEventListener(MouseEvent.MOUSE_MOVE, handleYahooMouseMove);
                
                _yahooMap.init(YAHOO_APP_ID, yahooContainer.width, yahooContainer.height);
/*                
                _yahooMap.addEventListener(YahooMapEvent.MAP_DRAG_START, handleMapDragStart);
//                _yahooMap.addEventListener(MouseEvent.CLICK, handleMouseDoubleClick);
*/                
                
                _yahooMap.addScaleBar();
                _yahooMap.addPanControl(); // adds ability to pan and click on the map.
                _yahooMap.doubleClickEnabled = false;
//                _yahooMap.addZoomWidget(); // adds a zoom control widget to the map.
//                _yahooMap.addTypeWidget(); // adds a map type control widget to the map.
//                _yahooMap.alpha = 0.5;
                _yahooMap.alpha = 0.1;
                this.yahooContainer.addChild(_yahooMap); // adds the yahoomap object to the display list.

/*
                _umap = new UMap();
                _umap.alpha = 0.4;
                _umap.setSize(umapContainer.width, umapContainer.height);
                umapContainer.addChild(_umap);
                _umap.addEventListener(MapEvent.READY, handleUmapReady);
*/                
/*                
                _umap.addEventListener(MapEvent.ZOOM_STOP, handleVEZoom);
                _umap.addEventListener("dragStart", handleMapDragStart);
                _umap.addEventListener("dragStop", handleMapDragStop);
*/                
/*
                _gmap = new Map();
                _gmap.key = "ABQIAAAAJ6Rar5WlFPCijGheORRzuxQhaumIq7volme6zJnHwPPRj9JQAxRrZiqnVU4szTsneiwfoSOgTd5rVw";
                _gmap.setSize(new Point(gmapContainer.width, gmapContainer.height));
                _gmap.addEventListener(com.google.maps.MapEvent.MAP_READY, handleGMapReady);
                _gmap.addEventListener(MapMoveEvent.MOVE_END, handleGMapMoveEnd);
                _gmap.addEventListener(MapZoomEvent.ZOOM_END, handleGMapMoveEnd);
                _gmap.alpha = 0.5;

                gmapContainer.addChild(_gmap);
                
                _gmap.addControl(new com.google.maps.controls.ZoomControl());
                _gmap.addControl(new com.google.maps.controls.PositionControl());
                _gmap.addControl(new com.google.maps.controls.MapTypeControl());
*/                
//              _tractGraphics = _gmap.graphics;
//              _tractGraphics = this.mapCanvas.graphics;
                _tractGraphics = this._yahooMap.graphics;

                this.zbwContainer.addEventListener(MouseEvent.MOUSE_DOWN, handleZBWMouseClick);
                this.zbwContainer.addEventListener(MouseEvent.MOUSE_UP, handleZBWMouseClick);
                this.zbwContainer.addEventListener(MouseEvent.MOUSE_MOVE, handleZBWMouseMove);
            }
            
            private function handleYahooInitialize(event:YahooMapEvent):void {
                _yahooMap.zoomLevel = 9; 
                _yahooMap.centerLatLon = new LatLon(43.13, -105.15);
/*                
                if (_lease) {
                    _lease.tracts.addEventListener("tractsReloaded", onTractsReloaded);
                }
                if ( _lease && 0 != _lease.tracts.length ) {
                    reloadTracts();
                } else {
                    reflectMap();
                }
*/                
                reflectMap();
            }

            private function handleYahooZoom(event:YahooMapEvent):void {
//            	this.mapStatus.text = "handleYahooZoom: " + this._yahooMap.zoomLevel;
                reflectMap();
            }
            
            private function handleYahooDragStart(event:YahooMapEvent):void {
//            	this.mapStatus.text = "handleYahooDragStart";
                this.wmsContainer.visible = false;
            }
            
            private function handleYahooDragStop(event:YahooMapEvent):void {
//            	this.mapStatus.text = "handleYahooDragStop";
                reflectMap();
            }
            
            private function handleYahooMapTypeChanged(event:YahooMapEvent):void {
//                mapStatus.text = "handleYahooMapTypeChanged: " + _yahooMap.mapType; 
            }
            
            private function handleYahooDoubleClick(event:MouseEvent):void {
                if ( event.ctrlKey ) {
                    var pl:Point = new Point(_yahooMap.mouseX, _yahooMap.mouseY);
                    //var pg:Point = _yahooMap.localToGlobal(pl);
                    var url:String = this.getBaseWMSUrl("GetFeatureInfo") +
                        "&query_layers=topp:doc_lease_tract_qq_view" +
                        "&info_format=application/vnd.ogc.gml" +
                        "&feature_count=1" +
                        "&x=" + pl.x +
                        "&y=" + pl.y;
            
                    var loader:URLLoader = new URLLoader();
                    loader.dataFormat = URLLoaderDataFormat.TEXT;
                    loader.addEventListener(Event.COMPLETE, handleFeatureInfoComplete);
                    loader.addEventListener(IOErrorEvent.IO_ERROR, handleFeatureInfoIOError);
                    CursorManager.setBusyCursor();
                    loader.load(new URLRequest(url));
                }
                //reflectMap();
            }
            
            private function handleFeatureInfoComplete(event:Event):void {
                CursorManager.removeBusyCursor();
                var loader:URLLoader = URLLoader(event.target);
                
                var rsp:XML = new XML(loader.data);
//                this.mapStatus.text = rsp.toString();

                var wfs:Namespace = rsp.namespace('wfs');
                var gml:Namespace = rsp.namespace('gml');
                var topp:Namespace = rsp.namespace('topp');

                if ( "" != rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::lease_id.text().toString() ) {                
                    var description:String = "";
                    description += "ID: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::lease_id.text();
                    description += "\nLease Num: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::lease_num.text();
                    description += "\nLessor: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::lessor.text();
                    description += "\nLessee: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::lessee.text();
                    description += "\nDescription: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::description.text();
                    description += "\nEffective Date: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::eff_date.text();
                    description += "\nExpiration Date: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::exp_date.text();
                    description += "\nTerm: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::term.text();
                    description += "\nBonus Rate: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::bonus_rate.text();
                    description += "\nBonus Amount: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::bonus_amount.text();
                    description += "\nGross Acres: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::gross_acres.text();
                    description += "\nNet Acres: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::net_acres.text();
                    description += "\nNRI: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::nri.text();
                    description += "\nWI: " + rsp.gml::featureMember.topp::doc_lease_tract_qq_view.topp::cwi.text();
                    
                    Alert.show(description);
                } else {
                    Alert.show("Tract not found.");
                } 
            }
            
            private function handleFeatureInfoIOError(event:Event):void {
                CursorManager.removeBusyCursor();
                Alert.show("handleFeatureInfoIOError: unexpected error.");
            }
            
            private function handleUmapReady(event:MapEvent):void {
/*                          
                var tl:TileLayer = new A2ETileLayer();
                _umap.control.mapType.addLayer(tl);
              Alert.show("handleUmapReady: umap is ready.");
*/              
            }
                
            private function handleGMapReady(event:Event):void {
                _gmap.setCenter(new com.google.maps.LatLng(32.1875, -94.375), 9, MapType.NORMAL_MAP_TYPE);
                //Alert.show("handleGMapReady: GMmap is ready.");
            }
                
            private function handleGMapMoveEnd(event:Event):void {
                reflectMap();
            }
                
            private function reflectMap():void {
            	if ( null != boundsGuardTimer ) {
            		return;
            	}
            	
/* Yahoo Map */             
                var b:BoundingBox = _yahooMap.getMapBounds();
                if ( null != b ) { 
	                this.defragaGroup.geometry = new Array();
	                this.clearDisplayObjectContainer(this.defragaGroup);
                    if ( ddEnabled && ddSelected ) {
                        processBBoxRequest(b);
                    }
                    
                    var url:String = getBaseWMSUrl("GetMap");
                    var img:Image = new Image();
                    img.addEventListener(Event.COMPLETE, onGetMapLoadComplete);
                    img.load(url);
                    
	             	// scale
	             	var p1000:Number = _yahooMap.getMetersToPixels(1000, _yahooMap.centerLatLon.lat);
//	             	this.scaleStatus.text = p1000 + " px. per for 1000 m";
					mapScale = p1000;
//	             	this.scaleStatus.text = "(" + p1000 + ") 1px : " + (1000/p1000);
                }
/* Google Maps          
                var url:String = getBaseWMSUrl("GetMap");
                var img:Image = new Image();
                img.addEventListener(Event.COMPLETE, onGetMapLoadComplete);
                img.load(url);
*/
      
/*                
                if ( lease.tracts.length != tractCount ) {
                    Alert.show("reflectMap: lease.tracts.length=" + lease.tracts.length + ", tractCount=" + tractCount);
                    tractCount = lease.tracts.length;
                    tractCountDown = tractCount;
                    selectedTracts.removeAll();
                    for each (var lt:LeaseTract in lease.tracts) {
                        processTractQuery(lt);
                    }
                }
*/
                _tractGraphics = this._yahooMap.graphics;                 
                _tractGraphics.clear();
                for each (var tract:Object in selectedTracts) {
                        renderTract(tract);
                }
                _tractGraphics.endFill();
             
            }

            private function getBaseWMSUrl(method:String) : String {
/* Yahoo Map */             
                var bb:BoundingBox = this._yahooMap.getMapBounds();
                var bbs:String = bb.minLon + "," + bb.minLat + "," + bb.maxLon + "," + bb.maxLat;
/* Google Map               
                var bb:com.google.maps.LatLngBounds = _gmap.getLatLngBounds();
                var bbs:String = bb.getWest() + "," + bb.getSouth() + "," + bb.getEast() + "," + bb.getNorth();
*/                
                var url:String = getGeoServerUrlPrefix() + "wms?" + 
                    "bbox=" + bbs +
                    "&Format=image/png" +
                    "&request=" + method + 
                    "&layers=" + getGeoServerLayers() +
                    "&styles=" +
                    "&width=" + this.width + 
                    "&height=" + this.height +
                    "&transparent=false" +
                    "&srs=EPSG:4267"; //32055"; //EPSG:4269"; //32055; //EPSG:900913"; //EPSG:4326"; //EPSG:45555";
//                    "&srs=EPSG:45555"; //EPSG:900913"; //EPSG:4326"; //EPSG:45555";

                return url;             
            }
            
            private function onGetMapLoadComplete(e:Event):void {
                var img:Image = Image(e.target);
//              img.content.alpha = 1;
//              img.content.blendMode = BlendMode.MULTIPLY;
                this.wmsContainer.removeAllChildren();
                this.wmsContainer.addChild(img);
                this.wmsContainer.visible = true;
            }

            private function trimAlpha(s:String):String {
                var r:String = "";
                for (var i:int = 0; i<s.length; i++) {
                    if ( '0' <= s.charAt(i) && s.charAt(i) <= '9' ) {
                        r = r + s.charAt(i);
                    }
                }
                return r;
            }
            
            private function processTractQuery(t:Object):void {
/*              
                var lts:String = lt.township + lt.range;
                var tokens:Array = lts.split("Dir");
//              Alert.show("processTractQuery, tokens: " + tokens.toString());
                var township:String  = trimAlpha(tokens[0]);                
                var range:String  = trimAlpha(tokens[1]);               
                var meridian:String  = trimAlpha(tokens[2]);
                                
                var trquery:String = 'T' + township + 'R' + range;
                var sectionquery:String = lt.section;
                var meridianquery:String = meridian + 'PM';
*/
/*              
                    "       <wfs:PropertyName>topp:section</wfs:PropertyName> " +
                    "       <wfs:PropertyName>topp:tr</wfs:PropertyName> " +
                    "       <wfs:PropertyName>topp:meridian</wfs:PropertyName> " +
*/
/*                    
                    "           <ogc:And> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>twp</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.township + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>tdir</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.townshipDir + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>rng</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.range + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>rdir</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.rangeDir + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>meridian</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.meridian + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>section</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.section + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>qtr_qtr</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.qq + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "           </ogc:And> " +
*/
/*                    
                    "           <ogc:GmlObjectId gml:id=\"tobin_qq." + t.externalId + "\"/>" +
*/                    
                var request:String = "<?xml version=\"1.0\"?>" +
                    "<wfs:GetFeature " +
                    "   version=\"1.1.0\"" +                    
                    "   service=\"WFS\"" +
                    "   resultType=\"Hits\"" +
                    "   xmlns:wfs=\"http://www.opengis.net/wfs\"" + 
                    "   xmlns:gml=\"http://www.opengis.net/gml\"" +
                    "   xmlns:ogc=\"http://www.opengis.net/ogc\"" +
                    "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +
                    "   xsi:schemaLocation=\"http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd\">" +
                    "   <wfs:Query typeName=\"topp:tobin_qq\" xmlns:topp=\"http://www.openplans.org/topp\"> " +
                    "       <wfs:PropertyName>topp:the_geom</wfs:PropertyName> " +
                    "       <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\"> " +
                    "           <ogc:PropertyIsEqualTo> " +
                    "               <ogc:PropertyName>topp:external_id</ogc:PropertyName> " +
                    "               <ogc:Literal>" + t.externalId + "</ogc:Literal> " +
                    "           </ogc:PropertyIsEqualTo> " +
                    "       </ogc:Filter> " +
                    "   </wfs:Query> " +
                    "</wfs:GetFeature> ";

                var url:String = getGeoServerUrlPrefix() + "wfs";
                var hs:HTTPService = new HTTPService();
                hs.useProxy = false;
                hs.url = url;
                hs.contentType = "text/xml";
                hs.method = "POST";
                hs.addEventListener(mx.rpc.events.ResultEvent.RESULT, onTractQueryResult);
                hs.addEventListener(mx.rpc.events.FaultEvent.FAULT, onTractQueryFault);
                hs.send(request);
            }

            private function onTractQueryResult(e:mx.rpc.events.ResultEvent):void {
                tractCountDown --;
                var x:XML = new XML(e.message.body);
//                Alert.show("onTractQueryRequest: XML=" + x.toXMLString());
                if ( 1 < x.elements().length() ) {
                    processTractQueryResponse(x);
                } else {
                    Alert.show("Not found.", "Error");
                }
            }
            
            private function onTractQueryFault(e:mx.rpc.events.FaultEvent):void {
                tractCountDown --;
                Alert.show("onTractQuery: Fault: " + e.fault.faultString);
            }

            private function processTractQueryResponse(x:XML):void {
                var wfs:Namespace = x.namespace('wfs');
                var gml:Namespace = x.namespace('gml');
                var topp:Namespace = x.namespace('topp');
                
                if ( 0 < x.gml::featureMember.length() ) {
                    var tract:Object = x.gml::featureMember[0];
                    selectedTracts.addItem(tract);
                }
                if ( 0 == tractCountDown ) {
//                    Alert.show("processTractQueryResponse: calculateBounds.")
                    if ( 0 != selectedTracts.length ) { 
                        setMapBoundsByTracts(selectedTracts);
                        reflectMap();
                    }
                }
            }

            private function setMapBoundsByTracts(tracts:ArrayCollection):void {
                var sw:LatLon = new LatLon(0, 0);
                var ne:LatLon = new LatLon(90, 180);
                
                for each(var survey:Object in tracts) {
                    var wfs:Namespace = survey.namespace('wfs');
                    var gml:Namespace = survey.namespace('gml');
                    var topp:Namespace = survey.namespace('topp');
                    var coords:String = survey.topp::tobin_qq.topp::the_geom.gml::MultiPolygon.gml::polygonMember.gml::Polygon.gml::outerBoundaryIs.gml::LinearRing.gml::coordinates[0].text();
                    var pairs:Array = coords.split(' ');
                    
                    for each (var p:String in  pairs) {
                        var pair:Array = p.split(',');
                        var lng:Number = new Number(pair[0]);
                        var lat:Number = new Number(pair[1]);
                        if ( Math.abs(lng) > Math.abs(sw.lon) ) {
                            sw.lon = lng;
                        }
                        if ( Math.abs(lng) < Math.abs(ne.lon) ) {
                            ne.lon = lng;
                        }
                        if ( Math.abs(lat) > Math.abs(sw.lat) ) {
                            sw.lat = lat;
                        }
                        if ( Math.abs(lat) < Math.abs(ne.lat) ) {
                            ne.lat = lat;
                        }
                    }
                    var dlng:Number = (Math.abs(sw.lon)-Math.abs(ne.lon))/10;
                    var dlat:Number = (Math.abs(sw.lat)-Math.abs(ne.lat))/10;
                    sw.lon -= dlng;
                    ne.lon += dlng;
                    sw.lat += dlat;
                    ne.lat -= dlat;
                }

/* Yahoo Maps */            
                var bbox:BoundingBox = new BoundingBox(sw, ne);
                this._yahooMap.setMapBounds(bbox);
/* Google Maps
                var swg:com.google.maps.LatLng = new com.google.maps.LatLng(sw.lat, sw.lon);
                var neg:com.google.maps.LatLng = new com.google.maps.LatLng(ne.lat, ne.lon);
                var bbox:com.google.maps.LatLngBounds = new com.google.maps.LatLngBounds(swg, neg);                
                var bboxZoom:Number = _gmap.getBoundsZoomLevel(bbox);
                var cntg:com.google.maps.LatLng = new com.google.maps.LatLng(
                        (swg.lat() + neg.lat())/2, (swg.lng() + neg.lng())/2);
                        
Alert.show("setMapBoundsByTracts: cntg.lat=" + cntg.lat() + ", cntg.lng=" + cntg.lng() + ", bboxZoom=" + bboxZoom);                     
                _gmap.setCenter(cntg, bboxZoom);
*/              
            }
            
            private function setMapBoundsByTract(survey:Object):void {
                var wfs:Namespace = survey.namespace('wfs');
                var gml:Namespace = survey.namespace('gml');
                var topp:Namespace = survey.namespace('topp');
                var coords:String = survey.topp::tobin_qq.topp::the_geom.gml::MultiPolygon.gml::polygonMember.gml::Polygon.gml::outerBoundaryIs.gml::LinearRing.gml::coordinates[0].text();
                var pairs:Array = coords.split(' ');
                var sw:LatLon = new LatLon(0, 0);
                var ne:LatLon = new LatLon(90, 180);
                
                for each (var p:String in  pairs) {
                    var pair:Array = p.split(',');
                    var lng:Number = new Number(pair[0]);
                    var lat:Number = new Number(pair[1]);
                    if ( Math.abs(lng) > Math.abs(sw.lon) ) {
                        sw.lon = lng;
                    }
                    if ( Math.abs(lng) < Math.abs(ne.lon) ) {
                        ne.lon = lng;
                    }
                    if ( Math.abs(lat) > Math.abs(sw.lat) ) {
                        sw.lat = lat;
                    }
                    if ( Math.abs(lat) < Math.abs(ne.lat) ) {
                        ne.lat = lat;
                    }
                }
                var dlng:Number = (Math.abs(sw.lon)-Math.abs(ne.lon))/10;
                var dlat:Number = (Math.abs(sw.lat)-Math.abs(ne.lat))/10;
                sw.lon -= dlng;
                ne.lon += dlng;
                sw.lat += dlat;
                ne.lat -= dlat;
                
                var bbox:BoundingBox = new BoundingBox(sw, ne);
                this._yahooMap.setMapBounds(bbox);
            }
            
            private function renderTract(survey:Object): void {
//                this._yahooMap.graphics.clear();
                _tractGraphics = _yahooMap.graphics;
                var wfs:Namespace = survey.namespace('wfs');
                var gml:Namespace = survey.namespace('gml');
                var topp:Namespace = survey.namespace('topp');
                var coords:String = survey.topp::tobin_qq.topp::the_geom.gml::MultiPolygon.gml::polygonMember.gml::Polygon.gml::outerBoundaryIs.gml::LinearRing.gml::coordinates[0].text();
//Alert.show("renderTract: coords=" + coords);              
                var pairs:Array = coords.split(' ');
            
                var sp:Point = null;
                for each (var p:String in  pairs) {
                    var pair:Array = p.split(',');
                    var cp:Point = this._yahooMap.getLatLonToXY(new LatLon(pair[1], pair[0]));
//                  var cp:Point = this._gmap.fromLatLngToPoint(new com.google.maps.LatLng(pair[1], pair[0]));
//Alert.show("renderTract: lat=" + pair[1] + ", lng=" + pair[0] + ", cp.x=" + cp.x + ", cp.y=" + cp.y);             
                    if ( null == sp ) {
                        sp = cp;
                        _tractGraphics.beginFill(0xcccccc);
                        _tractGraphics.lineStyle(2, 0x00FFFF);
                        _tractGraphics.moveTo(sp.x, sp.y);
                    } else {
                        _tractGraphics.lineTo(cp.x, cp.y);
                    }
                }
//                this._yahooMap.graphics.endFill();
            }

            private function reloadTracts():void {
//              Alert.show("reloadTracts: lease.tracts.length=" + lease.tracts.length + ", tractCount=" + tractCount);
//              tractCount = lease.tracts.length;
                tractCountDown = 0;
/*                
                for each (var ltc:LeaseTract in lease.tracts) {
                    tractCountDown += ltc.qqs.length;
                }
                
                selectedTracts.removeAll();
                for each (var lt:LeaseTract in lease.tracts) {
                    for each(var ltq:LeaseTractQQ in lt.qqs) {
//Alert.show("processTractQuery: tract=" + ltq.tract.qq);                   
                        processTractQuery(ltq.tract);
                    }
                }
*/                
            }
            
            private function onTractsReloaded(event:Event):void {
                reloadTracts();
            }
            
            private function onTestClick(event:Event):void {
/*              
                var req:URLRequest = new URLRequest("shapefile?leaseId=" + this.lease.document.id);
                flash.net.navigateToURL(req, "_blank");
*/                
            }
/*            
            private function onParseDescription(event:Event):void {
                this.taResult.text = "";
                for each(var token:String in TractDescriptionUtil.parse(this.tiDescription.text)) { 
                    this.taResult.text += token + "\n";
                } 
            }
*/            

//==============================

//            private function onZoomChanged(event:Event):void {
//                if ( event.currentTarget == this.zoomIn ) {
//                    _yahooMap.zoomLevel --;
//                } else if ( event.currentTarget == this.zoomOut ) {
//                    _yahooMap.zoomLevel ++;
//                } 
//                mapStatus.text = _yahooMap.zoomLevel.toString();
                //this.r100k2Enabled.enabled = (_yahooMap.zoomLevel >= 4 && _yahooMap.zoomLevel <= 7);
//            }
            
//==============================

			public function zoomIn():void 
			{
				_yahooMap.zoomLevel --;
			}

			public function zoomOut():void 
			{
				_yahooMap.zoomLevel ++;
			}

            private function onMapBoxChanged(event:Event):void {
/*            	
                if ( event.currentTarget == this.mapTypeEnabled ) {
                    _yahooMap.mapType = "map";
                } else if ( event.currentTarget == this.satTypeEnabled ) {
                    _yahooMap.mapType = "satellite";
                } else if ( event.currentTarget == this.hybTypeEnabled ) {
                    _yahooMap.mapType = "hybrid";
                }
*/                 
            }
            
            private function onLayerBoxChanged(event:Event):void {
                this.reflectMap();
            }

//=================================
/* 
            private function getGeoServerLayers():String {
                var result:String = "";

                result += "topp:doc_lease_tract_qq_view";
                
                return result;
            }
 */
             
            private function getGeoServerLayers(
            	r100k2:Boolean = false,
            	rhs:Boolean = false,
            	twp:Boolean = false,
            	sec:Boolean = false,
            	qq:Boolean = false,
            	plssTwp:Boolean = false,
            	plssSec:Boolean = false,
            	gt:Boolean = false,
            	leases:Boolean = true
            	):String {
                var result:String = "";
                var hasLayer:Boolean = false;
/* 
                this.r100k2Enabled.enabled=(_yahooMap.zoomLevel >= 4 && _yahooMap.zoomLevel <= 7); 
                this.ddEnabled.enabled=(_yahooMap.zoomLevel <= 6); 
 */             
                if ( r100k2) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:100k2";
                    hasLayer = true;
                }
                if ( rhs ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:hillshade1";
                    hasLayer = true;
                }
                if ( twp ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:tobin_twn";
                    hasLayer = true;
                }
                if ( sec ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:tobin_sec";
                    hasLayer = true;
                }
                if ( qq ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:tobin_qq";
                    hasLayer = true;
                }

                // PLSS data                
                if ( plssTwp ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:plss_twn";
                    hasLayer = true;
                }
                if ( plssSec ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    hasLayer = true;
                    result += "topp:plss_sec";
                }

                if ( gt ) {
                    if ( hasLayer ) {
                        result += ",";
                    } 
                    result += "topp:geo_geometry";
                    hasLayer = true;
                }
                
                if ( leases ) {
	                if ( hasLayer ) {
	                    result += ",";
	                } 
	                result += "topp:doc_lease_tract_qq_view";
                }
                
                return result;
            }

//=================================

            private function processBBoxRequest(bbox:BoundingBox):void {
                var request:String = "<?xml version=\"1.0\"?>" +
                    "<wfs:GetFeature " +
                    "   version=\"1.1.0\"" +                    
                    "   service=\"WFS\"" +
                    "   resultType=\"results\"" +
                    "   xmlns:wfs=\"http://www.opengis.net/wfs\"" + 
                    "   xmlns:gml=\"http://www.opengis.net/gml\"" +
                    "   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"" +
                    "   xsi:schemaLocation=\"http://www.opengis.net/wfs ../wfs/1.1.0/WFS.xsd\">" +
                    "   <wfs:Query typeName=\"topp:doc_lease_tract_qq_view\" xmlns:topp=\"http://www.openplans.org/topp\"> " +
                    "       <wfs:PropertyName>topp:the_geom</wfs:PropertyName> " +
                    "       <wfs:PropertyName>topp:lessor</wfs:PropertyName> " +
                    "       <wfs:PropertyName>topp:lessee</wfs:PropertyName> " +
                    "       <wfs:PropertyName>topp:description</wfs:PropertyName> " +
                    "       <ogc:Filter xmlns:ogc=\"http://www.opengis.net/ogc\"> " +
                    "           <ogc:Not> " +
                    "           <ogc:Disjoint> " +
                    "               <ogc:PropertyName>sf:the_geom</ogc:PropertyName> " +
                    "               <gml:Box srsName=\"EPSG:4267\"> " +
                    "                   <gml:coordinates>" +  bbox.minLon + "," + bbox.minLat +
                    " " +  bbox.maxLon + "," + bbox.maxLat + "</gml:coordinates> " +
                    "               </gml:Box> " +
                    "           </ogc:Disjoint> " +
                    "           </ogc:Not> " +
                    "       </ogc:Filter> " +
                    "   </wfs:Query> " +
                    "</wfs:GetFeature> ";

                var url:String = getGeoServerUrlPrefix() + "wfs";
                var hs:HTTPService = new HTTPService();
                hs.useProxy = false;
                hs.url = url;
                hs.contentType = "text/xml";
                hs.method = "POST";
                hs.addEventListener(mx.rpc.events.ResultEvent.RESULT, onBBoxRequestResult);
                hs.addEventListener(mx.rpc.events.FaultEvent.FAULT, onBBoxRequestFault);
                hs.send(request);
            }

            private function clearDisplayObjectContainer(obj:DisplayObjectContainer):void {
                var num:int = obj.numChildren;
                for (var i:int; i<num; i++) {
                    obj.removeChildAt(0);
                }
            }
            
            private function onBBoxRequestResult(e:mx.rpc.events.ResultEvent):void {
//              Alert.show("Result: " + e.message.body);
                var x:XML = new XML(e.message.body);
//                Alert.show("onSurveyRequest: XML=" + x.toXMLString());
//                this.mapStatus.text = x.toXMLString();
                var wfs:Namespace = x.namespace('wfs');
                var gml:Namespace = x.namespace('gml');
                var topp:Namespace = x.namespace('topp');

                this.ddContainer.graphics.clear();
                for each(var o:Object in x.gml::featureMember) {
                    var coords:String = o.topp::doc_lease_tract_qq_view.topp::the_geom.gml::MultiPolygon.gml::polygonMember.gml::Polygon.gml::outerBoundaryIs.gml::LinearRing.gml::coordinates[0].text();
                    var lessor:String = o.topp::doc_lease_tract_qq_view.topp::lessor.text();
                    var lessee:String = o.topp::doc_lease_tract_qq_view.topp::lessee.text();
                    var description:String = o.topp::doc_lease_tract_qq_view.topp::description.text();
//Alert.show("renderSurvey: coords=" + coords);             
                    var pairs:Array = coords.split(' ');
                
                    var ti:TractItem = new TractItem();
//                  var ti:GeometryGroup = new GeometryGroup();
                    ti.tooltip = lessor + "\n" + lessee + "\n" + description; 
//                  ti.percentWidth = 100;
//                  ti.percentHeight = 100;
//                  var dp:TractItem = new TractItem();
                    var dp:Polygon = new Polygon();
                    var dpfSolid:SolidFill = new SolidFill();
                    dpfSolid.color = "#cccc00"; 
                    dp.fill = dpfSolid;
                    var dpsStroke:SolidStroke = new SolidStroke();
                    dpsStroke.alpha = 0.75;
                    dpsStroke.color = "#ffcc00";
                    dpsStroke.weight = 3;
                    dp.stroke = dpsStroke;
                    dp.data = "";
                    var sp:Point = null;
                    for each (var p:String in  pairs) {
                        var pair:Array = p.split(',');
                        var cp:Point = this._yahooMap.getLatLonToXY(new LatLon(pair[1], pair[0]));
/*                        
                        if ( null == sp ) {
                            sp = cp;
                            //this.ddContainer.graphics.beginFill(0xcccccc);
                            this.ddContainer.graphics.lineStyle(1,0x000000);
                            this.ddContainer.graphics.moveTo(sp.x, sp.y);
                        } else {
                            this.ddContainer.graphics.lineTo(cp.x, cp.y);
                        }
*/                        
                        dp.data += cp.x + "," + cp.y + " ";
                    }
//                  this.defragaGroup.geometryCollection.addItem(dp);
                    ti.geometryCollection.addItem(dp);
                    this.defragaGroup.geometryCollection.addItem(ti);
                    this.defragaGroup.addChild(ti);
                    
                }              
                //this.ddContainer.graphics.endFill();
                //this.mapStatus.text = this.defragaGroup.toString();
            }

            private function onBBoxRequestFault(e:mx.rpc.events.FaultEvent):void {
                Alert.show("onBBoxRequest: Fault: " + e.fault.faultString);
            }
            
            private function onDegrafaMouseMove(event:MouseEvent):void {
                if ( event.target is TractItem ) {
                    defragaSurface.toolTip = event.target.tooltip;
                } else {
                    defragaSurface.toolTip = "";
                }
//                this.mapStatus.text = "onDefragaMouseMove: isTractItem=" + (event.target is TractItem);   
            }
            
            private function onDegrafaMouseOut(event:MouseEvent):void {
                this.defragaSurface.toolTip = "";
//                this.mapStatus.text = "";   
            }

            private function onDegrafaClick(event:Event):void {
//              Alert.show("onDegrafaClick: event.target=" + event.target);
//                this.mapStatus.text = "onDefragaClick: isTractItem=" + (event.target is TractItem);   
                if ( event.target is TractItem ) {
                    var ti:TractItem = event.target as TractItem;
                    ti.isSelected = !ti.isSelected;
                }
            }
            
            private function onParseDescription(event:Event):void {
/*            	
                this.taResult.text = "";
                for each(var token:String in TractDescriptionUtil.parse(this.tiDescription.text)) { 
                    this.taResult.text += token + "\n";
                }
*/                 
            }
           
            private function onUploadShapefile(event:Event):void {
            	if ( null == fileRef ) {
            		fileRef = new FileReference();
            	}
            	
                fileRef.addEventListener(Event.SELECT, onFileSelected); 

                var docFilter:FileFilter = new FileFilter("Shapefiles", "*.zip");
                fileRef.browse([docFilter]);
            }
             
            private function onFileSelected(e:Event):void 
            {
                var userId:int = 1;
                var request:URLRequest = new URLRequest("shapefile_upload?userId=" + userId + "&description=Sample");
                try {
                    fileRef.upload(request);
/*                    
                    fileRef.addEventListener(ProgressEvent.PROGRESS, onFileProgress);
                    fileRef.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, onFileUploadComplete);
                    fileRef.addEventListener(IOErrorEvent.IO_ERROR, onIoError);
                    fileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onSecurityError);
*/                    
                } catch (error:Error) {
                    Alert.show("Unable to upload file.");
                }
            }

            private function onZBWChanged(event:Event):void {
//            	this.zbwContainer.visible = this.zbwEnabled.selected;
            }
            
            private var isWindowDefinition:Boolean = false;
            private var zbw1:Point = null;
            private var zbw2:Point = null;
            
            private function handleZBWMouseClick(event:MouseEvent):void {
//            	Alert.show("handleZBWMouseClick");
				if ( event.buttonDown && !isWindowDefinition ) {
					isWindowDefinition = true;
					zbw1 = new Point(zbwContainer.mouseX, zbwContainer.mouseY);
				} else {
					isWindowDefinition = false;
					zbw2 = new Point(zbwContainer.mouseX, zbwContainer.mouseY);
					zoomByWindow(zbw1, zbw2);
					
//					this.zbwEnabled.selected = false;
					this.zbwContainer.visible = false;
				}
            }

            private function handleZBWMouseMove(event:MouseEvent):void {
//            	Alert.show("handleZBWMouseMove");
				var ll:LatLon = point2LatLon(
					new Point(this.mouseX,
							this.mouseY));
//				this.mapStatus.text = "lat: " + ll.lat + ", lon:" + ll.lon;
            }
 
 			private function point2LatLon(p:Point):LatLon {
                var py:Point = new Point();
                py.x = -1 * (p.x - this.width/2);
                py.y = -1 * (p.y - this.height/2);
                var ll:LatLon = this._yahooMap.getXYToLatLon(py);
                return ll;
 			}
 			
 			private function zoomByWindow(p1:Point, p2:Point):void {           
//				Alert.show("zoomByWindow: p1=" + p1 + ";" + "p2=" + p2);
				var ll1:LatLon = point2LatLon(p1); 									
				var ll2:LatLon = point2LatLon(p2); 									
//				Alert.show("zoomByWindow: ll1=" + ll1 + ";" + "ll2=" + ll2);
//				if ( !this.zbwOut.selected ) {
				if ( false ) {
	                var bbox:BoundingBox = new BoundingBox(ll1, ll2);
	                
	                startBoundGuardTimer();
	                
	                this._yahooMap.setMapBounds(bbox);
    			} else {
    				var ll:LatLon = new LatLon((ll1.lat+ll2.lat)/2,
    						(ll1.lon+ll2.lon)/2);
    				this._yahooMap.centerLatLon = ll;
    				this._yahooMap.zoomLevel ++;
    			}
    		}
            
            protected function startBoundGuardTimer():void {
        		boundsGuardTimer = new Timer(1000, 1);
        		boundsGuardTimer.addEventListener(TimerEvent.TIMER, onBoundsGuardHandler);
        		boundsGuardTimer.start();
            }
            
    		private var boundsGuardTimer:Timer = null;

    		private function onBoundsGuardHandler(event:TimerEvent) : void 
    		{
//    			this.mapStatus.text = "onBoundsGuardHandler";
    			boundsGuardTimer = null;
    			reflectMap();
      		}
      		
        ]]>
    </mx:Script>
<!--    
    <mx:HBox width="100%" height="100%" horizontalGap="5">
        <mx:VBox id="controlBox" width="100%" height="100%">
            <mx:TextArea id="mapStatus"/>
            <mx:TextArea id="scaleStatus"/>
            <mx:VBox>
            	<mx:Button label="USF" click="onUploadShapefile(event)"/>

                <mx:TextArea id="taResult"/>                
            </mx:VBox>
            <mx:HBox>
                <mx:Button id="zoomIn" label="Zoom In" click="onZoomChanged(event)"/>
                <mx:Button id="zoomOut" label="Zoom Out" click="onZoomChanged(event)"/>
            </mx:HBox>
            <mx:Box id="mapTypeBox">
                <mx:CheckBox id="zbwEnabled" label="ZBW" change="onZBWChanged(event)" />
                <mx:CheckBox id="zbwOut" label="Out" />
            </mx:Box>
            <mx:Box id="layersBox">
                <mx:CheckBox id="r100k2Enabled" label="100K2" change="onLayerBoxChanged(event)" />
                <mx:CheckBox id="rhsEnabled" label="Hill Shade" change="onLayerBoxChanged(event)"/>
                
                <mx:CheckBox id="plssTwpEnabled" label="PLSS TWP" change="onLayerBoxChanged(event)"/>
                <mx:CheckBox id="plssSecEnabled" label="PLSS SEC" change="onLayerBoxChanged(event)"/>
                
                <mx:CheckBox id="twpEnabled" label="Tobin TWP" change="onLayerBoxChanged(event)"/>
                <mx:CheckBox id="secEnabled" label="Tobin SEC" change="onLayerBoxChanged(event)"/>
                <mx:CheckBox id="qqEnabled" label="Tobin QQ" change="onLayerBoxChanged(event)"/>
                
                <mx:CheckBox id="gtEnabled" label="GEO_GEOMETRY" change="onLayerBoxChanged(event)"/>
                
                <mx:CheckBox id="ddEnabled" label="Draw Leases" change="onLayerBoxChanged(event)"/>
            </mx:Box>
        </mx:VBox>
        <mx:Canvas id="mapCanvas" clipContent="true" width="720" height="540" verticalScrollPolicy="off" horizontalScrollPolicy="off">
-->
            <mx:Canvas id="wmsContainer" visible="true" width="100%" height="100%"/>
            <mx:Canvas id="ddCanvas" alpha="0.5" visible="true"  clipContent="true" width="720" height="540" verticalScrollPolicy="off" horizontalScrollPolicy="off">
                <mx:UIComponent id="ddContainer"  visible="true" width="100%" height="541"/>
            </mx:Canvas>
            <mx:UIComponent id="umapContainer" visible="false" width="100%" height="100%"/>
            <mx:UIComponent id="yahooContainer" visible="true" width="100%" height="100%"/>
            <mx:UIComponent id="gmapContainer" visible="false" width="100%" height="100%"/>
            <mx:Canvas id="dfrContainer"  clipContent="true" width="720" height="540" verticalScrollPolicy="off" horizontalScrollPolicy="off">
                <degrafa:Surface id="defragaSurface" toolTip="leases map" width="721">
                    <degrafa:GeometryGroup id="defragaGroup" 
                            mouseChildren="true" 
                            mouseMove="onDegrafaMouseMove(event)" 
                            mouseOut="onDegrafaMouseOut(event)" 
                            click="onDegrafaClick(event)"
                            >
                    </degrafa:GeometryGroup>
<!--
                            mouseChildren="true" 
                            mouseMove="onDegrafaMouseMove(event)" 
                            mouseOut="onDegrafaMouseOut(event)" 
                            click="onDegrafaClick(event)">
-->
                </degrafa:Surface>            
            </mx:Canvas>
            <mx:Canvas id="zbwContainer" visible="false" width="100%" height="100%"/>
</mx:Canvas>
