<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="vertical" xmlns:controls="com.llsvc.controls.*" 
	xmlns:document="com.llsvc.client.lms.view.document.*"
	title="Tract Detail"
	creationComplete="onCreate()" xmlns:component="com.llsvc.component.*">
	
    <mx:Metadata>
        [Event(name="commitRequest", type="flash.events.Event")]
    </mx:Metadata>

	<mx:Script>
		<![CDATA[
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import com.llsvc.domain.LeaseTractQQ;
			import com.llsvc.domain.Tract;
			import com.llsvc.util.TractDescriptionUtil;
			import com.llsvc.client.lm.storage.Storage;
			import com.llsvc.domain.LeaseTract;
			import com.llsvc.domain.Address;
			import mx.events.CloseEvent;
			import mx.utils.ObjectUtil;
			import mx.core.UIComponent;
			import com.llsvc.domain.DocumentActorPhone;
			import com.llsvc.domain.DocumentActor;
			import mx.controls.Alert;
			import com.llsvc.domain.County;
			import mx.collections.ArrayCollection;
			import com.llsvc.domain.DocumentRecord;
			import com.llsvc.client.lms.LocalCash;
			import com.llsvc.domain.State;
			import mx.managers.PopUpManager;
			import mx.rpc.Responder;
			
			[Bindable] private var errorMessage:String;
			
			[Bindable] private var isProcessing:Boolean = false;

			private var _tract:LeaseTract;
			[Bindable]
			public function get tract():LeaseTract { return _tract; }
			public function set tract(value:LeaseTract):void 
			{
				_tract = value;
				
				callLater(populateFields);
			}
			
            public static function open(parent:DisplayObject, tract:LeaseTract, modal:Boolean):TractEditView
            {
                var popup:TractEditView = new TractEditView();
                popup.tract = tract;
                
                PopUpManager.addPopUp(popup, parent, modal);
                PopUpManager.centerPopUp(popup);
                
                return popup;
            }

            public function close():void
            {
                PopUpManager.removePopUp(this);
            }
            
            private function onCreate():void 
            {
            	focusManager.setFocus(txtTownship);
            }
            
            private function populateFields():void 
            {
            	txtTownship.text = tract.townshipStr;
            	txtRange.text = tract.rangeStr;
            	txtPm.text = tract.meridianStr;
            	comboNorth.selectedIndex = (tract.townshipDirStr == "N") ? 0 : 1;
            	comboEast.selectedIndex = (tract.rangeDirStr == "E") ? 0 : 1;
            	txtSection.text = tract.section;
            	txtDescription.text = tract.tract;
            }
            
            private function isFormValid():Boolean 
            {
            	if (
            		   txtTownship.text.length > 0
            		&& comboNorth.selectedIndex != -1 
            		&& txtRange.text.length > 0 
            		&& comboEast.selectedIndex != -1 
            		&& txtPm.text.length > 0
            		&& txtSection.text.length > 0
            		&& txtDescription.text.length > 0
            		
            		&& !isNaN(Number(txtTownship.text))
            		&& !isNaN(Number(txtRange.text))
            		&& !isNaN(Number(txtPm.text))
            		&& !isNaN(Number(txtSection.text))
            		)
            	{
            		return true;
            	} else 
            	{
            		return false;
            	}
            }
            
	        private function btnOkClickHandler():void 
	        {
            	errorMessage = "";

	        	if (isFormValid()) 
	        	{
	        		processGeoTracts();
	        	} else 
	        	{
            		errorMessage = "Not all required fields selected !";
	        	}
	        }
	        
			private function processGeoTracts():void 
			{
				addEventListener("processTractSuccess", processTractSuccessHandler);
				addEventListener("processTractFault", processTractFaultHandler);

				tract.isProcessed = false;
				tract.isProcessing = true;
				
	        	var tractMask:Tract = new Tract();
		        	tractMask.township = txtTownship.text;
		        	tractMask.townshipDir = comboNorth.selectedLabel;
		        	tractMask.range = txtRange.text;
		        	tractMask.rangeDir = comboEast.selectedLabel;
		        	tractMask.meridian = txtPm.text;
		        	tractMask.section = txtSection.text;

				Storage.instance.findTracts(tractMask, 
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
				        	var allExists:Boolean = true;
				        	
							var existingGeoTracts:ArrayCollection = event.result as ArrayCollection; 
							
							var qqs:ArrayCollection = new ArrayCollection();
							for each (var key:String in TractDescriptionUtil.parse(txtDescription.text)) 
							{
								var t:Tract = getTractByKey(key, existingGeoTracts);
								if (t == null) 
								{
									allExists = false;
								} else 
								{
									var qq:LeaseTractQQ = new LeaseTractQQ();
										qq.leaseTract = tract;
										qq.tract = t;

									qqs.addItem(qq);
								}
							}

							tract.isProcessing = false;
							
							if (allExists) 
							{
								tract.isProcessed = true;
								tract.qqs.source = qqs.source;
								dispatchEvent(new Event("processTractSuccess"));
							} else 
							{
								dispatchEvent(new Event("processTractFault"));
							}
						},
						function (event:FaultEvent):void 
						{
							tract.isProcessing = false;
							dispatchEvent(new Event("processTractFault"));
						}
					)
				);
			}
	        
			private function processTractSuccessHandler(event:Event):void 
			{
				tract.isProcessed = true;
				tract.isProcessing = false;
				
        		tract.township = txtTownship.text + " Dir " + comboNorth.selectedLabel;
        		tract.range = txtRange.text + " Dir " + comboEast.selectedLabel  + " PM " + txtPm.text;
        		tract.section = txtSection.text;
        		tract.tract = txtDescription.text;
        		
        		if (tract.lease != null) tract.burden = tract.lease.royalty;
        		
		        dispatchEvent(new Event("commitRequest"));
			}
			
			private function processTractFaultHandler(event:Event):void 
			{
				Alert.show("Can not process GeoTracts for description");
				tract.isProcessing = false;
			}
			
			private function getTractByKey(key:String, tractCollection:ArrayCollection):Tract 
			{
				for each (var tract:Tract in tractCollection) 
				{
					if (tract.qq == key || tract.lot == key) 
						return tract;
				}
				
				return null;
			}
	        private function btnCancelClickHandler():void 
	        {
	        	close();
	        }
	        
		]]>
	</mx:Script>
	
	<mx:Form id="formMain" width="100%" labelWidth="60" enabled="{!tract.isProcessing}" 
		borderColor="#999999" borderStyle="solid" borderThickness="1"
		paddingLeft="15" paddingRight="15" paddingTop="15" paddingBottom="15"
		verticalGap="2">
        <mx:Label text="Please enter your Tract Info:"/>
        
        <mx:HBox width="100%" verticalAlign="middle" horizontalGap="2">
            <mx:Label text="TWN"/>
            <mx:TextInput id="txtTownship" width="40" maxChars="3" restrict="0-9"/>
            <mx:Label text="Dir"/>
            <mx:ComboBox id="comboNorth" dataProvider="[N, S]"/>
            <mx:Label text="RNG"/>
            <mx:TextInput id="txtRange" width="40" maxChars="3" restrict="0-9"/>
            <mx:Label text="Dir"/>
            <mx:ComboBox id="comboEast" dataProvider="[E, W]"/>
            <mx:Label text="PM"/>
            <mx:TextInput id="txtPm" width="40" maxChars="3" restrict="0-9"/>
        </mx:HBox>
        
        <mx:HRule width="100%" height="1"/>

        <mx:HBox width="100%" verticalAlign="middle" horizontalGap="2">
            <mx:Label text="Section"/>
            <mx:TextInput id="txtSection" width="40" maxChars="3" restrict="0-9"/>
            <mx:Label text="Desc"/>
            <component:SelectableInput id="txtDescription" width="100%"/>
        </mx:HBox>
	</mx:Form>
	
	<mx:ControlBar horizontalAlign="right" verticalAlign="middle">
		<mx:Canvas width="100%">
			<mx:Label fontSize="12" color="#ff0000" text="{errorMessage}" minWidth="200"/>
			<mx:ProgressBar indeterminate="true" width="100%" label=" " visible="{tract.isProcessing}"/>
		</mx:Canvas>
		<mx:Button label="Ok" height="24" click="btnOkClickHandler()" enabled="{!tract.isProcessing}"/>
		<mx:Button label="Cancel" height="24" click="btnCancelClickHandler()"/>
	</mx:ControlBar>
</mx:TitleWindow>
