<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" initialize="onInit()">

	<mx:Script>
		<![CDATA[
			import com.dalworth.leadCentral.service.registry.LeadSourceRegistry;
			import com.dalworth.leadCentral.domain.LeadType;
			import com.dalworth.leadCentral.domain.LeadSource;
			import com.affilia.util.DateUtil;
			import com.dalworth.leadCentral.service.registry.LeadTypeRegistry;
			import com.dalworth.leadCentral.domain.Lead;
			import mx.charts.series.ColumnSet;
			import mx.collections.ArrayCollection;
			import mx.graphics.Stroke;
			import mx.graphics.SolidColor;
			import com.affilia.util.ColorArray;
			import mx.charts.series.ColumnSeries;
			import mx.events.CollectionEvent;
			
			private static const COLUMN_LEAD_SOURCE:String = "columnLeadSource";
			private static const COLUMN_TYPE:String = "columnType";
			private static const COLUMN_NAME:String = "columnName";
			private static const COLUMN_NOTES:String = "columnNotes";
			private static const COLUMN_DATE_CREATED:String = "columnDateCreated";
			private static const COLUMN_DATE_UPDATED:String = "columnDateUpdated";
			
			private var controller:LeadsDailyController;
			
			[Bindable] 
			private var model:LeadsDailyModel;
			
			public function set startDate(value:Date):void 
			{
				model.startDate = value;
			}
			
			public function set endDate(value:Date):void 
			{
				model.endDate = value;
			}
			
			private function onInit():void 
			{
				controller = new LeadsDailyController(this);
				model = LeadsDailyModel.getInstance();
			}
			
			public function setLeads(value:ArrayCollection):void 
			{
				controller.setLeads(value);
				model.leads = value;
			}
			
			private function initTestData():void 
			{
				addSeries(0);
				addSeries(1);
			}
			
			private function addSeries(index:int = 0):void 
			{
				for (var i:int = 1; i < 31; i++)
				{
					var leadsCount:Object = getValueByDay(i);

					if (leadsCount == null)
					{
						leadsCount = new Object();
						leadsCount['day'] = i;
						model.dailyCollection.addItem(leadsCount);
					}

					leadsCount['count' + index] = Math.round(Math.random() * 100);
				}

                var currentColumnSet:ColumnSet = columnChart.series[0] as ColumnSet;
                var currentSeries:Array = currentColumnSet.series;
                
                var columnSeries:ColumnSeries = new ColumnSeries();
	                columnSeries.yField = "count" + index;
	                columnSeries.xField = "day";
	                columnSeries.setStyle("showDataEffect", seriesInterpolate);
	                columnSeries.name = "total";
	                columnSeries.displayName = "Leads total";
	                columnSeries.setStyle("fill", new SolidColor( ColorArray.getColorAt(index), 1) );
                
                currentSeries.push(columnSeries);
                
                (columnChart.series[0] as ColumnSet).series = currentSeries;
			}
			
            private function getValueByDay(day:int):Object
            {
                for each( var leadsCount:Object in model.dailyCollection )
                {
                    if( leadsCount['day'] == day )
                        return leadsCount;
                }
                return null;
            }
            
			private function getLeadSourceName(id:int):String 
			{
				var leadSource:LeadSource = LeadSourceRegistry.getInstance().getLocal(id) as LeadSource;
				if (leadSource != null)
					return leadSource.Name;
				else 
					return "";
			}
			
			private function getLabel(item:Object, column:DataGridColumn):String 
			{
				if (item is Lead) 
				{
					switch (column.dataField) 
					{
						case COLUMN_LEAD_SOURCE :
							return getLeadSourceName(Lead(item).LeadSourceId);
						
						case COLUMN_TYPE :
							var type:LeadType = LeadTypeRegistry.getInstance().getLocal(Lead(item).LeadTypeId) as LeadType;
							if (type != null)
								return type.Name;
							else 
								return "";
						
						case COLUMN_NAME :
							return (Lead(item).FirstName + " " + Lead(item).LastName);
						
						case COLUMN_NOTES :
							return (Lead(item).CustomerNotes);
						
						case COLUMN_DATE_CREATED :
							return DateUtil.getDateTimeStr(Lead(item).DateCreated);
						
						case COLUMN_DATE_UPDATED :
							return DateUtil.getDateTimeStr(Lead(item).DateLastUpdated);
						
						default :
							return "";
					}
				} else 
				{
					return "bad object";
				}
			}
			
		]]>
	</mx:Script>
	
    <!-- Define custom colors for use as fills. -->
    <mx:SolidColor id="sc1" color="yellow" alpha=".8"/>
    <mx:SolidColor id="sc2" color="0xCCCCCC" alpha=".6"/>
    <mx:SolidColor id="sc3" color="0xFFCC66" alpha=".6"/>

    <!-- Define custom Strokes for the columns. -->
    <mx:Stroke id="s1" color="yellow" weight="1"/>
    <mx:Stroke id="s2" color="0xCCCCCC" weight="1"/>
    <mx:Stroke id="s3" color="0xFFCC66" weight="1"/>

	<mx:SeriesInterpolate duration="1000" id="seriesInterpolate"/>
	
	<mx:VBox width="100%" height="100%">
		<mx:ViewStack id="vsDaily" width="100%" height="100%" borderColor="#CCCCCC" borderStyle="solid"
			paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2">
			<mx:VBox label="Leads Graph" width="100%" height="100%">
			    <mx:ColumnChart id="columnChart" 
			    	showDataTips="true" width="100%" height="100%" dataProvider="{model.dailyCollection}">
			        <mx:horizontalAxis>
			            <mx:CategoryAxis id="dayAxis" title="Date" categoryField="dateStr"/>
			        </mx:horizontalAxis>
			        
			        <mx:verticalAxis>
			            <mx:LinearAxis id="countAxis" title="Leads" autoAdjust="true" interval="1"/>
			        </mx:verticalAxis>
			        
			        <mx:horizontalAxisRenderers>
			            <mx:AxisRenderer axisStroke="{new Stroke(0x666666, 1, 1)}" showLine="true" axisTitleStyleName="chartTitle" axis="{dayAxis}"/>
			        </mx:horizontalAxisRenderers>
			        
			        <mx:verticalAxisRenderers>
			            <mx:AxisRenderer axisStroke="{new Stroke(0x666666, 1, 1)}" verticalAxisTitleAlignment="vertical"
			                             showLine="true" axisTitleStyleName="chartTitle" axis="{countAxis}"/>
			        </mx:verticalAxisRenderers>

			        <mx:series>
		                <mx:ColumnSeries xField="dateStr" yField="total" displayName="Total Leads"
		                    showDataEffect="{seriesInterpolate}" fill="{sc2}" stroke="{s2}"/>
		                <mx:ColumnSeries xField="dateStr" yField="converted" displayName="Converted Leads"
		                    showDataEffect="{seriesInterpolate}" fill="{sc3}" stroke="{s3}"/>
			        </mx:series>
			
			        <mx:backgroundElements> 
			        	<mx:Grid styleName="myLineChart" borderStyle="solid"/>
			            <mx:GridLines horizontalShowOrigin="true" verticalShowOrigin="false" y="0" horizontalStroke="{new Stroke(0x666666,1,1)}"/>
			        </mx:backgroundElements>
			    </mx:ColumnChart>
			</mx:VBox>
	
			<mx:VBox label="Leads Grid" width="100%" height="100%">
				<mx:DataGrid id="dgLeads" dataProvider="{model.leads}" width="100%" height="100%" minWidth="300"
					sortableColumns="false" draggableColumns="false" editable="false">
					<mx:columns>
						<mx:DataGridColumn headerText="" width="20" minWidth="20" itemRenderer="com.dalworth.leadCentral.lead.LeadStatusIR"/>
						<mx:DataGridColumn headerText="" width="20" minWidth="20" itemRenderer="com.dalworth.leadCentral.lead.LeadCallIR"/>
						<mx:DataGridColumn headerText="Lead Source" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_LEAD_SOURCE}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Type" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_TYPE}" width="80" minWidth="40"/>
						<mx:DataGridColumn headerText="Customer" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_NAME}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Time Created" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_DATE_CREATED}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Last Updated" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_DATE_UPDATED}" width="100" minWidth="50"/>
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		</mx:ViewStack>
		
		<mx:ToggleButtonBar dataProvider="{vsDaily}"/>
	</mx:VBox>

	<mx:VBox width="100%" height="100%">

	</mx:VBox>
</mx:Canvas>
