//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartSchedule.Win32.WcfServiceClient {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServiceClient.IWcfService", CallbackContract=typeof(SmartSchedule.Win32.WcfServiceClient.IWcfServiceCallback))]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ProcessPendingOptimizations", ReplyAction="http://tempuri.org/IWcfService/ProcessPendingOptimizationsResponse")]
        void ProcessPendingOptimizations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ApplyOptimizationResult", ReplyAction="http://tempuri.org/IWcfService/ApplyOptimizationResultResponse")]
        void ApplyOptimizationResult(SmartSchedule.Domain.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/CanInsertVisit", ReplyAction="http://tempuri.org/IWcfService/CanInsertVisitResponse")]
        SmartSchedule.Domain.VisitAddResult CanInsertVisit(int visitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetRecommendations", ReplyAction="http://tempuri.org/IWcfService/GetRecommendationsResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Sync.RecommendationResponseItem> GetRecommendations(SmartSchedule.Domain.Sync.RecommendationRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/RunSync", ReplyAction="http://tempuri.org/IWcfService/RunSyncResponse")]
        void RunSync(SmartSchedule.Domain.WCF.SyncTypeEnum syncType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ApplyServmanData", ReplyAction="http://tempuri.org/IWcfService/ApplyServmanDataResponse")]
        void ApplyServmanData(System.Collections.Generic.List<SmartSchedule.Domain.Sync.Order> orders);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ModifyPredictionIgnoreDate", ReplyAction="http://tempuri.org/IWcfService/ModifyPredictionIgnoreDateResponse")]
        void ModifyPredictionIgnoreDate(bool isSuspend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/CreateBlockout", ReplyAction="http://tempuri.org/IWcfService/CreateBlockoutResponse")]
        string CreateBlockout(int technicianDefaultId, System.DateTime timeStart, System.DateTime timeEnd, string note);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SendErrorEmail", ReplyAction="http://tempuri.org/IWcfService/SendErrorEmailResponse")]
        void SendErrorEmail();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/FindUser", ReplyAction="http://tempuri.org/IWcfService/FindUserResponse")]
        SmartSchedule.Domain.UserResult FindUser(string passwordHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/FindUsers", ReplyAction="http://tempuri.org/IWcfService/FindUsersResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.User> FindUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/FindUserActions", ReplyAction="http://tempuri.org/IWcfService/FindUserActionsResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.UserAction> FindUserActions(System.Nullable<int> userId, System.Nullable<SmartSchedule.Domain.UserActionTypeEnum> actionType, System.Nullable<int> technicianDefaultId, string ticket, System.Nullable<System.DateTime> dashboardDate, SmartSchedule.Domain.TimeInterval actionDateInterval, SmartSchedule.Domain.SortField sortField, bool isSortAscending);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/AddEditUser", ReplyAction="http://tempuri.org/IWcfService/AddEditUserResponse")]
        string AddEditUser(SmartSchedule.Domain.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetFullViewInfo", ReplyAction="http://tempuri.org/IWcfService/GetFullViewInfoResponse")]
        SmartSchedule.Domain.WCF.VisitsFullChangeDetail GetFullViewInfo(System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetDefaultTechnicians", ReplyAction="http://tempuri.org/IWcfService/GetDefaultTechniciansResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetDefaultTechnicians();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTechnicians", ReplyAction="http://tempuri.org/IWcfService/GetTechniciansResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetTechnicians(System.DateTime date, bool defaultSettings, bool eliminateDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SaveTechnicianArrangement", ReplyAction="http://tempuri.org/IWcfService/SaveTechnicianArrangementResponse")]
        void SaveTechnicianArrangement(System.Collections.Generic.List<SmartSchedule.Domain.Technician> orderedTechnicians, bool defaultSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetTechnicianDetails", ReplyAction="http://tempuri.org/IWcfService/GetTechnicianDetailsResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetails(int technicianDefaultId, bool defaultSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SaveTechnicianDetail", ReplyAction="http://tempuri.org/IWcfService/SaveTechnicianDetailResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> SaveTechnicianDetail(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId, bool defaultSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetZipCodes", ReplyAction="http://tempuri.org/IWcfService/GetZipCodesResponse")]
        System.Collections.Generic.Dictionary<string, SmartSchedule.Domain.ZipCode> GetZipCodes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/InsertZipCode", ReplyAction="http://tempuri.org/IWcfService/InsertZipCodeResponse")]
        void InsertZipCode(SmartSchedule.Domain.ZipCode zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GecocodeAddress", ReplyAction="http://tempuri.org/IWcfService/GecocodeAddressResponse")]
        SmartSchedule.Domain.Coordinate GecocodeAddress(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GecocodeZip", ReplyAction="http://tempuri.org/IWcfService/GecocodeZipResponse")]
        SmartSchedule.Domain.Coordinate GecocodeZip(string zip);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetExistingSnapshotDate", ReplyAction="http://tempuri.org/IWcfService/GetExistingSnapshotDateResponse")]
        System.Nullable<System.DateTime> GetExistingSnapshotDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/CreateSnapshot", ReplyAction="http://tempuri.org/IWcfService/CreateSnapshotResponse")]
        void CreateSnapshot();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetSnapshotChanges", ReplyAction="http://tempuri.org/IWcfService/GetSnapshotChangesResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.VisitChangeItem> GetSnapshotChanges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetServices", ReplyAction="http://tempuri.org/IWcfService/GetServicesResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Service> GetServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/MarkTimeAs", ReplyAction="http://tempuri.org/IWcfService/MarkTimeAsResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(SmartSchedule.Domain.WCF.WcfServiceBusinessException), Action="http://tempuri.org/IWcfService/MarkTimeAsWcfServiceBusinessExceptionFault", Name="WcfServiceBusinessException", Namespace="http://schemas.datacontract.org/2004/07/SmartSchedule.Domain.WCF")]
        void MarkTimeAs(SmartSchedule.Domain.TimeInterval interval, int technicianId, bool markAsWorking);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/UnscheduleVisit", ReplyAction="http://tempuri.org/IWcfService/UnscheduleVisitResponse")]
        void UnscheduleVisit(string ticketNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/Subscribe", ReplyAction="http://tempuri.org/IWcfService/SubscribeResponse")]
        void Subscribe(SmartSchedule.Domain.WCF.WcfSubscriberTypeEnum subscriberType, System.DateTime scheduleDate, SmartSchedule.Domain.User user, bool allDatesInBucket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/Unsubscribe", ReplyAction="http://tempuri.org/IWcfService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/UpdateVisit", ReplyAction="http://tempuri.org/IWcfService/UpdateVisitResponse")]
        string UpdateVisit(SmartSchedule.Domain.Visit visit, bool callbackCaller, bool allowCollisions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/BookDelayedVisit", ReplyAction="http://tempuri.org/IWcfService/BookDelayedVisitResponse")]
        bool BookDelayedVisit(int visitId, SmartSchedule.Domain.Sync.RecommendationResponseItem recommendationItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/GetBucketProcessingOptions", ReplyAction="http://tempuri.org/IWcfService/GetBucketProcessingOptionsResponse")]
        SmartSchedule.Domain.WCF.BucketProcessingOptions GetBucketProcessingOptions(int bucketVisitId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ProcessDelayedVisitTempExclusivity", ReplyAction="http://tempuri.org/IWcfService/ProcessDelayedVisitTempExclusivityResponse")]
        void ProcessDelayedVisitTempExclusivity(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, int tempExclusiveTechnicianId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ProcessDelayedVisitIgnoreExclusivity", ReplyAction="http://tempuri.org/IWcfService/ProcessDelayedVisitIgnoreExclusivityResponse")]
        void ProcessDelayedVisitIgnoreExclusivity(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ProcessDelayedVisitChangeFrame", ReplyAction="http://tempuri.org/IWcfService/ProcessDelayedVisitChangeFrameResponse")]
        void ProcessDelayedVisitChangeFrame(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, SmartSchedule.Domain.VisitAddResult frameChangeOption);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/ProcessDelayedVisitExtendWorkingHours", ReplyAction="http://tempuri.org/IWcfService/ProcessDelayedVisitExtendWorkingHoursResponse")]
        void ProcessDelayedVisitExtendWorkingHours(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, SmartSchedule.Domain.WorkingHoursExtensionResult extension);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/SaveDelayedVisit", ReplyAction="http://tempuri.org/IWcfService/SaveDelayedVisitResponse")]
        void SaveDelayedVisit(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/KeepAliveDummy", ReplyAction="http://tempuri.org/IWcfService/KeepAliveDummyResponse")]
        void KeepAliveDummy();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfService/EnqueueOptimization", ReplyAction="http://tempuri.org/IWcfService/EnqueueOptimizationResponse")]
        void EnqueueOptimization(System.DateTime date);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfService/OnViewModelChanged")]
        void OnViewModelChanged(SmartSchedule.Domain.WCF.CallbackInfo info);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfService/OnOptimizationRequested")]
        void OnOptimizationRequested(SmartSchedule.Domain.Schedule schedule);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IWcfService/ForceSync")]
        void ForceSync(SmartSchedule.Domain.WCF.SyncTypeEnum syncType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : SmartSchedule.Win32.WcfServiceClient.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.DuplexClientBase<SmartSchedule.Win32.WcfServiceClient.IWcfService>, SmartSchedule.Win32.WcfServiceClient.IWcfService {
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void ProcessPendingOptimizations() {
            base.Channel.ProcessPendingOptimizations();
        }
        
        public void ApplyOptimizationResult(SmartSchedule.Domain.Schedule schedule) {
            base.Channel.ApplyOptimizationResult(schedule);
        }
        
        public SmartSchedule.Domain.VisitAddResult CanInsertVisit(int visitId) {
            return base.Channel.CanInsertVisit(visitId);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Sync.RecommendationResponseItem> GetRecommendations(SmartSchedule.Domain.Sync.RecommendationRequest request) {
            return base.Channel.GetRecommendations(request);
        }
        
        public void RunSync(SmartSchedule.Domain.WCF.SyncTypeEnum syncType) {
            base.Channel.RunSync(syncType);
        }
        
        public void ApplyServmanData(System.Collections.Generic.List<SmartSchedule.Domain.Sync.Order> orders) {
            base.Channel.ApplyServmanData(orders);
        }
        
        public void ModifyPredictionIgnoreDate(bool isSuspend) {
            base.Channel.ModifyPredictionIgnoreDate(isSuspend);
        }
        
        public string CreateBlockout(int technicianDefaultId, System.DateTime timeStart, System.DateTime timeEnd, string note) {
            return base.Channel.CreateBlockout(technicianDefaultId, timeStart, timeEnd, note);
        }
        
        public void SendErrorEmail() {
            base.Channel.SendErrorEmail();
        }
        
        public SmartSchedule.Domain.UserResult FindUser(string passwordHash) {
            return base.Channel.FindUser(passwordHash);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.User> FindUsers() {
            return base.Channel.FindUsers();
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.UserAction> FindUserActions(System.Nullable<int> userId, System.Nullable<SmartSchedule.Domain.UserActionTypeEnum> actionType, System.Nullable<int> technicianDefaultId, string ticket, System.Nullable<System.DateTime> dashboardDate, SmartSchedule.Domain.TimeInterval actionDateInterval, SmartSchedule.Domain.SortField sortField, bool isSortAscending) {
            return base.Channel.FindUserActions(userId, actionType, technicianDefaultId, ticket, dashboardDate, actionDateInterval, sortField, isSortAscending);
        }
        
        public string AddEditUser(SmartSchedule.Domain.User user) {
            return base.Channel.AddEditUser(user);
        }
        
        public SmartSchedule.Domain.WCF.VisitsFullChangeDetail GetFullViewInfo(System.DateTime date) {
            return base.Channel.GetFullViewInfo(date);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetDefaultTechnicians() {
            return base.Channel.GetDefaultTechnicians();
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetTechnicians(System.DateTime date, bool defaultSettings, bool eliminateDetails) {
            return base.Channel.GetTechnicians(date, defaultSettings, eliminateDetails);
        }
        
        public void SaveTechnicianArrangement(System.Collections.Generic.List<SmartSchedule.Domain.Technician> orderedTechnicians, bool defaultSettings) {
            base.Channel.SaveTechnicianArrangement(orderedTechnicians, defaultSettings);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetails(int technicianDefaultId, bool defaultSettings) {
            return base.Channel.GetTechnicianDetails(technicianDefaultId, defaultSettings);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> SaveTechnicianDetail(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId, bool defaultSettings) {
            return base.Channel.SaveTechnicianDetail(affectedTechnicianDetails, removedDates, defaultTechnicianId, defaultSettings);
        }
        
        public System.Collections.Generic.Dictionary<string, SmartSchedule.Domain.ZipCode> GetZipCodes() {
            return base.Channel.GetZipCodes();
        }
        
        public void InsertZipCode(SmartSchedule.Domain.ZipCode zip) {
            base.Channel.InsertZipCode(zip);
        }
        
        public SmartSchedule.Domain.Coordinate GecocodeAddress(string address) {
            return base.Channel.GecocodeAddress(address);
        }
        
        public SmartSchedule.Domain.Coordinate GecocodeZip(string zip) {
            return base.Channel.GecocodeZip(zip);
        }
        
        public System.Nullable<System.DateTime> GetExistingSnapshotDate() {
            return base.Channel.GetExistingSnapshotDate();
        }
        
        public void CreateSnapshot() {
            base.Channel.CreateSnapshot();
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.VisitChangeItem> GetSnapshotChanges() {
            return base.Channel.GetSnapshotChanges();
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Service> GetServices() {
            return base.Channel.GetServices();
        }
        
        public void MarkTimeAs(SmartSchedule.Domain.TimeInterval interval, int technicianId, bool markAsWorking) {
            base.Channel.MarkTimeAs(interval, technicianId, markAsWorking);
        }
        
        public void UnscheduleVisit(string ticketNumber) {
            base.Channel.UnscheduleVisit(ticketNumber);
        }
        
        public void Subscribe(SmartSchedule.Domain.WCF.WcfSubscriberTypeEnum subscriberType, System.DateTime scheduleDate, SmartSchedule.Domain.User user, bool allDatesInBucket) {
            base.Channel.Subscribe(subscriberType, scheduleDate, user, allDatesInBucket);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public string UpdateVisit(SmartSchedule.Domain.Visit visit, bool callbackCaller, bool allowCollisions) {
            return base.Channel.UpdateVisit(visit, callbackCaller, allowCollisions);
        }
        
        public bool BookDelayedVisit(int visitId, SmartSchedule.Domain.Sync.RecommendationResponseItem recommendationItem) {
            return base.Channel.BookDelayedVisit(visitId, recommendationItem);
        }
        
        public SmartSchedule.Domain.WCF.BucketProcessingOptions GetBucketProcessingOptions(int bucketVisitId) {
            return base.Channel.GetBucketProcessingOptions(bucketVisitId);
        }
        
        public void ProcessDelayedVisitTempExclusivity(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, int tempExclusiveTechnicianId) {
            base.Channel.ProcessDelayedVisitTempExclusivity(saveInfo, tempExclusiveTechnicianId);
        }
        
        public void ProcessDelayedVisitIgnoreExclusivity(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo) {
            base.Channel.ProcessDelayedVisitIgnoreExclusivity(saveInfo);
        }
        
        public void ProcessDelayedVisitChangeFrame(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, SmartSchedule.Domain.VisitAddResult frameChangeOption) {
            base.Channel.ProcessDelayedVisitChangeFrame(saveInfo, frameChangeOption);
        }
        
        public void ProcessDelayedVisitExtendWorkingHours(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo, SmartSchedule.Domain.WorkingHoursExtensionResult extension) {
            base.Channel.ProcessDelayedVisitExtendWorkingHours(saveInfo, extension);
        }
        
        public void SaveDelayedVisit(SmartSchedule.Domain.WCF.DelayedVisitSaveInfo saveInfo) {
            base.Channel.SaveDelayedVisit(saveInfo);
        }
        
        public void KeepAliveDummy() {
            base.Channel.KeepAliveDummy();
        }
        
        public void EnqueueOptimization(System.DateTime date) {
            base.Channel.EnqueueOptimization(date);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfServiceClient.IWcfServiceWeb")]
    public interface IWcfServiceWeb {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/GetDefaultTechniciansWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/GetDefaultTechniciansWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetDefaultTechniciansWeb();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/GetTechnicianDetailsByServmanIdWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/GetTechnicianDetailsByServmanIdWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetailsByServmanIdWeb(string technicianServmanId, bool defaultSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/GetTechnicianDetailsWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/GetTechnicianDetailsWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetailsWeb(int technicianDefaultId, bool defaultSettings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/SaveTechnicianDetailWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/SaveTechnicianDetailWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> SaveTechnicianDetailWeb(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/ValidateTechnicianDetailsWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/ValidateTechnicianDetailsWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> ValidateTechnicianDetailsWeb(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId, bool deepValidation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWcfServiceWeb/GetRecommendationsWeb", ReplyAction="http://tempuri.org/IWcfServiceWeb/GetRecommendationsWebResponse")]
        System.Collections.Generic.List<SmartSchedule.Domain.Sync.RecommendationResponseItem> GetRecommendationsWeb(SmartSchedule.Domain.Sync.RecommendationRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceWebChannel : SmartSchedule.Win32.WcfServiceClient.IWcfServiceWeb, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceWebClient : System.ServiceModel.ClientBase<SmartSchedule.Win32.WcfServiceClient.IWcfServiceWeb>, SmartSchedule.Win32.WcfServiceClient.IWcfServiceWeb {
        
        public WcfServiceWebClient() {
        }
        
        public WcfServiceWebClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfServiceWebClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceWebClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceWebClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Technician> GetDefaultTechniciansWeb() {
            return base.Channel.GetDefaultTechniciansWeb();
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetailsByServmanIdWeb(string technicianServmanId, bool defaultSettings) {
            return base.Channel.GetTechnicianDetailsByServmanIdWeb(technicianServmanId, defaultSettings);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> GetTechnicianDetailsWeb(int technicianDefaultId, bool defaultSettings) {
            return base.Channel.GetTechnicianDetailsWeb(technicianDefaultId, defaultSettings);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> SaveTechnicianDetailWeb(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId) {
            return base.Channel.SaveTechnicianDetailWeb(affectedTechnicianDetails, removedDates, defaultTechnicianId);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetailValidationError> ValidateTechnicianDetailsWeb(System.Collections.Generic.List<SmartSchedule.Domain.WCF.TechnicianDetail> affectedTechnicianDetails, System.Collections.Generic.List<System.DateTime> removedDates, int defaultTechnicianId, bool deepValidation) {
            return base.Channel.ValidateTechnicianDetailsWeb(affectedTechnicianDetails, removedDates, defaultTechnicianId, deepValidation);
        }
        
        public System.Collections.Generic.List<SmartSchedule.Domain.Sync.RecommendationResponseItem> GetRecommendationsWeb(SmartSchedule.Domain.Sync.RecommendationRequest request) {
            return base.Channel.GetRecommendationsWeb(request);
        }
    }
}
