<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="m_images.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="m_images.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABu
        CAAAAk1TRnQBSQFMAgEBAwEAAQQBAAEEAQABDgEAAQwBAAT/ARkBAAj/AUIBTQE2BwABNgMAASgDAAE4
        AwABDAMAAQEBAAEYBQAB4AEHFQABngFoAUUBlAF7AVIBlAF7AVIBlAF7AVIBiAFyAVABcQFfAUsBlAF7
        AVIBlAF7AVIBlAF7AVIBlAF7AVIBlAF7AVIBpgFYATs5AAErAU8BuQEzAVUBuQEyAVQBuAEyAVQBuAEz
        AVUBuQErAU8BuTYAAZQBewFSAakBkAFnAdYBwwGgAecB1gG1Ac4BugGVAa0BlAFmAbIBmgFiAc4BvQGU
        Ac4BvQGUAc4BtwGOAc4BugGRAc4BvQGUAb0BqgGBAZwBagFGAx8DOQMOAzgDBwMGAwADAgMZAwADNAMh
        A0cDCAkAATYBWAHCAWABfAHyAVQBcgHzAVYBdAHzAVYBcwHzAVQBcgHzAWABfAHyATYBWAHCMwABlAGE
        AWMB2wHKAakB+AHzAeoD/wH1Ae4B3wHEAbMBlgF5AWgBVAHOAb0BlAGHAXcBVQG8AawBhAGZAYgBbQGV
        AYQBagG9Aa0BhgGcAXEBVANxA30DawNpA0MDAAMxA0oDAAMuA3QDcQOJA3cGAAE4AVkBxgFYAXQB8gEa
        ASgB3AEPASYB4QEjAUsB8QEkAUwB8AERASoB4wEaASgB2wFYAXMB8QE4AVkBxzAAAaUBjAFjAdYBxAGi
        AfUB8QHnA/8B9QHuAd8BxAGzAZYBegFpAVcB1gHGAaUB1gHGAaUB1gHGAaUB1gHGAaUB1gHGAaUByAG1
        AZIBrAF3AVQDagNeA2sDhQOcAzsDJAMqAxQDlQODBmQDhQMAASYBTAHAAWIBfgH3ARsBKAHbAlYB1wJh
        AdoBFQErAeEBFwEuAeIBWQFbAdoBXwFgAdkBHAEpAdsBYQF+AfcBJwFMAcAtAAGlAYwBYwHWAcQBogHq
        AeABygHvAecB1gHoAdwBxQHCAbIBkQGIAXgBVwHWAcYBpQGXAY4BcwHBAbMBlAGiAZIBcQGiAZIBcQHI
        AbUBkgGsAXcBVAMHAwgDAAMCAy8DkQNxA2oDewMrAwADCwMBAwoDAAE3AVsBzAFVAXIB9gEeATAB3wFY
        AVkB2QHPAdEB6gFbAVwB2gFRAVMB2QHPAdAB6QFjAWQB2wEdAS8B3wFUAXEB9gE3AVsBzC0AAaUBjAFj
        AdYBxAGiAeoB4AHQAe8B5wHeAegB3AHJAdIBwAGcAbsBowF7Ad4BzgGtAd4BzgGtAd4BzgGtAd4BzgGy
        Ad4BzgGyAc4BuwGYAawBdwFUAwADBQOCA0cDAAMxAw4DHwMlAwADSQODAw4DDwMAATQBWQHKAVoBdgH1
        AT4BYgHxAR8BMwHhAUQBRQHWAdcB2QHrAdkB2wHrAlMB2QEcATAB3wE+AWEB8AFaAXcB9QE0AVkByi0A
        AaUBjAFjAc8BvgGbAegB4wHOAe8B6gHeAeQB2QHGAbwBrAGLAYoBegFZAecB1gG1AaABkAFvAc8BvgGd
        Aa8BngF9AaoBmgF8Ac4BuwGeAawBdwFUAwADUAYAAwoDrAkAAw8DvQMAA5ADBQMAATMBWAHKAV8BewH1
        AUcBaAHwASABMgHfAVEBUgHYAdMB1AHqAdQB1QHqAV0BXgHZARwBLQHdAUUBZwHwAWABewH1ATMBWAHK
        LQABpQGMAWMBzwG+AZsB7QHjAdQB9wHvAecB6QHeAcsB0QG/AZwByQGzAYwB3gHWAb0B5gHWAbYB4QHW
        AbsB4wHWAcIB4wHWAcIBzgHBAaMBrAF3AVQDCAMPA6wDlwMAA1wDiQN9A4kDAANdA68DOgMYAwABNAFZ
        AcwBZgGBAfYBJwE2Ad0BYgFjAdoBzwHQAekBTgFQAdkBRQFHAdgBzAHOAekCawHaASUBMwHcAWYBgQH2
        ATUBWQHMLQABpQGMAWMBzwG+AZsB8wHvAeUD/wHuAecB2QGzAaMBhAFmAVQBNwGtAZQBWgGtAZQBaQGz
        AZoBcQG1AaEBeAHGAboBlwHOAcEBowGsAXcBVAYAAwMDBgMAAwkDAAMGAwkDAAMEAw4JAAEmAUsBwAFv
        AYoB9wEtATkB3QFRAVIB2AFVAVcB2QExAUUB4gE1AUkB5AFOAVAB2AJWAdgBLAE2AdwBbwGKAfgBJQFL
        AcAtAAG1AaUBewHKAboBnwHxAewB5QP/AecB3wHZAb8BogF4Aa0BcwEIAa0BcwEIAa0BcwEIAbgBhQEa
        AccBkQEXAdwBtwFhAd4B1AG2AbkBjgFqA1QDZgM+A0YDXANRA0gDTQNCA2YDVQM3A14DWwYAATkBWQHH
        AWoBhAHyATABPAHeATcBSAHhAWABfQHwAWEBfgHxATsBTQHjAS4BOgHcAWkBggHxATkBWQHHMAABzgG9
        AZQBzgG9AZQB8QHsAeAD/wHqAeMB0QHQAcABlgHcAc4Bqg//AfEB7AHgAc8BoQF+MwABNgFYAcEBdAGM
        AfEBdQGOAfQBdAGMAfMBdAGLAfIBdQGOAfQBdAGNAfEBNwFYAcI2AAHdAa8BlAHYAcgBpwHbAcsBqgHb
        AcsBqgHNAboBlwG7AaMBewHeAc4BrQHXAccBpgHcAcwBqwHZAckBqAHZAckBqAHaAZIBezkAASgBTQG5
        AS4BUgG4AS0BUQG4AS0BUQG4AS4BUgG4ASgBTQG5NgABQgFNAT4HAAE+AwABKAMAATgDAAEMAwABAQEA
        AQEFAAFgFwAD/wEAAYABBwL/AQMBwAUAAQ4BAQHABQABDAEAAcAFAAEIAQABQAUAAQgBAAFABQABCAEA
        AUAEAAHOAUgBAAFABQABCAEAAUAFAAEIAQABQAUAAQwBAAHAAwABAwH/Af4BAQHAAgABgAEHAv8BAwHA
        AgAL
</value>
  </data>
</root>