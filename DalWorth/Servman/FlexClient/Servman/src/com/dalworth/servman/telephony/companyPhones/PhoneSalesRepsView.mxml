<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
			import com.dalworth.servman.service.SalesRepService;
			import com.dalworth.servman.events.SalesRepEvent;
			import com.dalworth.servman.domain.SalesRep;
			import com.dalworth.servman.events.BusinessPartnerEvent;
			import mx.core.Application;
			import com.dalworth.servman.main.bp.BusinessPartnerSelectorPopup;
			import com.dalworth.servman.domain.BusinessPartner;
			import com.dalworth.servman.service.BusinessPartnerService;
			import com.dalworth.servman.domain.PhoneCallWorkflow;
			import mx.events.DynamicEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.dalworth.servman.service.PhoneService;
			import mx.collections.ArrayCollection;
			import com.dalworth.servman.domain.Phone;
			import mx.rpc.Responder;
			
			[Bindable]
			private var salesReps:ArrayCollection;
			
			private var _phone:Phone;
			[Bindable]
			public function get phone():Phone { return _phone; }
			public function set phone(value:Phone):void 
			{
				_phone = value;
				initSalesReps();
			}
			
			private function startRemoting():void 
			{
				this.enabled = false;
			}
			
			private function stopRemoting():void 
			{
				this.enabled = true;
			}
			
			private function initSalesReps():void 
			{
				if (salesReps == null)
					salesReps = new ArrayCollection();
				
				salesReps.removeAll();
				if (_phone == null)
					return; 

				startRemoting();
				SalesRepService.getInstance().getByCompanyPhoneId(_phone.Id).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							var result:Array = event.result as Array;
							var len:int = result.length;
							for (var i:int = 0; i < len; i++)
							{
								var salesRep:SalesRep = result[i] as SalesRep;
								salesReps.addItem(salesRep);
							}
						},
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
			private function onAddSalesRep():void 
			{
				var popup:SalesRepSelectorPopup = SalesRepSelectorPopup.open(Application.application as DisplayObject, salesReps);
				popup.addEventListener(SalesRepEvent.SALES_REP_SELECT, onSalesRepSelect);
			}
			
			private function onSalesRepSelect(event:SalesRepEvent):void 
			{
				var salesRep:SalesRep = event.salesRepUser;
				if (salesRep == null)
					return;
				
				startRemoting();
				SalesRepService.getInstance().addCompanyPhone(salesRep, phone).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							initSalesReps();
						}, 
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
			private function onRemoveSalesRep():void 
			{
				var salesRep:SalesRep = dgSalesReps.selectedItem as SalesRep;
				if (salesRep == null)
					return;
				
				startRemoting();
				SalesRepService.getInstance().removeCompanyPhone(salesRep, phone).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							initSalesReps();
						}, 
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
		]]>
	</mx:Script>

	<mx:VBox width="100%" height="100%" 
		horizontalAlign="right">
		<mx:DataGrid id="dgSalesReps" width="100%" height="100%" dataProvider="{salesReps}">
			<mx:columns>
				<mx:DataGridColumn headerText="Related Sales Reps" dataField="ShowAs"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox width="100%">
			<mx:Button label="Remove" click="onRemoveSalesRep()" enabled="{dgSalesReps.selectedItem != null}" width="80"/>
			<mx:Spacer width="100%"/>
			<mx:Button label="Add" click="onAddSalesRep()" width="80"/>
		</mx:HBox>
	</mx:VBox>

</mx:Canvas>
