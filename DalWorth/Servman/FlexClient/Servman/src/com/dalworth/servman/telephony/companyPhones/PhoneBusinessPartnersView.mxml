<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<mx:Script>
		<![CDATA[
			import com.dalworth.servman.events.BusinessPartnerEvent;
			import mx.core.Application;
			import com.dalworth.servman.main.bp.BusinessPartnerSelectorPopup;
			import com.dalworth.servman.domain.BusinessPartner;
			import com.dalworth.servman.service.BusinessPartnerService;
			import com.dalworth.servman.domain.PhoneCallWorkflow;
			import mx.events.DynamicEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import com.dalworth.servman.service.PhoneService;
			import mx.collections.ArrayCollection;
			import com.dalworth.servman.domain.Phone;
			import mx.rpc.Responder;
			
			[Bindable]
			private var businessPartners:ArrayCollection;
			
			private var _phone:Phone;
			[Bindable]
			public function get phone():Phone { return _phone; }
			public function set phone(value:Phone):void 
			{
				_phone = value;
				initBusinessPartners();
			}
			
			private function startRemoting():void 
			{
				this.enabled = false;
			}
			
			private function stopRemoting():void 
			{
				this.enabled = true;
			}
			
			private function initBusinessPartners():void 
			{
				if (businessPartners == null)
					businessPartners = new ArrayCollection();
				
				businessPartners.removeAll();
				if (_phone == null)
					return; 

				startRemoting();
				BusinessPartnerService.getInstance().getByCompanyPhoneId(_phone.Id).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							var result:Array = event.result as Array;
							var len:int = result.length;
							for (var i:int = 0; i < len; i++)
							{
								var partner:BusinessPartner = result[i] as BusinessPartner;
								businessPartners.addItem(partner);
							}
						},
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
			private function onAddBusinessPartner():void 
			{
				var popup:BusinessPartnerSelectorPopup = BusinessPartnerSelectorPopup.open(Application.application as DisplayObject, businessPartners);
				popup.addEventListener(BusinessPartnerEvent.BUSINESS_PARTNER_SELECT, onBusinessPartnerSelect);
			}
			
			private function onBusinessPartnerSelect(event:BusinessPartnerEvent):void 
			{
				var businesPartner:BusinessPartner = event.businessPartner;
				if (businesPartner == null)
					return;
				
				startRemoting();
				BusinessPartnerService.getInstance().addCompanyPhone(businesPartner, phone).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							initBusinessPartners();
						}, 
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
			private function onRemoveBusinessPartner():void 
			{
				var businesPartner:BusinessPartner = dgBusinessPartners.selectedItem as BusinessPartner;
				if (businesPartner == null)
					return;
				
				startRemoting();
				BusinessPartnerService.getInstance().removeCompanyPhone(businesPartner, phone).addResponder(
					new mx.rpc.Responder(
						function (event:ResultEvent):void 
						{
							stopRemoting();
							initBusinessPartners();
						}, 
						function (event:FaultEvent):void 
						{
							stopRemoting();
							trace(event.fault.message);
						}));
			}
			
		]]>
	</mx:Script>

	<mx:VBox width="100%" height="100%" 
		horizontalAlign="right">
		<mx:DataGrid id="dgBusinessPartners" width="100%" height="100%" dataProvider="{businessPartners}">
			<mx:columns>
				<mx:DataGridColumn headerText="Related Business Partners" dataField="ShowAs"/>
			</mx:columns>
		</mx:DataGrid>

		<mx:HBox width="100%">
			<mx:Button label="Remove" click="onRemoveBusinessPartner()" enabled="{dgBusinessPartners.selectedItem != null}" width="80"/>
			<mx:Spacer width="100%"/>
			<mx:Button label="Add" click="onAddBusinessPartner()" width="80"/>
		</mx:HBox>
	</mx:VBox>

</mx:Canvas>
