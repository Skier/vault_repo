<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:voice="com.affilia.voice.*" xmlns:leadConnection="com.dalworth.servman.main.lead.leadConnection.*"
	creationComplete="onCreate()">
	
	<mx:Script>
		<![CDATA[
			import com.dalworth.servman.main.breadCrumb.BreadCrumbModel;
			import com.dalworth.servman.domain.User;
			import com.dalworth.servman.service.registry.UserRegistry;
			import com.dalworth.servman.service.registry.SalesRepRegistry;
			import com.dalworth.servman.domain.SalesRep;
			import com.dalworth.servman.service.registry.LeadTypeRegistry;
			import com.dalworth.servman.service.registry.BusinessPartnerRegistry;
			import com.dalworth.servman.domain.BusinessPartner;
			import com.dalworth.servman.service.LeadTypeService;
			import com.dalworth.servman.domain.LeadType;
			import com.dalworth.servman.events.JobEvent;
			import com.affilia.util.DateUtil;
			import com.dalworth.servman.service.UserService;
			import com.dalworth.servman.service.BusinessPartnerService;
			import com.dalworth.servman.service.SalesRepService;
			import com.dalworth.servman.domain.Lead;
			import mx.binding.utils.ChangeWatcher;
			
			[Bindable]
			public var isEditMode:Boolean = false;
			
			[Bindable]
			private var model:LeadConnectionModel;
			private var controller:LeadConnectionController;
			
			public function init():void 
			{
				model = LeadConnectionModel.getInstance();
				if (controller == null)
					controller = new LeadConnectionController(this);
				
				BreadCrumbModel.getInstance().breadCrumbString = "Match Leads to QuickBooks Jobs";

				controller.initModel();
				
				isEditMode = false;
			}
			
			private function onCreate():void 
			{
				ChangeWatcher.watch(dgLeads, "selectedItem", 
					function(event:*):void 
					{
						controller.selectLead(dgLeads.selectedItem as Lead);

						if (dgLeads.selectedItem == null)
							isEditMode = false;
						else
							isEditMode = true;
					});

				lstJobs.addEventListener(JobEvent.JOB_CONNECT, 
					function (event:JobEvent):void 
					{
						controller.matchJobToLead(event.job);
					});	
			}
			
			private function onShowAllJobs():void 
			{
			}
			
			private static const COLUMN_SALESREP:String = "columnSalesRep";
			private static const COLUMN_PARTNER:String = "columnPartner";
			private static const COLUMN_USER:String = "columnUser";
			private static const COLUMN_TYPE:String = "columnType";
			private static const COLUMN_PHONE_TO:String = "columnPhoneTo";
			private static const COLUMN_DATE_CREATED:String = "columnDateCreated";
			
			private function getSalesRepName(id:int):String 
			{
				var salesRep:SalesRep = SalesRepRegistry.getInstance().getLocal(id) as SalesRep;
				if (salesRep)
					return salesRep.ShowAs;
				else 
					return "";
			}
			
			private function getBusinessPartnerName(id:int):String 
			{
				var businessPartner:BusinessPartner = BusinessPartnerRegistry.getInstance().getLocal(id) as BusinessPartner;
				if (businessPartner)
					return businessPartner.ShowAs;
				else 
					return "";
			}
			
			private function getUserName(id:int):String 
			{
				var user:User = UserRegistry.getInstance().getLocal(id) as User;
				if (user)
					return user.Name;
				else 
					return "";
			}
			
			private function getLabel(item:Object, column:DataGridColumn):String 
			{
				if (item is Lead) 
				{
					switch (column.dataField) 
					{
						case COLUMN_SALESREP :
							return getSalesRepName(Lead(item).SalesRepId);
						
						case COLUMN_PARTNER :
							return getBusinessPartnerName(Lead(item).BusinessPartnerId);
						
						case COLUMN_USER :
							return getUserName(Lead(item).AssignedToUser);
						
						case COLUMN_TYPE :
							if (Lead(item).LeadTypeId > 0)
								return LeadTypeRegistry.getInstance().getLocal(Lead(item).LeadTypeId).Name;
							else 
								return "[unknown]";
						
						case COLUMN_PHONE_TO :
						return (Lead(item).ToPhoneNumber);
						
						case COLUMN_DATE_CREATED :
						return DateUtil.getDateTimeStr(Lead(item).DateCreated);
						
						default :
						return "";
					}
				} else 
				{
					return "bad object";
				}
			}
			
			private function onLeadUpdate():void 
			{
				controller.initJobs();
			}
			
			private function onDateFromChange():void 
			{
				model.dateFrom = dateFrom.selectedDate;
				controller.initJobs();
			}
			
		]]>
	</mx:Script>

	<mx:VBox width="100%" height="100%" backgroundColor="#FFFFFF">
		<mx:HBox width="100%" height="100%">
			<mx:VBox width="100%" height="100%"
				paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" verticalGap="0"
				borderColor="#CCCCCC" borderStyle="solid">
				<mx:HBox width="100%" verticalAlign="middle" backgroundColor="#DDDDDD" borderColor="#CCCCCC"
					paddingLeft="4" paddingRight="4" paddingTop="2" paddingBottom="2">
					<mx:Label text="Pending Leads:" fontSize="12"/>
				</mx:HBox>
		
				<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
					<mx:DataGrid id="dgLeads" width="100%" height="100%" dataProvider="{model.leads}">
						<mx:columns>
							<mx:DataGridColumn headerText="Created" labelFunction="getLabel" dataField="{COLUMN_DATE_CREATED}" width="150" minWidth="50"/>
							<mx:DataGridColumn headerText="Business Partner" labelFunction="getLabel" dataField="{COLUMN_PARTNER}" width="150" minWidth="50"/>
							<mx:DataGridColumn headerText="Type" labelFunction="getLabel" dataField="{COLUMN_TYPE}" width="150" minWidth="50"/>
							<mx:DataGridColumn headerText="To Ph#" labelFunction="getLabel" dataField="{COLUMN_PHONE_TO}" width="150" minWidth="50"/>
							<mx:DataGridColumn headerText="Assigned To" labelFunction="getLabel" dataField="{COLUMN_USER}" width="150" minWidth="50"/>
							<mx:DataGridColumn headerText="Sales Rep" labelFunction="getLabel" dataField="{COLUMN_SALESREP}" width="150" minWidth="50"/>
						</mx:columns>
					</mx:DataGrid> 
				</mx:VBox>
			</mx:VBox>

			<leadConnection:LeadDetailView width="320" height="100%" lead="{model.currentLead}"
				leadUpdate="onLeadUpdate()"
				visible="{model.currentLead != null}" includeInLayout="{model.currentLead != null}"/>
		</mx:HBox>
		
		<mx:VBox width="100%" height="100%"
			paddingLeft="2" paddingRight="2" paddingTop="2" paddingBottom="2" verticalGap="0"
			borderColor="#CCCCCC" borderStyle="solid" cornerRadius="2">
			<mx:HBox width="100%" verticalAlign="middle" backgroundColor="#DDDDDD" borderColor="#CCCCCC"
				paddingLeft="4" paddingRight="4" paddingTop="2" paddingBottom="2" cornerRadius="2">
				<mx:Label text="Related Jobs:" fontSize="12"/>
				<mx:Spacer width="100%"/>
				<mx:Label text="created after:" fontSize="12"/>
				<mx:DateField id="dateFrom" selectedDate="{model.currentLead.DateCreated}" change="onDateFromChange()"/>
			</mx:HBox>

			<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
				<mx:List id="lstJobs" width="100%" height="100%" dataProvider="{model.jobs}"
					variableRowHeight="true"
					itemRenderer="com.dalworth.servman.main.lead.CustomerJobRenderer"/>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
</mx:Canvas>
