<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:controls="com.affilia.controls.*"
	initialize="onInit()" show="onShow()" hide="onHide()"
	creationComplete="onCreate()" 
	xmlns:lead="com.dalworth.servman.main.lead.*" xmlns:leadConnection="com.dalworth.servman.main.lead.leadConnection.*" xmlns:filter="com.dalworth.servman.main.owner.lead.filter.*">
	
	<mx:Script>
		<![CDATA[
			import com.dalworth.servman.main.breadCrumb.BreadCrumbModel;
			import com.dalworth.servman.service.registry.UserRegistry;
			import com.dalworth.servman.domain.User;
			import com.dalworth.servman.service.registry.SalesRepRegistry;
			import com.dalworth.servman.domain.SalesRep;
			import com.dalworth.servman.service.registry.LeadTypeRegistry;
			import com.dalworth.servman.service.registry.BusinessPartnerRegistry;
			import com.dalworth.servman.service.LeadTypeService;
			import com.dalworth.servman.domain.LeadType;
			import mx.core.Application;
			import com.dalworth.servman.main.lead.LeadCreatePopup;
			import com.affilia.util.DateUtil;
			import mx.events.CloseEvent;
			import com.dalworth.servman.service.UserService;
			import com.dalworth.servman.service.SalesRepService;
			import mx.events.ListEvent;
			import mx.events.ItemClickEvent;
			import com.dalworth.servman.service.BusinessPartnerService;
			import com.dalworth.servman.domain.BusinessPartner;
			import com.dalworth.servman.domain.LeadStatus;
			import com.dalworth.servman.main.lead.LeadEditPopup;
			import com.dalworth.servman.events.LeadEvent;
			import mx.controls.Alert;
			import com.dalworth.servman.domain.Lead;
			
			private static const COLUMN_PARTNER:String = "columnPartner";
			private static const COLUMN_TYPE:String = "columnType";
			private static const COLUMN_NAME:String = "columnName";
			private static const COLUMN_NOTES:String = "columnNotes";
			private static const COLUMN_DATE_CREATED:String = "columnDateCreated";
			private static const COLUMN_DATE_UPDATED:String = "columnDateUpdated";
			
			[Bindable]
			public var isEditMode:Boolean = false;
			
			[Bindable]
			private var model:OwnerLeadsModel = OwnerLeadsModel.getInstance();
			
			private var controller:OwnerLeadsController;
			
			private var timer:Timer;
			
			public function init():void 
			{
				controller = new OwnerLeadsController(this);
				addEventListener(OwnerLeadsModel.MODEL_INITED, onModelInited);
				controller.initModel();
				
				if (vsLeads != null)
					vsLeads.selectedIndex = 0;

				BreadCrumbModel.getInstance().breadCrumbString = "Review Leads";
				
				if (viewLeadFilter != null)
					viewLeadFilter.init();
				
				refreshLeads();
				
				isEditMode = false;
			}
			
			private function onInit():void 
			{
				initTimer();
			}
			
			[Bindable] private var timerCount:int;
			private function initTimer():void 
			{
				timer = new Timer(3000);
				timer.addEventListener(TimerEvent.TIMER, onTimerTick);
			}
			
			private function onTimerTick(event:TimerEvent):void 
			{
				timerCount++;
				refreshLeads();
			}
			
			private function refreshLeads():void 
			{
				if (!controller)
					return;
					
				if (viewLeadFilter != null)
					controller.refreshLeads(viewLeadFilter.getFilter());
				else 
					controller.refreshLeads(null);
			}
			
			private function onModelInited(event:Event):void 
			{
				timer.start();
			}
			
			private function onShow():void 
			{
				//timer.start();
			}
			
			private function onHide():void 
			{
				//timer.stop();
			}
			
			private function onNewClick():void 
			{
				 var lead:Lead = new Lead();
				 lead.LeadStatusId = LeadStatus.STATUS_NEW_ID;
				 openLead(lead);
			}
			
			private function onCreateLead():void 
			{
				 var lead:Lead = new Lead();
				 lead.LeadStatusId = LeadStatus.STATUS_NEW_ID;
				 LeadCreatePopup.open(Application.application as DisplayObject, lead);
			}
			
			private function onCreate():void 
			{
				viewLead.addEventListener(LeadEvent.LEAD_SAVE, onLeadSave);
				viewLead.addEventListener("closeLeadEditor",
					function(event:*):void 
					{
						model.isBusy = false;
						
						BreadCrumbModel.getInstance().breadCrumbString = "Review Leads";
				
						vsLeads.selectedChild = viewLeadsList;
						viewLead.setLead(null);
						
						isEditMode = false;
						refreshLeads();  
					});
			}
			
			private function openLead(lead:Lead, isReadOnly:Boolean = false):void 
			{
				model.isBusy = true;
				
				vsLeads.selectedChild = viewLead;
				viewLead.setLead(lead);
				
				BreadCrumbModel.getInstance().breadCrumbString = "Review Leads > Edit Lead [" + lead.FirstName + " " + lead.LastName + "]";

				isEditMode = true;
			}
			
			private var _selectedLead:Lead;
			[Bindable]
			private function get selectedLead():Lead { return _selectedLead; }
			private function set selectedLead(value:Lead):void 
			{
				_selectedLead = value;
				controller.refreshProjects(value);
			} 
			
			private function getBusinessPartnerName(id:int):String 
			{
				var businessPartner:BusinessPartner = BusinessPartnerRegistry.getInstance().getLocal(id) as BusinessPartner;
				if (businessPartner)
					return businessPartner.ShowAs;
				else 
					return "";
			}
			
			private function getLabel(item:Object, column:DataGridColumn):String 
			{
				if (item is Lead) 
				{
					switch (column.dataField) 
					{
						case COLUMN_PARTNER :
							return getBusinessPartnerName(Lead(item).BusinessPartnerId);
						
						case COLUMN_TYPE :
							if (Lead(item).LeadTypeId > 0)
								return LeadTypeRegistry.getInstance().getLocal(Lead(item).LeadTypeId).Name;
							else 
								return "[unknown]";
						
						case COLUMN_NAME :
							return (Lead(item).FirstName + " " + Lead(item).LastName);
						
						case COLUMN_NOTES :
						return (Lead(item).CustomerNotes);
						
						case COLUMN_DATE_CREATED :
						return DateUtil.getDateTimeStr(Lead(item).DateCreated);
						
						case COLUMN_DATE_UPDATED :
						return DateUtil.getDateTimeStr(Lead(item).DateLastUpdated);
						
						default :
						return "";
					}
				} else 
				{
					return "bad object";
				}
			}
			
			private function onLeadSave(event:LeadEvent):void 
			{
				var lead:Lead = event.lead;
				if (!model.leads.contains(lead))
					model.leads.addItem(lead);
				var idx:int = model.leads.getItemIndex(lead);
				dgLeads.selectedIndex = idx;
				dgLeads.scrollToIndex(idx);
			}
			
			private function onLeadsDoubleClick(event:ListEvent):void 
			{
				if (dgLeads.selectedItem != null)
				{
					var lead:Lead = dgLeads.selectedItem as Lead;
					openLead(lead);
				}
			}
			
			private function onFilterChange():void 
			{
				if (controller)
					controller.refreshLeads(viewLeadFilter.getFilter());
			}
			
		]]>
	</mx:Script>
	
	<mx:ViewStack id="vsLeads" width="100%" height="100%" creationPolicy="all">
		<mx:HBox id="viewLeadsList" width="100%" height="100%" verticalGap="5" backgroundColor="#FFFFFF">
			<mx:VBox width="100%" height="100%">
				
				<filter:OwnerLeadFilterView id="viewLeadFilter" width="100%" filterChange="onFilterChange()"
					borderColor="#7CB8EB" borderStyle="solid" dropShadowEnabled="true" shadowDistance="0" shadowDirection="center"/>
		
				<mx:DataGrid id="dgLeads" dataProvider="{model.leads}" width="100%" height="100%" minWidth="300"
					sortableColumns="false" draggableColumns="false" editable="false" resizableColumns="true"
					doubleClickEnabled="true" itemDoubleClick="onLeadsDoubleClick(event)">
					<mx:columns>
						<mx:DataGridColumn headerText="" width="20" minWidth="20" itemRenderer="com.dalworth.servman.main.owner.lead.LeadStatusIR"/>
						<mx:DataGridColumn headerText="" width="20" minWidth="20" itemRenderer="com.dalworth.servman.main.owner.lead.LeadCallIR"/>
						<mx:DataGridColumn headerText="Business Partner" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_PARTNER}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Type" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_TYPE}" width="80" minWidth="40"/>
						<mx:DataGridColumn headerText="Customer" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_NAME}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Time Created" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_DATE_CREATED}" width="100" minWidth="50"/>
						<mx:DataGridColumn headerText="Last Updated" itemRenderer="mx.controls.Label" labelFunction="getLabel" dataField="{COLUMN_DATE_UPDATED}" width="100" minWidth="50"/>
<!--
						<mx:DataGridColumn headerText="Notes" labelFunction="getLabel" dataField="{COLUMN_NOTES}" minWidth="20"/>
-->
					</mx:columns>
				</mx:DataGrid>
			</mx:VBox>
		
			<mx:VBox height="100%" width="150" horizontalAlign="center">
				<mx:Button width="100%" height="35" label="New Lead" click="onNewClick()" fontSize="12"/>
				<mx:Canvas width="100%" height="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
					<mx:VBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" backgroundColor="#FFFFEE"
						verticalGap="0" fontSize="10">
						<mx:Text text="Company Inbound Phones:" width="100%" fontWeight="bold" color="#333333"/>
						<mx:Text width="100%" text="+1(214)919-5203" color="#333333"/>
						<mx:Text width="100%" text="+1(214)427-1965" color="#333333"/>
						
						<mx:Text text="All Sons Moving" width="100%" fontWeight="bold"/>
						<mx:Text width="100%" text="Call to +1(214)919-5203 from any phone will create voice messsage."/>
						
						<mx:Text text="Franklin Plumbing" width="100%" fontWeight="bold"/>
						<mx:Text width="100%" text="Can call from +1(214)335-4143 to any companys phone number. Redirect to emergency phone."/>
						
						<mx:Text text="Molly Maids" width="100%" fontWeight="bold"/>
						<mx:Text width="100%" text="Can call from +1(817)355-8625 to any companys phone number. Redirect to dispatcher, who handle call from the app."/>
	
						<mx:Text text="DalworthRestoration.com website" width="100%" fontWeight="bold"/>
						<mx:Text width="100%" text="Any call to +1(214)427-1965 will be redirected to dispatcher, who handle call from app."/>
					</mx:VBox>
					<mx:Label text="[refreshing...]" visible="{model.isBusy}" bottom="0" right="0"/>
				</mx:Canvas>
			</mx:VBox>
		</mx:HBox>
		
		<lead:LeadEditView id="viewLead" width="100%" height="100%"/>
	</mx:ViewStack>
</mx:Canvas>
